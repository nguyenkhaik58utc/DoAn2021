@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.CalendarOverrideItem
@{
    var id = ViewData["id"].ToString();
    var name = ViewData["DepartmentName"].ToString();
    var startDate = ViewData["StartDate"].ToString();
    var endDate = ViewData["EndDate"].ToString();
}
@(Html.X().ChartTheme()
        .ThemeName("White")
        .Axis(new SpriteAttributes { Stroke = "rgb(8,69,148)", StrokeWidth = 1 })
        .AxisLabel(new SpriteAttributes { Fill = "rgb(8,69,148)", Font = "12px Arial", FontFamily = "Arial" })
        .AxisTitle(new SpriteAttributes { Font = "bold 18px Arial" })
)
@(Html.X().Window()
    .ID("winChartColumn")
    .Title("Biểu đồ thống kê hồ sơ của [ " + name + " ]")
    .Icon(Icon.ChartBar)
    .Width(780)
    .BodyPadding(6)
    .Constrain(true)
    .Modal(true)
    .Layout(LayoutType.Fit)
    .Items(
   Html.X().Panel()
                    .Height(395)
                    .Layout(LayoutType.Fit)
                          .TopBar(Html.X().Toolbar()
            .Items(
                Html.X().Button()
                    .Text("Tải lại")
                    .Icon(Icon.ArrowRefresh)
                    .Handler("#{ChartTaskDepartment}.getStore().reload()"),
                Html.X().ToolbarSeparator(),
                Html.X().Button()
                    .Text("Lưu biểu đồ")
                    .Icon(Icon.Disk)
                    .Handler("saveChart")
                    )
                    )
                    .Items(
                    Html.X().Chart()
                    .ID("ChartTaskDepartment")
                    .Shadow(true)
                    .Theme("White")
                    .Animate(true)
                        .Background(Html.X().DrawBackground()
                            .Gradient(Html.X().Gradient()
                            .GradientID("backgroundGradient")
                            .Angle(45)
                            .Stops(s =>
                            {
                                s.Add(Html.X().GradientStop()
                                    .Offset(0)
                                    .Color("#ffffff"));
                                s.Add(Html.X().GradientStop()
                                    .Offset(100)
                                    .Color("#eaf1f8"));
                            })
                        )
                    )
                    .Store(Html.X().Store()
                    .Data(Model)
                        .Model(Html.X().Model()
                        .Fields(
                                    Html.X().ModelField().Name("Name"),
                                    Html.X().ModelField().Name("Data1")
                        )
                    )
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("id", id, ParameterMode.Raw));
                            ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                        })
                        .Proxy(Html.X().AjaxProxy()
                            .Url(Url.Action("GetDataColumn"))
                            .Reader(Html.X().JsonReader().Root("data"))
                    )
                    )
                    .Axes(
                            Html.X().NumericAxis()
                            .Fields("Data1")
                            .Position(Position.Bottom)
                            .Grid(true)
                            .Title("Biểu đồ thống kê hồ sơ từ ngày:" + startDate + " đến ngày: " + endDate)
                            .Minimum(0)
                                .Label(Html.X().AxisLabel()
                                    .Renderer(r => r.Handler = "return Ext.util.Format.number(value, '0,0');")
                            ),
                            Html.X().CategoryAxis()
                            .Position(Position.Left)
                            .Fields("Name")
        //  .Title("Month of the Year")
                    )
                        .Series(Html.X().BarSeries()
                        .Axis(Position.Bottom)
                        .Highlight(true)
                        .XField("Name")
                        .YField("Data1")
                            .Tips(Html.X().ChartTip()
                            .TrackMouse(true)
                            .Width(210)
                            .Height(28)
                                .Renderer(r => r.Handler = "this.setTitle(storeItem.get('Name') + ': ' + storeItem.get('Data1') + ' hồ sơ');")
                        )
                            .Label(Html.X().SeriesLabel()
                            .Display(SeriesLabelDisplay.InsideEnd)
                            .Field(new[] { "Data1" })
                            .Orientation(Orientation.Horizontal)
                            .Color("#333")
                            .TextAnchor("middle")
                        )
                    )

            )
    )
.Buttons(
    Html.X().ButtonExit()
    )
)
<script>
    var tipRenderer = function (storeItem, item) {
        var total = 0;
        App.Chart1.getStore().each(function (rec) {
            total += rec.get('Data1');
        });
        this.setTitle(storeItem.get('Name') + ': ' + Math.round(storeItem.get('Data1') / total * 100) + '%');
    };
    var saveChart = function (btn) {
        Ext.MessageBox.confirm('Lưu biểu đồ', 'Bạn có muốn lưu biểu đồ dưới dạng ảnh không?', function (choice) {
            if (choice == 'yes') {
                btn.up('panel').down('chart').save({
                    type: 'image/png'
                });
            }
        });
    };
</script>