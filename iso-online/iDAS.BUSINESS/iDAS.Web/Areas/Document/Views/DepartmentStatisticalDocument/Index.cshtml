@model System.Collections.IEnumerable
@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@(Html.X().ChartTheme()
        .ThemeName("White")
        .Axis(new SpriteAttributes { Stroke = "rgb(8,69,148)", StrokeWidth = 1 })
        .AxisLabel(new SpriteAttributes { Fill = "rgb(8,69,148)", Font = "12px Arial", FontFamily = "Arial" })
        .AxisTitle(new SpriteAttributes { Font = "bold 18px Arial" })
)
@(Html.X().Viewport()
          .Layout(LayoutType.Border)
            .StyleSpec("border: none;")
            .Items(
        Html.X().Panel()
                .MarginSpec("1 0 1 1")
                .Region(Region.West)
                .Title("XEM THỐNG KÊ DƯỚI DẠNG DỮ LIỆU")
                .TitleAlign(TitleAlign.Center)
                .Icon(Icon.ApplicationViewDetail)
                .Collapsible(true)
                .Split(true)
                .Header(false)
                .Border(true)
                .Layout(LayoutType.Fit)
                .Width(700)
                .Items (
          Html.X().TreePanel()
                    .Layout(LayoutType.Fit)
                    .Split(true)
                    .Region(Region.West)
                    .ID("gpDepartmentStatisticalDocument")
                    .TitleAlign(TitleAlign.Center)
                    .Border(false)
                    .AutoScroll(true)
                    .Listeners(ls =>
                    {
                        ls.Load.Handler = "expandDepartment(records);";
                    })
                    .RootVisible(false)
                    .ColumnLines(true)
                    .RowLines(true)
                    .TopBar(
            Html.X().Toolbar()
                    .ID("tbgpDepartmentStatisticalDocument")
                    .Items(
            Html.X().SearchByDate("refreshDepartment();onSelect();").FromDateID("dfFromDate").ToDateID("dfToDate"),
            Html.X().ToolbarFill(),
            Html.X().ButtonExportExcelFile().GridIDGetFile("gpDepartmentStatisticalDocument").isTree(true),
            Html.X().Button()
                    .Text("In báo cáo")
                    .Hidden(true)
                    .Handler("this.up('treepanel').print();")
                    .Icon(Icon.Printer),
            Html.X().ToolbarFill()
                    )
                    )
                    .Store(
                        Html.X().TreeStore().ID("stDepartmentStatisticalDocument")
                            .AutoLoad(false)
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetData"))
                            .Reader(Html.X().JsonReader().Root("data")).IDParam("id"))
                            .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                                    ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                                })
                            .Model(
                                Html.X().Model()
                                        .Fields(
                                            Html.X().ModelField().Name("id"),
                                            Html.X().ModelField().Name("text"),
                                            Html.X().ModelField().Name("ParentID"),
                                            Html.X().ModelField().Name("TotalDocument"),
                                            Html.X().ModelField().Name("TotalDocumentIssued"),
                                            Html.X().ModelField().Name("TotalDocumentObsolete"),
                                            Html.X().ModelField().Name("TotalDocumentIn"),
                                            Html.X().ModelField().Name("TotalDocumentInIssued"),
                                            Html.X().ModelField().Name("TotalDocumentInObsolete"),
                                            Html.X().ModelField().Name("TotalDocumentOut"),
                                            Html.X().ModelField().Name("TotalDocumentOutIssued"),
                                            Html.X().ModelField().Name("TotalDocumentOutObsolete"),
                                            Html.X().ModelField().Name("NumberDistribution"),
                                            Html.X().ModelField().Name("NumberOfDistribution"),
                                            Html.X().ModelField().Name("NumberOfThuhoi")
                                            )
                                    )
                            )
                            .ColumnModel(
                                Html.X().TreeColumn()
                                        .Text("Phòng ban")
                                        .Width(300)
                                        .DataIndex("text"),
                                    Html.X().Column()
                                        .DataIndex("TotalDocument")
                                        .Text("Tổng số")
                                        .Renderer("renderTotalDocument")
                                        .Width(70)
                                        .Align(Alignment.Right),
                                    Html.X().Column()
                                        .DataIndex("TotalDocumentIssued")
                                        .Text("Ban hành")
                                        .Renderer("renderDocumentIssued")
                                        .Width(70)
                                        .Align(Alignment.Right),
                                    Html.X().Column()
                                        .DataIndex("TotalDocumentObsolete")
                                        .Text("Lỗi thời")
                                        .Renderer("renderDocumentObsolete")
                                        .Width(70)
                                        .Align(Alignment.Right),
                                    Html.X().ComponentColumn()
                                        .Text("Tài liệu nội bộ")
                                        .Columns(
                                        Html.X().Column()
                                                .DataIndex("TotalDocumentIn")
                                                .Text("Tổng số")
                                                .Renderer("renderDocumentIn")
                                                .Width(70)
                                                .Align(Alignment.Right),
                                        Html.X().Column()
                                                .DataIndex("TotalDocumentInIssued")
                                                .Renderer("renderDocumentInIssued")
                                                .Text("Ban hành")
                                                .Width(80)
                                                .Align(Alignment.Right),
                                        Html.X().Column()
                                                .DataIndex("TotalDocumentInObsolete")
                                                .Text("Lỗi thời")
                                                .Renderer("renderDocumentInObsolete")
                                                .Width(70)
                                                .Align(Alignment.Right)                                          
                                                ),
                                    Html.X().ComponentColumn()
                                            .Text("Tài liệu bên ngoài")
                                            .Columns(
                                        Html.X().Column()
                                                .DataIndex("TotalDocumentOut")
                                                .Text("Tổng số")
                                                .Renderer("renderDocumentOut")
                                                .Width(70)
                                                .Align(Alignment.Right),
                                        Html.X().Column()
                                                .DataIndex("TotalDocumentOutIssued")
                                                .Renderer("renderDocumentOutIssued")
                                                .Text("Ban hành")
                                                .Width(80)
                                                .Align(Alignment.Right),
                                        Html.X().Column()
                                                .DataIndex("TotalDocumentOutObsolete")
                                                .Text("Lỗi thời")
                                                .Renderer("renderDocumentOutObsolete")
                                                .Width(70)
                                                .Align(Alignment.Right)
                                                ),
                                    Html.X().ComponentColumn()
                                            .Text("Phân phối tài liệu")
                                            .Columns(
                                            Html.X().Column()
                                                    .DataIndex("NumberDistribution")
                                                    .Text("Phân phối")
                                                    .Width(70)
                                                    .Align(Alignment.Right),
                                            Html.X().Column()
                                                    .DataIndex("NumberOfDistribution")
                                                    .Text("Được phân phối")
                                                    .Width(100)
                                                    .Align(Alignment.Right),
                                            Html.X().Column()
                                                    .DataIndex("NumberOfThuhoi")
                                                    .Text("Thu hồi")
                                                    .Width(70)
                                                    .Align(Alignment.Right)
                                                    )
                                            )
                                        .SelectionModel(
                                            Html.X().RowSelectionModel()
                                                    .Mode(SelectionMode.Single)
                                                    .Listeners(l =>
                                                    {
                                                        l.Select.Handler = "onSelect();";
                                                    })
                                                    )
                              ),
                        Html.X().Panel()
                            .Layout(LayoutType.Fit)
                            .MarginSpec("1 1 1 0")
                            .Region(Region.Center)
                            .AutoScroll(false)
                            .Header(false)
                            .Border(true)
                            .TopBar(
                        Html.X().Toolbar()
                            .Items(
                        Html.X().ComboBox()
                            .FieldLabel("Biểu đồ")
                            .Width(300)
                            .MarginSpec("0 0 0 5")
                            .LabelWidth(50)
                            .SelectedItems("0")
                            .ID("cbSelectChart")
                                .Items(
                                    new ListItem() { Value = "0", Text = "Biểu đồ cột(SL)" }
                                    )
                                .Listeners(ls => ls.Select.Handler = "onSelectCombobox(this);"),
                            Html.X().ToolbarFill(),
                            Html.X().ButtonTutorial()
                            )
                            )
                        .Items (
                        Html.X().Panel()
                            .Layout(LayoutType.Fit)
                            .ID("pChart0")
                            .Title("<b>Biểu đồ cột(SL)</b>")
                            .Border(false)
                            .Header(false)
                            .TopBar(Html.X().Toolbar()
                            .Items(
                        Html.X().Button()
                            .Text("Tải lại")
                            .Icon(Icon.ArrowRefresh)
                            .Handler("#{Chart0}.getStore().reload()"),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button()
                            .Text("Lưu biểu đồ")
                            .Icon(Icon.Disk)
                            .Handler("saveChart")
                                 )
                            )
                            .Items(
                        Html.X().Chart()
                            .ID("Chart0")
                             .Shadow(true)
                        .Theme("White")
                        .LegendConfig(Html.X().ChartLegend().Position(LegendPosition.Top)
                        .LabelFont("11px Tahoma")
                        .BoxStroke("#084594")
                            )
                        .Animate(true)
                        .Background(Html.X().DrawBackground()
                        .Gradient(Html.X().Gradient()
                        .GradientID("backgroundGradient")
                        .Angle(45)
                        .Stops(s =>
                        {
                            s.Add(Html.X().GradientStop()
                                .Offset(0)
                                .Color("#ffffff"));
                            s.Add(Html.X().GradientStop()
                                .Offset(100)
                                .Color("#eaf1f8"));
                        })
                        )
                        )
                        .Store(Html.X().Store()
                        .ID("stChart0")
                        .AutoLoad(true)
                        .Model(Html.X().Model()
                        .Fields(
                            Html.X().ModelField().Name("Name"),
                            Html.X().ModelField().Name("Data1"),
                            Html.X().ModelField().Name("Data2"),
                            Html.X().ModelField().Name("Data3")      
                        )
                        )
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("id", "App.gpDepartmentStatisticalDocument.getSelectionModel().getLastSelected().get('id')", ParameterMode.Raw));
                            ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                        })
                        .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("GetDataColumn"))
                        .Reader(Html.X().JsonReader().Root("data"))
                      )
                    )
                    .Axes(
                            Html.X().NumericAxis()
                             .Fields(new string[] { "Data1", "Data2", "Data3" })     
                            .Position(Position.Bottom)
                            .Grid(true)
                            .Title("Biểu đồ thống kê tài liệu")
                            .Minimum(0)
                                .Label(Html.X().AxisLabel()
                                    .Renderer(r => r.Handler = "return Ext.util.Format.number(value, '0,0');")
                            ),
                            Html.X().CategoryAxis()
                            .Position(Position.Left)
                            .Fields("Name")
                            )
                            .Series(
                            Html.X().BarSeries()
                                .Axis(Position.Bottom)
                                .ShowInLegend(true)
                                .Highlight(true)
                                .XField("Name")
                                .YField(new string[] { "Data1", "Data2", "Data3" })
                                .Titles(new string[] { "Tổng số tài liệu", "Tài liệu ban hành", "Tài liệu lỗi thời" })     
                                .Tips(Html.X().ChartTip()
                                .TrackMouse(true)
                                .Width(210)
                                .Height(58)
                                    .Renderer(r => r.Handler = "this.setTitle('Tổng tài liệu: ' + storeItem.get('Data1') + '<br/> Tài liệu ban hành: '+storeItem.get('Data2')+'<br/>Tài liệu lỗi thời: '+storeItem.get('Data3'));")
                                )
                                .Label(Html.X().SeriesLabel()
                                .Display(SeriesLabelDisplay.InsideEnd)
                                .Field(new string[] { "Data1", "Data2", "Data3" })
                                .Orientation(Orientation.Horizontal)
                                .Color("#333")
                                .TextAnchor("middle")
                             )
                            )
                           )
                         )
                      )
)
<script type="text/javascript">
    var onSelect = function () {
        var charId = "Chart" + App.cbSelectChart.getValue();
        Ext.getCmp(charId).getStore().reload();
    };
    var onSelectCombobox = function (obj) {
        var records = obj.store.getAllRange();
        for (var i = 0; i < records.length; i++) {
            var pcharId = "pChart" + records[i].data.field1;
            Ext.getCmp(pcharId).hide();
        };
        Ext.getCmp("pChart" + obj.value).show();
        Ext.getCmp("Chart" + obj.value).getStore().reload();
    };
    var saveChart = function (btn) {
        Ext.MessageBox.confirm('Lưu biểu đồ', 'Bạn có muốn lưu biểu đồ dưới dạng ảnh không?', function (choice) {
            if (choice == 'yes') {
                btn.up('panel').down('chart').save({
                    type: 'image/png'
                });
            }
        });
    };
    var getDepartmentID = function () {
        var records = App.gpDepartmentStatisticalDocument.selModel.getSelection();
        if (records.length > 0) {
            return records[0].get('id');
        } else {
            return 0;
        }
    };
    var showDocumentStatiscal = function (storeUrl) {
        var records = App.gpDepartmentStatisticalDocument.selModel.getSelection();
        var departmentID = 0;
        if (records.length > 0) {
            departmentID = records[0].get('id');
        }
        var url = '@(Url.Action("DocumentViewStatistical", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        var params = {
            urlStore: storeUrl,
            Name: 'departmentId',
            Value: departmentID,
            Mode: '@(ParameterMode.Value)',
            fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
            toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
        };
        onDirectMethod(url, params);
    };
    var renderTotalDocument = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocument", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderDocumentIssued = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentIssued", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderDocumentObsolete = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentObsolete", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderDocumentIn = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentIn", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderDocumentInIssued = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentInIssued", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderDocumentInObsolete = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentInObsolete", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderDocumentOut = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentOut", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderDocumentOutIssued = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentOutIssued", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };

    var renderDocumentOutObsolete = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadTotalDocumentOutObsolete", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderNumberDistribution = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadNumberDistribution", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderNumberOfDistribution = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadNumberOfDistribution", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var renderNumberOfThuhoi = function (value) {
        var urlStoreDocument = '@(Url.Action("LoadNumberOfThuhoi", "DepartmentStatisticalDocument", new { Area = "Document" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDocumentStatiscal(\'" + urlStoreDocument.toString() + "\')\">" + value + "</a>";
    };
    var recordDepartments = null;
    var expandDepartment = function (records) {
        if (records.length > 0) {
            for (var i = 0; i < records.length; i++) {
                var node = records[i];
                if (recordDepartments != null && checkExpandDepartment(node)) {
                    node.expand();
                }
                else if (node.getDepth() < 2 && !node.data.leaf && !node.data.expanded) {
                    node.expand();
                }
            }
        }
        if (App.gpDepartmentStatisticalDocument.selModel.getCount() <= 0) {
            setDepartmentSelection(0);
        }
    };
    var checkExpandDepartment = function (record) {
        var check = false;
        recordDepartments.forEach(function (obj) {
            if (!check && obj.id == record.data.id) {
                check = obj.expanded;
                if (obj.selected) {
                    setDepartmentSelection(record);
                }
            }
        })
        return check;
    };
    var getDepartmentRecords = function () {
        var records = App.gpDepartmentStatisticalDocument.getView().store.getRange();
        var node = getDepartmentSelection();
        var data = [];
        records.forEach(function (obj) {
            var selected = obj.data.id == node.data.id;
            var item = {
                id: obj.data.id,
                expanded: obj.data.expanded,
                selected: selected
            };
            data.push(item);
        });
        return data;
    };
    var setDepartmentSelection = function (record) {
        if (record != null) {
            App.gpDepartmentStatisticalDocument.selModel.select(record);
        }
    };
    var getDepartmentSelection = function () {
        return App.gpDepartmentStatisticalDocument.getSelectionModel().getLastSelected();
    };

    var reloadDepartment = function () {
        recordDepartments = getDepartmentRecords();
        var node = getDepartmentSelection();
        App.gpDepartmentStatisticalDocument.store.reload({ node: node.parentNode });
    };
    var reloadDepartmentNode = function () {
        recordDepartments = getDepartmentRecords();
        var node = getDepartmentSelection();
        App.gpDepartmentStatisticalDocument.store.reload({ node: node });
        node.data.leaf = false;
        node.data.expanded = true;
        node.expand();
    };
    var refreshDepartment = function () {
        recordDepartments = getDepartmentRecords();
        App.gpDepartmentStatisticalDocument.selModel.deselectAll()
        App.gpDepartmentStatisticalDocument.getRootNode().reload();
    };
</script>