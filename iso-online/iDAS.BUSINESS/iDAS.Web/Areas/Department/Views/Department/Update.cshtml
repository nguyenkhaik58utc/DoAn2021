@using Ext.Net
@using Ext.Net.MVC
@using iDAS.Web.ExtExtend
@using iDAS.Utilities
@model iDAS.Items.HumanDepartmentItem
@(Html.X().Window()
    .ID("UpdateDepartmentWindow")
    .Title("Sửa thông tin chi tiết của tổ chức")
    .Icon(Icon.Pencil)
    .Width(600)
    .Height(350)
    .Maximizable(true)
    .Constrain(true)
    .BodyPadding(0)
    .Border(false)
    .Constrain(true)
    .Modal(true)
    .Layout(LayoutType.Fit)
    .Items(
        Html.X().FormPanel()
            .Url(Url.Action("Update"))
            .Layout(LayoutType.Fit)
            .Border(false)
            .StyleSpec("border: none;")
            .ID("UpdateDepartmentForm")
            .Items(
                Html.X().TabPanel().ActiveTabIndex(0).Border(true)
                    .Items(
                        Html.X().FormPanel()
                            .Layout(LayoutType.VBox)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch }).Title("Thông tin")
                            .Frame(true)
                            .BodyPadding(5)
                            .StyleSpec("border: none;")
                            .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
                            .Items(
                                Html.X().HiddenFor(m => m.ID),
                                Html.X().HiddenFor(m => m.ParentID),
                                Html.X().TextFieldFor(m => m.Name)
                                    .FieldLabel("Tên phòng ban"+Html.Required())
                                    .BlankText("Bạn phải nhập tên phòng ban hoặc đơn vị!")
                                    .TabIndex(1)
                                    .AllowBlank(false),
                                Html.X().TextFieldFor(m => m.Code)
                                    .FieldLabel("Tên viết tắt")
                                    .TabIndex(2)
                                    .ColumnWidth(0.5),
                                Html.X().TextFieldFor(m => m.NameE)
                                    .FieldLabel("Tên tiếng anh")
                                    .TabIndex(3)
                                    .ColumnWidth(0.5),
                                Html.X().TextFieldFor(m => m.Address)
                                    .FieldLabel("Địa chỉ")
                                    .EmptyText("Địa chỉ của phòng ban hoặc đơn vị")
                                    .TabIndex(4),
                                Html.X().Container()
                                    .Layout(LayoutType.Column)
                                    .MarginSpec("-3 0 0 0")
                                    .Items(
                                        Html.X().Container()
                                            .ColumnWidth(0.5)
                                            .Layout(LayoutType.Form)
                                            .Items(
                                                Html.X().TextFieldFor(m => m.Email)
                                                    .FieldLabel("Email")
                                                    .EmptyText("example@gmail.com")
                                                    .StandardVtype(ValidationType.Email)
                                                    .RegexText("Email không đúng định dạng!")
                                                    .ColumnWidth(0.5)
                                                    .TabIndex(5),
                                                Html.X().TextFieldFor(m => m.Fax)
                                                    .FieldLabel("Fax")
                                                    .Regex("/\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/")
                                                    .RegexText("Nhập sai định dạng số fax ((084)987789456 / 0987789456)")
                                                    .ColumnWidth(0.5)
                                                    .TabIndex(6),
                                                Html.X().TextFieldFor(m => m.Website)
                                                    .ColumnWidth(0.5)
                                                    .FieldLabel("Website")
                                                    .TabIndex(7)
                                            ),
                                        Html.X().Container()
                                            .ColumnWidth(0.5)
                                            .Layout(LayoutType.Form)
                                            .MarginSpec("0 0 0 5")
                                            .Items(
                                                Html.X().TextFieldFor(m => m.Phone)
                                                    .FieldLabel("Điện thoại")
                                                    .Regex("/\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/")
                                                    .RegexText("Nhập sai định dạng số điện thoại ((084)987789456 / 0987789456)")
                                                    .ColumnWidth(0.5)
                                                    .TabIndex(8),
                                                Html.X().TextFieldFor(m => m.Tax)
                                                    .FieldLabel("Mã số thuế")
                                                    .Regex("/\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/")
                                                    .RegexText("Nhập sai định dạng mã số thuế ((084)987789456 / 0987789456)")
                                                    .ColumnWidth(0.5)
                                                    .TabIndex(9),
                                                Html.X().DateFieldFor(m => m.EstablishedDate)
                                                    .FieldLabel("Ngày thành lập")
                                                    .ColumnWidth(0.5)
                                                    .TabIndex(10)
                                                    .Format("dd/MM/yyyy")
                                            ),
                                        Html.X().Checkbox().ID("IsDeactive").FieldLabel("Tình trạng").BoxLabel("Dừng hoạt động").Disabled(!Model.IsParentActive).ColumnWidth(1).Listeners(ls => ls.Change.Handler = "statusDepartmentChange(this);")
                                            .Listeners(ls => ls.BoxReady.Handler = "deactiveDepartmentDefault()"),
                                        Html.X().CheckboxFor(m => m.IsActive).ID("IsActive").BoxLabel("Hoạt động").Disabled(!Model.IsParentActive && !Model.IsActive).FieldLabel(" ").LabelSeparator("").ColumnWidth(0.5).Listeners(ls => ls.Change.Handler = "statusDepartmentChange(this);"),
                                        Html.X().CheckboxFor(m => m.IsCancel).ID("IsCancel").BoxLabel("Giải thể").Disabled(!Model.IsParentActive && !Model.IsCancel).HideLabel(true).ColumnWidth(0.25).Listeners(ls => ls.Change.Handler = "statusDepartmentChange(this);"),
                                        Html.X().CheckboxFor(m => m.IsMerge).ID("IsMerge").BoxLabel("Sát nhập").Disabled(!Model.IsParentActive && !Model.IsMerge).HideLabel(true).ColumnWidth(0.25).Listeners(ls => ls.Change.Handler = "statusDepartmentChange(this);")

                                    )
                                ),
                            Html.X().Panel()
                                .Layout(LayoutType.VBox)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                .Title("Chức năng")
                                .Frame(true)
                                .StyleSpec("border: none;")
                                .Items(Html.X().TextAreaFor(m => m.Resposibility).EmptyText("Thông tin chức năng của phòng ban hoặc đơn vị").Flex(1).HideLabel(true)),
                            Html.X().Panel()
                                .Layout(LayoutType.VBox)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                .Title("Nhiệm vụ")
                                .Frame(true)
                                .StyleSpec("border: none;")
                                .Items(Html.X().TextAreaFor(m => m.Authorize).EmptyText("Thông tin nhiệm vụ của phòng ban hoặc đơn vị").HideLabel(true).Flex(1)),
                            Html.X().Panel()
                                .Layout(LayoutType.VBox)
                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                                .Title("Lịch sử phát triển")
                                .Frame(true)
                                .StyleSpec("border: none;")
                                .Items(Html.X().TextAreaFor(m => m.History).EmptyText("Thông tin lịch sử phát triển của phòng ban hoặc đơn vị").HideLabel(true).Flex(1)),
                            Html.X().Panel()
                                .Layout(LayoutType.Fit)
                                .Title("Chức danh")
                                .Frame(true)
                                .StyleSpec("border: none;")
                                .Items(
                                    Html.X().Hidden().ID("ViewDeleteRole").Value(false),
                                    Html.X().Hidden().ID("SortRole").Value(true),
                                    Html.X().GridPanel()
                                        .ID("DepartTitlePanel")
                                        .Header(false)
                                        .ColumnLines(true)
                                        .Border(false)
                                        .ForceFit(true)
                                        .Collapsible(true)
                                        .Split(true)
                                        .Icon(Icon.TextListBullets)
                                        .TopBarItem(
                                            Html.X().ButtonCreate().Handler("showCreateTitle").ID("btnCreateRole"),
                                            Html.X().ToolbarSeparator(),
                                            Html.X().ButtonDelete().Handler("showDeleteTitle").ID("btnDeleteTitle").Disabled(true),
                                            Html.X().ToolbarFill(),
                                            Html.X().ButtonList().Handler("showListRole").ID("btnListRole").Hidden(true),
                                            Html.X().ToolbarFill()
                                        )
                                        .Store(Html.X().Store()
                                            .ID("stDepartmentTitle")
                                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadData", "DepartmentTitle")).Reader(Html.X().JsonReader().Root("data")))
                                            .Parameters(ps =>
                                            {
                                                ps.Add(new StoreParameter("departmentID", Model.ID.ToString(), ParameterMode.Value));
                                                ps.Add(new StoreParameter("viewDelete", "App.ViewDeleteRole.value", ParameterMode.Raw));
                                            })
                                            .Model(
                                                Html.X().Model()
                                                    .Fields(
                                                        Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                                        Html.X().ModelField().Name("TitleName").Type(ModelFieldType.String),
                                                        Html.X().ModelField().Name("ReportToName").Type(ModelFieldType.String)
                                                    )
                                            )
                                            //.Listeners(ls => ls.Load.Handler = "setTitleSelection()")
                                        )
                                        .SortableColumns(false)
                                        .ColumnModel(
                                            Html.X().RowNumbererColumn().Text("STT").Width(33).Align(Alignment.Center),
                                            Html.X().Column().Text("ID").DataIndex("ID").Hidden(true).Width(40),
                                            Html.X().Column().DataIndex("TitleName").Text("Tên chức danh").Flex(1).MenuDisabled(true),
                                            Html.X().Column().DataIndex("ReportToName").Text("Báo cáo tới").Flex(1).MenuDisabled(true)
                                        )
                                        .Listeners(ls => ls.SelectionChange.Handler = "selectionChangeTitle();")
                                )
                        )
                )
        )
        .Buttons(
            Html.X().ButtonSave().Handler("updateDepartmentSubmit()"),
            Html.X().ButtonExit()
        )
)
<script>
    var updateDepartmentSubmit = function () {
        App.UpdateDepartmentForm.submit({
            waitMsg: "Đang thực hiện ....",
            success: function (result) {
                if (result) {
                    reloadDepartment();
                    App.UpdateDepartmentWindow.close();
                }
            }
        });
    };
    var statusDepartmentChange = function (obj) {
        if (obj.value == true) {
            switch (obj) {
                case App.IsActive:
                    App.IsDeactive.setValue(false);
                    App.IsMerge.setValue(false);
                    App.IsCancel.setValue(false);
                    break;
                case App.IsMerge:
                    App.IsDeactive.setValue(false);
                    App.IsActive.setValue(false);
                    App.IsCancel.setValue(false);
                    break;
                case App.IsCancel:
                    App.IsDeactive.setValue(false);
                    App.IsActive.setValue(false);
                    App.IsMerge.setValue(false);
                    break;
                case App.IsDeactive:
                    App.IsActive.setValue(false);
                    App.IsMerge.setValue(false);
                    App.IsCancel.setValue(false);
                    break;
                default:
            }
        }
        else {
            if (obj.hasFocus && obj.value == false) {
                obj.setValue(true);
            }
        }
    };
    var deactiveDepartmentDefault = function () {
        var isActive = App.IsActive.value;
        var isCancel = App.IsCancel.value;
        var isMerge = App.IsMerge.value;
        App.IsDeactive.setValue(!isActive && !isCancel && !isMerge);
    };


    var urlCreateTitle = '@(Url.Action("Create", "DepartmentTitle", new { area = "Department" }))';
    var urlDeleteTitle = '@(Url.Action("Delete", "DepartmentTitle", new { Area = "Department" }))';

    var sortTitleIndex = null;
    var getTitleSelection = function () {
        var records = App.DepartTitlePanel.selModel.getSelection();
        if (records != null || records.length > 0)
            return records[0];
        else
            return null;
    };

    var setTitleSelection = function () {
        if (sortTitleIndex != null) {
            App.DepartTitlePanel.selModel.select(sortTitleIndex);
        }
    };
    var reloadRole = function () {
        App.DepartTitlePanel.store.reload();
    };
    
    var showCreateTitle = function () {
        var departmentID = '@Model.ID';
        var url = urlCreateTitle;
        var params = { departmentID: departmentID };
        onDirectMethod(url, params, 'get');
    };

    var showDeleteTitle = function () {
        var record = getTitleSelection();
        var titleID = record == null ? 0 : record.data.ID;
        var url = urlDeleteTitle;
        var deleteSuccess = function () {
            {
                console.log('test111');
                Ext.MessageBox.show({
                    title: 'Xác nhận', msg: 'Bạn có muốn xóa bỏ gán chức danh này hay không?',
                    buttons: { yes: 'Đồng ý', no: 'Không' },
                    iconCls: '#Information',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var record = getTitleSelection();
                            var titleID = record == null ? 0 : record.data.id;
                            var params = { id: titleID };
                            onDirectMethod(url, params, 'post', reloadDepartment);
                        }
                    }
                });
            }
        };
        var params = { id: titleID };
        onDirectMethod(url, params, 'post', App.DepartTitlePanel.store.reload());
    };

    var showListRole = function () {
        App.btnListRole.hide();
        App.ViewDeleteRole.setValue(false);
        selectionChangeTitle();
        reloadRole();
    };
    
   
    var selectionChangeTitle = function () {
        var record = getTitleSelection();
        var isDisabled = record == null;
        App.btnDeleteTitle.setDisabled(isDisabled);
        if (record != null) {
            App.btnDeleteTitle.setDisabled(record.data.IsDelete);
        }
    };
</script>