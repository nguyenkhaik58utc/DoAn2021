@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend;
@model iDAS.Web.Areas.Department.Models.TitleDTO
@(Html.X().Window()
          .ID("winNewTitle")
          .Title("Thêm mới chức danh")
          .Icon(Icon.Add)
          .Height(240)
          .Width(500)
          .BodyPadding(6)
          .Constrain(true)
          .Modal(true)
          .Layout(LayoutType.Fit)
          .Items(
        Html.X().FormPanel()
                .ID("frmTitle")
                .Layout(LayoutType.Form)
                .Frame(true)
                .StyleSpec("border: none;")
                .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
        .Items(
            Html.X().TextFieldFor(m => m.Code)
                .FieldLabel("Mã chức danh" + Html.Required())
                .ID("txtCode")
                .AllowBlank(false)
                .LabelWidth(120)
                .BlankText("Mã chức danh không được để rỗng!")
                .AllowOnlyWhitespace(false),
            Html.X().TextFieldFor(m => m.Name)
                .FieldLabel("Tên chức danh" + Html.Required())
                .ID("txtName")
                .AllowBlank(false)
                .LabelWidth(120)
                .BlankText("Tên chức danh không được để rỗng!")
                .AllowOnlyWhitespace(false),
            Html.X().ComboBoxFor(m => m.IsActive)
                .TabIndex(4)
                .LabelWidth(120)
                .Editable(false)
                .Listeners(ls => ls.Render.Handler = "App.cbIsUse.select(App.cbIsUse.store.getAt(0))")
                .FieldLabel("Tình trạng" + Html.Required())
                .ID("cbIsUse")
                .Items(
                    new ListItem("Sử dụng", true),
                    new ListItem("Không sử dụng", false)
                 ),
            Html.X().ComboBoxFor(m => m.PositionId)
                .LabelWidth(120)
                .FieldLabel("Chức vụ" + Html.Required())
                .QueryMode(DataLoadMode.Local).Editable(false)
                .EmptyText("Chức vụ ....")
                .ForceSelection(true)
                .DisplayField("PositionName")
                .ValueField("ID")
                .Store(Html.X().Store()
                            .AutoLoad(true)
                            .Model(Html.X().Model()
                                    .IDProperty("ID")
                                    .Fields(new ModelField("ID", ModelFieldType.Int),
                                            new ModelField("PositionName", ModelFieldType.String)))
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetPosition"))
                                            .Reader(Html.X().JsonReader().Root("data")))
                                            )

             )
            )
            .Buttons(
            Html.X().ButtonSave()
            .ID("btnSave")
            .DirectEvents(de =>
            {
                de.Click.ExtraParams.Add(new { val = false });
                de.Click.Before = @"if (!App.frmTitle.getForm().isValid()) { return false; } ";
                de.Click.Action = "Insert";
                de.Click.FormID = "frmTitle";
                de.Click.Success = "App.stTitleNew.reload()";
            }),
            Html.X().ButtonSaveAndExit()
            .ID("btnSaves")
            .DirectEvents(de =>
            {
                de.Click.ExtraParams.Add(new { val = true });
                de.Click.Before = @"if (!App.frmTitle.getForm().isValid()) { return false; } ";
                de.Click.Action = "Insert";
                de.Click.FormID = "frmTitle";
                de.Click.Success = "this.up('window').close();";
            }),
            Html.X().ButtonExit()
            )
)
<script type="text/javascript">
    
</script>