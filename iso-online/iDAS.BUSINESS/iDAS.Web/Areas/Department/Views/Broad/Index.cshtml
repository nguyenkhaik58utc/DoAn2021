@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Web.ExtExtend
@model System.Collections.IEnumerable
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@(Html.X().Viewport().Layout(LayoutType.Border).Padding(1)
    .Items(
        Html.X().Hidden().ID("hdfLsCateId"),
        Html.X().TreePanel()
                .Header(false)
                .Title("Bộ tiêu chí")
                .Region(Region.West)
                .ID("trBroadCategory")
                .Width(350)
                .TitleAlign(TitleAlign.Center)
                .Collapsible(true)
                .Split(true)
                .Border(true)
                .RowLines(true)
                .ColumnLines(true)
                .ForceFit(true)
                .RootVisible(false)
                .SingleExpand(false)
                .TopBar(
                    Html.X().Toolbar()
                            .Items(
                                Html.X().Button().ID("btnInsertNews").Icon(Icon.Add).ToolTip("Thêm mới nhóm tin nội bộ")
                                        .Handler("ShowAddCategory();"),
                                Html.X().ToolbarSeparator(),
                                Html.X().Button().ID("btnEdit").Icon(Icon.Pencil).ToolTip("Sửa nhóm tin nội bộ").Disabled(true)
                                        .Handler("ShowUpdateCategory();"),
                                Html.X().ToolbarSeparator(),
                                Html.X().Button().ID("btnDelete").Icon(Icon.Delete).ToolTip("Xóa nhóm tin nội bộ")
                                        .Handler("deleteRecord();")
                                        .Disabled(true),
                               Html.X().ToolbarSeparator(),
                                    Html.X().Button().ID("btnDetail").Disabled(true).ToolTip("Xem chi tiết").Icon(Icon.Zoom)
                                            .Handler("ShowDetailCategory();"),
                                Html.X().ToolbarSeparator(),
                                Html.X().ButtonRefresh().Handler("App.trBroadCategory.store.reload();")
                            )
                         )
                .Store(Html.X().TreeStore()
                        .ID("stBroadCategory")
                        .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("LoadCategory")))
                        .Model(
                        Html.X().Model()
                                .Fields(
                                    Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                    Html.X().ModelField().Name("ParentID").Type(ModelFieldType.Int),
                                    Html.X().ModelField().Name("Name").Type(ModelFieldType.String)
                                )
                              )
                          )
                    .HideHeaders(true)
                    .ColumnModel(
                        Html.X().TreeColumn()
                            .Align(Alignment.Left)
                            .DataIndex("Name")
                            .Flex(1)
                )
            .Listeners(ls =>
            {
                ls.SelectionChange.Handler = "onSelectCategoryBroad();";
                ls.Load.Handler = "expandBroadCategory(records);";
            })
                ,
            Html.X().GridPanel()
            .Region(Region.Center)
            .ID("grBroad")
            .Border(true)
            .RowLines(true)
            .ColumnLines(true)
            .ForceFit(true)
            .TopBar(
                        Html.X().Toolbar()
                                .Items(
                                    Html.X().ButtonCreate().ID("btnAddBroad").Disabled(true)
                                            .Handler("ShowAdd(true);"),
                                    Html.X().ToolbarSeparator(),
                                    Html.X().ButtonUpdate()
                                            .ID("btnEditBroad")
                                            .Handler("ShowUpdate();"),
                                    Html.X().ToolbarSeparator(),
                                    Html.X().ButtonDelete()
                                            .ID("btnDeleteBroad")
                                            .Handler("deleteBroad();"),
                                    Html.X().ToolbarSeparator(),
                                    Html.X().ButtonView()
                                            .ID("btnDetailBroad")
                                                .Handler("ShowDetail();"),
                                    Html.X().ToolbarFill(),
                                    Html.X().ButtonTutorial()
                                      )
                                  )
                .Store(Html.X().Store().ID("StoreTreeBroad")
                        .AutoLoad(false)
                        .RemotePaging(true)
                        .PageSize(20)
                        .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("LoadData"))
                                       .Reader(Html.X().JsonReader()
                                       .Root("data")
                                       )
                        )
                        .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("cateId", "App.hdfLsCateId.value", ParameterMode.Raw));
                            })
                        .Model(
                            Html.X().Model().IDProperty("ID")
                            .Fields(
                                Html.X().ModelField().Name("ID"),
                                Html.X().ModelField().Name("Title"),
                                Html.X().ModelField().Name("Description").Type(ModelFieldType.String)
                             )
                         )
            )
            .ColumnModel(
                Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                Html.X().Column()
                        .Text("Tiêu đề")
                        .Align(Alignment.Left)
                        .DataIndex("Title")
                        .Renderer("TitleRender")
                        .Flex(1),
                Html.X().Column()
                        .Text("Mô tả")
                        .DataIndex("Description")
                        .Width(200).Wrap(true)
                    )
                .Listeners(lS => lS.SelectionChange.Handler = "checkStatusBroad()")
                .Plugins(
                    Html.X().CellEditing()
                        .ClicksToEdit(1)
                        .Listeners(ls =>
                        {
                        })
                    )
                .BottomBar(Html.X().CustomPagingToolbar())
         )
)
<script type="text/javascript">
    var TitleRender = function (value) {
        var result = "<a onclick='ShowContent()'>" + value + "</a>";
        return result;
    };
    var onSelectCategoryBroad = function () {
        var records = App.trBroadCategory.selModel.getSelection();
        if (records.length == 1) {
            var nodeSelect = App.stBroadCategory.getNodeById(records[0].get('ID'));
            if (nodeSelect.isLeaf() == false) {
                nodeSelect.reload();
            };
            App.hdfLsCateId.setValue(records[0].get('ID'));
            App.grBroad.store.reload();
            SetEnabled(App.btnEdit, App.btnDelete, App.btnDetail, App.btnAddBroad);
        }
        else {
            SetDisabled(App.btnEdit, App.btnDelete, App.btnDetail, App.btnAddBroad);
        };
    };
    var expandBroadCategory = function (records) {
        if (records.length > 0) {
            for (var i = 0; i < records.length; i++) {
                if (records[i].getDepth() < 4 && !records[i].data.leaf && !records[i].data.expanded) {
                    records[i].expand();
                }
            }
        }
    };
    var ShowAddCategory = function () {
        var url = '@(Url.Action("InsertCategory"))';
        var records = App.trBroadCategory.selModel.getSelection();
        if (records.length == 1) {
            var parentId = records[0].get('ID');
            var params = {
                parentId: parentId
            };
            onDirectMethod(url, params, 'get');
        }
        else {
            var params = {
                parentId: 0
            };
            onDirectMethod(url, params, 'get');
        };
    };
    function ShowUpdateCategory() {
        var records = App.trBroadCategory.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("UpdateCategory"))';
            var params = {
                id: records[0].get('ID')
            };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        };
    };
    var deleteRecord = function () {
        var records = App.trBroadCategory.selModel.getSelection();
        if (records.length > 0) {
            Ext.MessageBox.confirm('Thông báo', 'Bạn có muốn xóa bản ghi này ?', function (btn) {
                if (btn == 'yes') {
                    var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
                    mask.show();
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("DeleteCategory"))',
                        params: {
                            id: records[0].get('ID'),
                        },
                        success: function (result) {
                            mask.hide();
                        },
                    });
                };
            })
        }
        else {
            MessageBox();
        };
    };
    var ShowDetailCategory = function () {
        var records = App.trBroadCategory.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("DetailCategory"))';
            var params = {
                id: records[0].get('ID')
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        };
    };
    var checkStatusBroad = function () {
        var records = App.grBroad.selModel.getSelection();
        if (records.length == 1) {
            SetEnabled(App.btnEditBroad, App.btnDeleteBroad, App.btnDetailBroad);
        }
        else {
            SetDisabled(App.btnEditBroad, App.btnDeleteBroad, App.btnDetailBroad);
        };
    };
    var ShowAdd = function () {
        var records = App.trBroadCategory.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("Insert"))';
            var params = {
                cateId: records[0].get('ID'),
                cateName: records[0].get('Name')
            };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        };
    };
    function ShowUpdate() {
        var records = App.grBroad.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("Update"))';
            var params = {
                id: records[0].get('ID')
            };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        };
    };
    var deleteUrl = '@(Url.Action("Delete"))';
    var deleteBroad = function () {
        var records = App.grBroad.selModel.getSelection();
        if (records.length > 0) {
            onDelete(records[0].get('ID'));
        }
        else {
            MessageBox();
        };
    };
    var ShowDetail = function () {
        var records = App.grBroad.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("Detail"))';
            var params = {
                id: records[0].get('ID')
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        };
    };
    var ShowContent = function () {
        var records = App.grBroad.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("Content"))';
            var params = {
                id: records[0].get('ID')
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        };
    };
</script>
