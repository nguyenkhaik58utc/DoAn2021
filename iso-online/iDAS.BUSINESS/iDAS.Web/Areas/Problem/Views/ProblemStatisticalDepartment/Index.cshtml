@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Web.ExtExtend;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var X = Html.X();
}
@( Html.X().Viewport().ID("viewport1")
    .Layout(LayoutType.Border)
    .Items(
        Html.X().Panel().Region(Region.North)
            .TopBar(
                Html.X().Toolbar()
                    .ID("tbgpDepartmentStatisticalProfile")
                    .Items(
                        Html.X().SearchByDate("getDataTest1();").FromDateID("dfFromDate").ToDateID("dfToDate"),
                        Html.X().ButtonExportExcelFile().GridIDGetFile("grdStatistic").isTree(false).Icon(Icon.PageExcel).Text("Phân loại").ID("btnExStatistic").Hidden(true),
                        Html.X().ButtonExportExcelFile().GridIDGetFile("grdStatisticCri").isTree(false).Icon(Icon.PageExcel).Text("Mức độ nghiêm trọng").ID("btnExStatisticCri").Hidden(true)
                          )
                   )

       //Html.X().GridPanel()
       //.Region(Region.Center)
       //.Margin(1)
       //.Header(false)
       //.ID("grdStatistic")
       //.ColumnLines(true)
       //.ForceFit(true)

       )
)
<script type="text/javascript">

    var exStatistic = function () {
        App.btnExStatistic.fireEvent(App.btnExStatistic.clickEvent);
    }

    var exStatisticCri = function () {
        App.btnExStatisticCri.fireEvent(App.btnExStatisticCri.clickEvent);
    }

    var getDataTest1 = function(){
        var url = '@(Url.Action("GetGridPanel", "ProblemStatisticalDepartment", new { Area = "Problem" }, null))';
            var params = {
                containerId: "viewport1",
                fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
                toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
            };
            onDirectMethod(url, params);
    }

    var optionTime = function () {
        var date = new Date();
        var option = App.Time.getValue();
        var quarter = Math.floor((date.getMonth() + 3) / 3);
        switch (option) {
            case 0:
                App.dfFromDate.setValue(date);
                App.dfToDate.setValue(date);
                break;
            case 1:
                var startDay = 1;
                var d = date.getDay();
                var weekStart = new Date(date.valueOf() - (d <= 0 ? 7 - startDay : d - startDay) * 86400000);
                var weekEnd = new Date(weekStart.valueOf() + 6 * 86400000);
                App.dfFromDate.setValue(weekStart);
                App.dfToDate.setValue(weekEnd);
                break;
            case 2:
                App.dfFromDate.setValue(new Date(date.getFullYear(), date.getMonth(), 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), date.getMonth() + 1, 0));
                break;
            case 3:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 3 * quarter - 3, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 3 * quarter + 0, 1));
                break;
            case 4:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 0, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 11, 31));
                break;
            case 5:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 0, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 0 + 1, 0));
                break;
            case 6:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 1, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 1 + 1, 0));
                break;
            case 7:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 2, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 2 + 1, 0));
                break;
            case 8:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 3, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 3 + 1, 0));
                break;
            case 9:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 4, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 4 + 1, 0));
                break;
            case 10:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 5, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 5 + 1, 0));
                break;
            case 11:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 6, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 6 + 1, 0));
                break;
            case 12:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 7, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 7 + 1, 0));
                break;
            case 13:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 8, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 8 + 1, 0));
                break;
            case 14:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 9, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 9 + 1, 0));
                break;
            case 15:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 10, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 10 + 1, 0));
                break;
            case 16:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 11, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 11 + 1, 0));
                break;
            case 17:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 3 * 1 - 3, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 3 * 1 + 0, 1));
                break;
            case 18:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 3 * 2 - 3, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 3 * 2 + 0, 1));
                break;
            case 19:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 3 * 3 - 3, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 3 * 3 + 0, 1));
                break;
            case 20:
                App.dfFromDate.setValue(new Date(date.getFullYear(), 3 * 4 - 3, 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), 3 * 4 + 0, 1));
                break;
            default:
                App.dfFromDate.setValue(new Date(date.getFullYear(), date.getMonth(), 1));
                App.dfToDate.setValue(new Date(date.getFullYear(), date.getMonth(), 1));
        }
        App.grSuppAuditPlan.getStore().load();
    };

    var showDetailStatiscal = function (departmentID) {
        var records = App.grdStatistic.selModel.getSelection();
        var typeID = 0;
        if (records.length > 0) {
            typeID = records[0].get('TypeID');
        }
        var url = '@(Url.Action("StatisticTypeDetail", "ProblemStatisticalDepartment", new { Area = "Problem" }))';
        var params = {
            fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
            toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
            type: typeID,
            departmentID: departmentID
        };

        onDirectMethod(url, params);
    };

    var renderDetail = function (value, metadata, record, rowIndex, colIndex, store, obj) {
        if (value != null) {
            var colIndex1 = colIndex + 1;
            var departmentID = App.grdStatistic.columns[colIndex1].tag;
            return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDetailStatiscal(" + departmentID + ")\">" + value + "</a>";
        }
    };

    var showDetailStatiscalCri = function (departmentID) {
        var records = App.grdStatisticCri.selModel.getSelection();
        var criticalLevelID = 0;
        if (records.length > 0) {
            criticalLevelID = records[0].get('CriticalLevelID');
        }
        var url = '@(Url.Action("StatisticTypeDetail", "ProblemStatisticalDepartment", new { Area = "Problem" }))';
        var params = {
            fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
            toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
            criticalLevelID: criticalLevelID,
            departmentID: departmentID
        };

        onDirectMethod(url, params);
    };

    var renderDetailCri = function (value, metadata, record, rowIndex, colIndex, store, obj) {
        if (value != null) {
            var colIndex1 = colIndex + 1;
            var departmentID = App.grdStatisticCri.columns[colIndex1].tag;
            return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDetailStatiscalCri(" + departmentID + ")\">" + value + "</a>";
        }
    };

</script>
