@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend;
@model iDAS.Web.Areas.Timekeeping.Models.WorkOutDTO
@{
    var X = Html.X();
    // var isReadonly = !Model.AllowCreate && !Model.AllowUpdate;
    var operation = (string)ViewData["Operation"];
    var formId = X.GetComponentID();
    var SatrusCombobox = new List<ListItem>();
    //SatrusCombobox.Add(new ListItem() { Text = "Chờ duyệt", Value = "0" });
    //SatrusCombobox.Add(new ListItem() { Text = "Phê duyệt", Value = "1" });
    //SatrusCombobox.Add(new ListItem() { Text = "Từ chối", Value = "2" });
    SatrusCombobox.Add(new ListItem("Chờ duyệt", 0));
    SatrusCombobox.Add(new ListItem("Phê duyệt", 1));
    SatrusCombobox.Add(new ListItem("Từ chối", 2));
    var currentId = (int)ViewData["CurrentUserId"];
    // bool isFinal = Convert.ToBoolean(ViewData["isFinal"] ?? false);
    // var sentBy = (ViewData["sentBy"] ?? Guid.Empty).ToString();
    //   var sentByBO = new iDAS.Service.EmployeeService().GetById(Guid.Parse(sentBy));
}
@(X.Window()
        .Title(operation == "Create" ? "Thêm mới" : "Cập nhật")
        .Icon(operation == "Create" ? Icon.Add : Icon.Pencil)
        // .Height(operation == "Create" ? 330 : 330)
        .Width(600)
        .Items(
            X.FormPanelVBoxFormat()
                .ID(formId)
                .BodyPadding(6)
                .Items(
                    X.HiddenFor(u => u.Id),
                    // X.HiddenFor(u => u.UserId),
                    X.HiddenFor(u => u.EmployeeId),
                    X.Panel().Layout(LayoutType.HBox).Border(false).MarginSpec("0 0 5 0")
                    .Items(
                        X.DateFieldFormatFor(u => u.StartTime).ReadOnly(Model.Status == 1 || Model.Status == 2).EmptyText("Bắt đầu").Flex(1).HideLabel(true).AllowBlank(false),
                        X.ComboBoxHourFormatFor(u => u.StartTimeHour).ReadOnly(Model.Status == 1 || Model.Status == 2).ID("ccbTimeOffHourFrom").Width(100).EmptyText("Giờ"),
                        X.ComboBoxMiniturFormatFor(u => u.StartTimeMinitu).ReadOnly(Model.Status == 1 || Model.Status == 2).ID("ccbTimeOffMinituFrom").Width(100).EmptyText("Phút")
                    ),
                    X.Panel().Layout(LayoutType.HBox).Border(false).MarginSpec("0 0 5 0")
                    .Items(
                        X.DateFieldFormatFor(u => u.EndTime).ReadOnly(Model.Status == 1 || Model.Status == 2).EmptyText("Kết thúc").Flex(1).HideLabel(true).AllowBlank(false),
                        X.ComboBoxHourFormatFor(u => u.EndTimeHour).ReadOnly(Model.Status == 1 || Model.Status == 2).ID("ccbTimeOffHourTo").Width(100).EmptyText("Giờ"),
                        X.ComboBoxMiniturFormatFor(u => u.EndTimeMinitu).ReadOnly(Model.Status == 1 || Model.Status == 2).ID("ccbTimeOffMinituTo").Width(100).EmptyText("Phút")
                    ),
                    X.TextFieldFor(u => u.Address).ReadOnly(Model.Status == 1 || Model.Status == 2).EmptyText("Địa điểm làm việc").HideLabel(true).AllowBlank(false),
                    X.TextAreaFor(u => u.Reason).ReadOnly(Model.Status == 1 || Model.Status == 2).EmptyText("Lý do làm ngoài").HideLabel(true).AllowBlank(false),
                    X.ComboBoxFormatFor(u => u.Status).EmptyText("Trạng thái").Items(SatrusCombobox).Hidden(operation == "Create" ? true : false).ReadOnly(operation == "Update" && Model.ApprovedBy != currentId).AllowBlank(true)
                    ,
                     Html.X().EmployeeFieldForV3(u => u.Perform).ReadOnly(Model.Status == 1||Model.Status==2).Title("Người duyệt " + Html.Required()).MarginSpec("0 0 0 0")
                    //X.FieldSet().Title("Người duyệt (*)").MarginSpec("10 0 10 0").Padding(1).Items(
                    //    X.EmployeeFieldFor(u => u.EmployeePerform).UrlEmployeeStore(Url.Action("LoadData", "Employee", new { area = "Generic" }))
                    //)
                    )
            //,
            //    X.Checkbox().ID("chbForward").FieldLabel("Chuyển tiếp").Hidden(operation == "Update")
            //    //.Disabled(isFinal || operation != 1)
            //    .Listeners(ls => ls.Change.Handler = "enableForward()"),
            //    X.Label().Hidden(operation == 0 || sentByBO.Name == "" || sentByBO.Name == null).Text("Chuyển tiếp từ: " + sentByBO.Name),

            //     Html.X().EmployeeFieldFor(u => u.Perform).Title("Chuyển tiếp tới" + Html.Required()).MarginSpec("0 0 0 115")
            )
            .Buttons(

                // .SuccessHandle("App.stLikelihood1.reload();App.stLikelihood1ApproveWorkOut.reload();this.up('window').doDestroy();"),
                X.ButtonSave()
                    .Hidden(false)
                    .Disabled(Model.Status == 1 || Model.Status == 2)
                    .DirectEvents(de =>
                    {
                        de.Click.FormID = formId;
                        de.Click.Url = Url.Action(operation=="Create"?"Create":"Update");
                        de.Click.Success = "App.stLikelihood1.reload();App.stLikelihood1ApproveWorkOut.reload();";
                        //de.Click.Url = Url.Action(operation == "Create" ? "Create" : "Update");
                        // de.Click.ExtraParams.Add(new { forwardId = "" });
                        //de.Click.ExtraParams.Add(new { forwardId = new JRawValue("App.hdfemployeeIDOtherTOGetValue.getValue()") });
                        //de.Click.Success = "App.stLikelihood1.reload();App.stLikelihood1ApproveWorkOut.reload();this.up('window').doDestroy();";
                    }),
            //X.ButtonDelete()
            //  .Hidden(operation == "Create" || Model.Status == 1 || Model.Status == 2 ? true : false)
            //  .DirectEvents(de =>
            //  {
            //      de.Click.ExtraParams.Add(new { id = Model.Id });
            //      de.Click.Success = "App.stLikelihood1.reload();App.stLikelihood1ApproveWorkOut.reload();this.up('window').doDestroy();";
            //  }),
            //.SuccessHandle("App.stLikelihood1.reload();App.stLikelihood1ApproveWorkOut.reload();this.up('window').doDestroy();"),
            X.ButtonExit()
        )
)
<script>
    Ext.getBody().unmask();

    var enableForward = function () {
        var state = App.chbForward.getValue();
        App.fieldForward.setDisabled(!state);
    };
</script>