@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web.ExtExtend;
@model iDAS.Items.ProductionPlanItem
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    var deleteUrl = '@(Url.Action("Delete"))';
    var onSelectRequired = function () {
        var records = App.GrRequired.selModel.getSelection();
        if (records.length > 0) {
            App.btnCreatePlan.setDisabled(false);
            App.hdfRequirementID.setValue(records[0].data.ID);
            App.StorePlan.reload();
        }
        else {
            App.btnCreatePlan.setDisabled(true);
        }
    };
    function CheckStatusPlan() {
        var records = App.GrPlan.selModel.getSelection();
        if (records.length == 1) {
            SetEnabled(App.btnUpdatePlan, App.btnDeletePlan, App.btnDetailPlan);
        }
        else {
            SetDisabled(App.btnUpdatePlan, App.btnDeletePlan, App.btnDetailPlan);
        };
    };
    var ShowAdd = function () {
        var url = '@(Url.Action("Update"))';
        var requiredRecord = App.GrRequired.selModel.getSelection()[0];
        var params = {
            requirementId: App.hdfRequirementID.value,
            requirementLevel: requiredRecord.data.Level,
            requirementColor: requiredRecord.data.Color,
            quantity: requiredRecord.data.Quantity,
            endTime: requiredRecord.data.EndTime,
            productionName: requiredRecord.data.ProductName,
            productionId: requiredRecord.data.ProductID
        };
        onDirectMethod(url, params, 'get');
    };
    var ShowUpdate = function () {
        var records = App.GrPlan.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("Update"))';
            var params = {
                ID: records[0].get('ID')
            };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        };
    };
    var ShowView = function () {
        var records = App.GrPlan.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("DetailForm"))';
            var params = {
                ID: records[0].get('ID')
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        };
    };
</script>
@(Html.X().Viewport().Layout(LayoutType.Border).Border(false).Margin(0).Frame(false).Padding(2)
            .Items(
                    Html.X().Hidden().ID("hdfRequirementID"),
                    Html.X().GridPanel().Region(Region.West).ID("GrRequired").Width(300)
                            .Title("Yêu cầu sản xuất").TitleAlign(TitleAlign.Center)
                            .ColumnLines(true)
                            .ForceFit(true)
                            .Collapsible(true).Split(true)
                            .Store(
                                Html.X().Store().ID("StoreRequired")
                                        .RemotePaging(true)
                                        .GroupField("ProductName")
                                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadData", "Required", new { Area = "Production" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                                        .Model(
                                            Html.X().Model().Fields(
                                                Html.X().ModelField().Name("ID"),
                                                Html.X().ModelField().Name("HumanEmployee.Name"),
                                                Html.X().ModelField().Name("ProductID").Mapping("Product.ID"),
                                                Html.X().ModelField().Name("ProductName").Mapping("Product.Name"),
                                                Html.X().ModelField().Name("Quantity"),
                                                Html.X().ModelField().Name("EndTime"),
                                                Html.X().ModelField().Name("Level").Mapping("ProductionLevel.Name"),
                                                Html.X().ModelField().Name("Color").Mapping("ProductionLevel.Color"),
                                                Html.X().ModelField().Name("Status")
                                            )
                                      )
                        )
                        .ColumnModel(
                                    Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                    Html.X().Column().DataIndex("ProductName").Text("Sản phẩm").Align(Alignment.Center),
                                    Html.X().NumberColumn().DataIndex("Quantity").Text("Số lượng").Width(80).Align(Alignment.Right),
                                    Html.X().DateColumnExtend().DataIndex("EndTime").Text("Thời hạn").Align(Alignment.Center).Width(100),
                                    Html.X().Column().Text("Mức độ").Width(100).DataIndex("Level").Align(Alignment.Right)
                                        .Renderer(new Renderer { Fn = "function(value, meta, record) { meta.style = 'background-color:' + record.get('Color') + ';'; return value; }" })
                            )
                        .SelectionModel(
                                    Html.X().RowSelectionModel().Mode(SelectionMode.Single)
                                                    .Listeners(ls => ls.SelectionChange.Handler = "onSelectRequired(this);")
                                                )
                        .BottomBar(Html.X().CustomPagingToolbar())                         
                        .Features(
                                Html.X().GridFilters()
                                    .MenuFilterText("Tìm kiếm")
                                    .Filters(
                                        Html.X().StringFilter().DataIndex("Employee.Name")
                                    ),
                                Html.X().GroupingSummary()
                                    .ID("GroupingSummaryProduct")
                                    .GroupHeaderTplString("{name}")
                                    .HideGroupedHeader(true)
                                    .EnableGroupingMenu(false)
                                    .ShowSummaryRow(false)
                            ),
                    Html.X().GridPanel().ID("GrPlan")
                            .Region(Region.Center)
                            .Header(false)
                            .ColumnLines(true)
                            .ForceFit(true)
                            .TopBar(
                                Html.X().Toolbar()
                                .Layout(LayoutType.HBox)
                                .Items(
                                    Html.X().ButtonCreate().Disabled(true).ID("btnCreatePlan").Handler("ShowAdd();"),
                                    Html.X().ToolbarSeparator(),
                                    Html.X().ButtonUpdate().ID("btnUpdatePlan").Handler("ShowUpdate();"),
                                    Html.X().ToolbarSeparator(),
                                    Html.X().ButtonDelete().ID("btnDeletePlan").Handler("onDelete(App.GrPlan.selModel.getSelection()[0].get('ID'));"),
                                    Html.X().ToolbarSeparator(),
                                    Html.X().ButtonView().ID("btnDetailPlan").Handler("ShowView();"),
                                    Html.X().ToolbarFill(),
                                    Html.X().ButtonTutorial()
                            ))
                            .Store(
                                Html.X().Store().ID("StorePlan")
                                        .RemotePaging(true)
                                        .PageSize(20)
                                        .AutoLoad(false)
                                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadData", "Plan", new { Area = "Production" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                                        .Parameters(pr => { pr.Add(new StoreParameter("requirementId", "App.hdfRequirementID.value", ParameterMode.Raw)); })
                                        .Model(
                                            Html.X().Model().Fields(
                                                Html.X().ModelField().Name("ID"),
                                                Html.X().ModelField().Name("PlanName"),
                                                Html.X().ModelField().Name("ProductName").Mapping("Product.Name"),
                                                Html.X().ModelField().Name("Quantity"),
                                                Html.X().ModelField().Name("Status")
                                            )
                                      )
                        )
                        .ColumnModel(
                                    Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                    Html.X().Column().DataIndex("PlanName").Text("Kế hoạch").Flex(1),
                                    Html.X().Column().DataIndex("ProductName").Text("Sản phẩm").Align(Alignment.Center).Width(200),
                                    Html.X().NumberColumn().DataIndex("Quantity").Text("Số lượng").Align(Alignment.Center).Width(100),
                                    Html.X().Column().DataIndex("Status").Text("Trạng thái").Width(150).Align(Alignment.Center)
                            )
                        .Features(
                                Html.X().GridFilters()
                                    .MenuFilterText("Tìm kiếm")
                                    .Filters(
                                        Html.X().StringFilter().DataIndex("Name"),
                                        Html.X().BooleanFilter().DataIndex("IsUse").YesText("Có").NoText("Không")
                                    )
                            )
                        .SelectionModel(
                                        Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false).Mode(SelectionMode.Single)
                                                .Listeners(ls => ls.SelectionChange.Fn = "CheckStatusPlan")
                                        )
                        .BottomBar(Html.X().CustomPagingToolbar())
        )
)

