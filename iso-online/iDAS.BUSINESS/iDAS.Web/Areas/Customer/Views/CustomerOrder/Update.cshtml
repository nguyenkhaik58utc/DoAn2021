@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Web.ExtExtend;
@using iDAS.Utilities;
@model iDAS.Items.CustomerOrderItem
@{
    string title = "";
    var IconView = new Icon();
    string actionForm = Model.ActionForm;
    if (actionForm == iDAS.Utilities.Form.Add)
    {
        IconView = Icon.Add;
        title = "Thêm mới đơn hàng";
    }
    else
    {
        IconView = Icon.Pencil;
        title = "Cập nhật đơn hàng";
    }
}
@(Html.X().CustomWindow().Maximizable(false)
.ID("winUpdateOrderCustomer")
.Title(title)
.Icon(IconView)
.Items(
     Html.X().FormPanel().ID("frmUpdate")
            .Layout(LayoutType.Column)
            .Frame(true)
            .StyleSpec("border: none;")
            .FieldDefaults(df => { df.LabelAlign = LabelAlign.Left; df.LabelWidth = 110; })
            .Items(
                Html.X().HiddenFor(m => m.ID), Html.X().HiddenFor(m => m.CustomerID),
                    Html.X().ComboBoxFor(m => m.ServiceID).FieldLabel("Sản phẩm").EmptyText("Chọn dịch vụ...")
                        .ID("cbxServices")
                        .ColumnWidth(1)
                        .MarginSpec("5 8 0 8")
                        .EmptyText("Nhập Sản phẩm....")
                        .AllowBlank(false)
                        .BlankText("Sản phẩm không được bỏ trống")
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .ForceSelection(true)
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                                .IDProperty("ID")
                                                .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("GetDataCombo", "Service", new { area = "Service" }))
                                                .Reader(Html.X().JsonReader().Root("data")))),
                Html.X().NumberFieldFor(m => m.Quantity)
                        .MinValue(0)
                        .FieldLabel("Số lượng" + Html.Required())
                        .EmptyText("Nhập số lượng...")
                        .BlankText("Số lượng không được bỏ trống!")
                        .AllowBlank(false)
                        .ColumnWidth(0.8)
                        .MarginSpec("5 8 0 8"),
                Html.X().DateFieldFor(m => m.Time).FieldLabel("Thời gian" + Html.Required())
                        .AllowBlank(false)
                        .ColumnWidth(0.8)
                        .MarginSpec("5 8 0 8"),
                Html.X().CheckboxFor(m => m.IsPrice).BoxLabel("xác nhận").MarginSpec("5 8 0 8").FieldLabel("Đã báo giá")
                                                                                .ColumnWidth(0.5),         
                Html.X().FileUploadFieldFor(m=>m.AttachmentFile).ColumnWidth(1).MarginSpec("5 8 0 8"),
                Html.X().TextAreaFor(m => m.Note)
                        .FieldLabel("Ghi chú")
                        .EmptyText("Nhập ghi chú...")
                        .Height(150)
                        .ColumnWidth(1)
                        .MarginSpec("5 8 0 8")
    )
)
.Buttons(
    Html.X().ButtonSave()
                    .DirectEvents(de =>
                                {
                                    de.Click.Before = @"if (!App.frmUpdate.getForm().isValid()) { return false; }; ";
                                    de.Click.ExtraParams.Add(new { exit = true });
                                    de.Click.Url = Url.Action("Update");
                                    de.Click.FormID = "frmUpdate";
                                }), 
    Html.X().ButtonExit())
)
