@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@model iDAS.Items.AccountingPaymentItem
@{
    var X = Html.X();
    string title = "";
    var IconView = new Icon();
    string actionForm = Model.ActionForm;
    if (actionForm == iDAS.Utilities.Form.Add)
    {
        IconView = Icon.Add;
        title = "Thêm mới thanh toán";
    }
    else
    {
        IconView = Icon.Pencil;
        title = "Cập nhật thanh toán";
    }
    long TotalContract = (long)Model.TotalContract;
}
@(Html.X().Window()
.ID("winUpdateCustomerContract")
.Title(title)
.Icon(IconView)
.Width(600)
.Margin(0)
.Constrain(true)
.Layout(LayoutType.Fit)
.Border(true)
.Modal(true)
.Resizable(false)
.Items(
     X.FormPanel().ID("frmAcountingPayment")
            .Layout(LayoutType.Column)
            .Frame(true)
            .StyleSpec("border: none;")
            .FieldDefaults(df => { df.LabelAlign = LabelAlign.Left; df.LabelWidth = 100; })
            .Items(
                X.HiddenFor(m => m.ID).ID("hdfAccountingID"),
                X.HiddenFor(m => m.CustomerContractID).ID("hdfCustomerContractId"),
                X.TextAreaFor(m => m.Content).Height(100)
                        .FieldLabel("Nội dung" + Html.Required())
                        .EmptyText("Nhập nội dung thanh toán...")
                        .BlankText("Nội dung thanh toán không được bỏ trống!")
                        .AllowBlank(false)
                        .ColumnWidth(1)
                        .MarginSpec("5 8 0 8"),
                X.NumberFieldFor(m => m.TotalContract).Icon(Icon.MoneyDollar)
                        .ReadOnly(true)
                        .FieldLabel("Trị giá hợp đồng")
                        .EmptyText("Nhập trị giá thanh toán...")
                        .ColumnWidth(0.6)
                        .MarginSpec("5 8 0 8"),
                X.NumberFieldFor(m => m.Value).Icon(Icon.MoneyDollar)
                        .ID("nffValueID")
                        .AllowDecimals(true)
                        .MaxValue(TotalContract)
                        .FieldLabel("Trị giá thu hồi")
                        .EmptyText("Nhập trị giá thu hồi...")
                        .Listeners(ls =>
                        {
                            ls.Focus.Handler = "SetForcus(this);";
                            ls.Change.Handler = "ValueChange(this,this.value);";
                        })
                        .ColumnWidth(0.5)
                        .MarginSpec("5 8 0 8"),
                    X.NumberFieldFor(m => m.Rate).Icon(Icon.ChartBar)
                        .ID("nffRateID")
                        .AllowDecimals(true)
                        .FieldLabel("Tỉ lệ thu hồi (%)").LabelAlign(LabelAlign.Right)
                        .EmptyText("% giá trị hợp đồng...")
                            .Listeners(ls =>
                            {
                                ls.Focus.Handler = "SetForcus(this);";
                                ls.Change.Handler = "RateChange(this,this.value);";
                            })
                        .MaxValue(100)
                        .ColumnWidth(0.5)
                        .MarginSpec("5 8 0 8"),
                X.TextAreaFor(m => m.Note)
                        .FieldLabel("Ghi chú")
                        .EmptyText("Nhập ghi chú...")
                        .Height(150)
                        .ColumnWidth(1)
                        .MarginSpec("5 8 0 8")
    )
)
.Buttons(
    Html.X().Button()
                    .Text("Lưu lại")
                    .Icon(Icon.DatabaseSave)
                    .DirectEvents(de =>
                                {
                                    de.Click.Before = @"if (!App.frmAcountingPayment.getForm().isValid()) { return false; }; ";
                                    de.Click.ExtraParams.Add(new { exit = true });
                                    de.Click.Url = Url.Action("UpdateAccounting");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.FormID = "frmAcountingPayment";
                                    de.Click.Success = "this.up('window').close();App.StoreAccountingPayment.reload();";
                                })
    , Html.X().Button().Text("Đóng").Icon(Icon.Cancel).OnClientClick("this.up('window').close();"))
)
<script>
    var TotalContract = '@TotalContract';
    var forcusObj;
    function SetForcus(obj) {
        forcusObj = obj;
    };
    function ValueChange(obj, value) {
        if (forcusObj.id == obj.id) {
            var rate = GetRate(value, TotalContract);
            App.nffRateID.setValue(rate);
        };
    };
    function RateChange(obj, value) {
        if (forcusObj.id == obj.id) {
            var value = GetValue(value, TotalContract);
            App.nffValueID.setValue(value);
        };
    };
    function GetRate(value, total) {
        return value / total * 100;
    };
    function GetValue(rate, total) {
        return rate / 100 * total;
    };
</script>