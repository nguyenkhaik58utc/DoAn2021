@model System.Collections.IEnumerable
@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript">  
    var checkCateStatus = function () {
        var records = App.GridServiceCategory.selModel.getSelection();
        switch (records.length) {
            case 0:
                App.butViewCate.setDisabled(true);
                App.butUpdateCate.setDisabled(true);
                App.butDeleteCate.setDisabled(true);
                break;
            case 1:
                if (records[0].get('IsUse')) {
                    App.butDeleteCate.setDisabled(true);

                } else {
                    App.butDeleteCate.setDisabled(false);
                }
                App.butUpdateCate.setDisabled(false);
                App.butViewCate.setDisabled(false);
                break;
            default:
                App.butUpdateCate.setDisabled(true);
                App.butViewCate.setDisabled(true);
                App.butDeleteCate.setDisabled(true);
                break;
        }
    };
    var deleteRecordCate = function () {
        var records = App.GridServiceCategory.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo',
                    msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                break;
            default:
                var label = '';
                if (records.length > 1) {
                    label = ' các ';
                } else {
                    label = ' ';
                }
                Ext.MessageBox.show({
                    title: 'Xác nhận',
                    msg: 'Bạn có chắc chắn muốn xóa' + label + 'Bản ghi đã chọn không?',
                    buttons: { yes: 'Đồng ý', no: 'Không' },
                    iconCls: '#Information',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var aId = new Array();
                            var strId = '';
                            for (var i = 0, r; r = records[i]; i++) {
                                aId[i] = records[i].get('ID');
                            }
                            strId = aId.join();
                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("DeleteCate", "Service", new { Area = "Service" }, null))', params: { stringId: strId },
                                success: function (result) {
                                    if (result == 'Error') {
                                        Ext.MessageBox.show({
                                            title: 'Cảnh báo', msg: 'Quá trình thực hiện xóa Dữ liệu phát sinh lỗi do Dữ liệu này có thể đã được sử dụng. Đề nghị kiểm tra lại!',
                                            buttons: { yes: 'Đồng ý' },
                                            iconCls: '#Cancel',
                                            fn: function (btn) {
                                                records[0].reject();
                                                return false;
                                            }
                                        });
                                    }
                                }
                            });
                        }
                    }
                });
                break;
        }
    };
    var GetBooleanChar = function (value, p, record) {
        var sUse = "<span style='color:blue'>Sử dụng</span>";
        var sNot = "<span style='color:red'>Không sử dụng</span>";
        if (value == "1") {
            return sUse;
        } else {
            return sNot;
        }
    };
    var onComboBoxSelect = function (combo) {
        var store = combo.up("gridpanel").getStore();
        store.pageSize = parseInt(combo.getValue(), 10);
        store.load();
    };
    var checkStatus = function () {
        var records = App.gpService.selModel.getSelection();
        var id = records[0].get('ID');
        switch (records.length) {
            case 0:
                App.btnDetail.setDisabled(true)
                App.cmDetail.setDisabled(true)
                App.cmEdit.setDisabled(true);
                App.cmDelete.setDisabled(true);
                App.butEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                break;
            case 1:
                App.btnDetail.setDisabled(false)
                App.cmDetail.setDisabled(false)
                App.cmEdit.setDisabled(false);
                App.butEdit.setDisabled(false);
                if (!records[0].get('IsUse'))
                {
                    App.cmDelete.setDisabled(false);
                    App.butDelete.setDisabled(false);
                }
                else {
                    App.cmDelete.setDisabled(true);
                    App.butDelete.setDisabled(true);
                }
                break;
            default:
                App.btnDetail.setDisabled(true)
                App.cmDetail.setDisabled(true)
                App.cmEdit.setDisabled(true);
                App.cmDelete.setDisabled(true);
                App.butEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                break;
        }
    };
    var viewRecord = function () {
        Ext.MessageBox.show({
            title: 'Thông báo', msg: 'Chức năng này chưa được xây dựng! ^__^',
            buttons: { yes: 'Đồng ý' },
            iconCls: '#Information',
            fn: function (btn) {
                return true;
            }
        });
    };
    var itemcontextmenu = function (grid, record, item, index, e, eOpts) {
        e.stopEvent();
        App.cmMenu.showAt(e.getXY());
    };
    var itemcontextmenuStage = function (grid, record, item, index, e, eOpts) {
        e.stopEvent();
        App.cmMenuStagesOfService.showAt(e.getXY());
    };    
    var getRecord = function () {
        var records = App.gpService.selModel.getSelection();
        switch (records.length) {
            case 1:
                App.winEditService.show();
                var requestData = { txtEditServiceID: records[0].get('ServiceID'), txtEditServiceName: records[0].get('ServiceName'), txtEditNote: records[0].get('Note') }
                App.frEditService.getForm().setValues(requestData);
                break;
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                App.butEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                App.cmEdit.setDisabled(true);
                App.cmDelete.setDisabled(true);
                break;
            default:
                Ext.MessageBox.show({
                    title: 'Cảnh báo', msg: 'Bạn chỉ được chọn 1 bản ghi khi thực hiện sửa đổi nội dung!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                App.butEdit.setDisabled(true);
                App.butDelete.setDisabled(false);
                App.cmEdit.setDisabled(true);
                App.cmDelete.setDisabled(false);
                break;
        }
    };
    var editRecord = function () {
        if (App.frEditService.getForm().isValid()) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Edit", "Service", new { Area = "Service" }, null))',
                params: { ServiceID: App.txtEditServiceID.getValue(), ServiceName: App.txtEditServiceName.getValue(), timeExpected: App.txtEditTimeExpected.getValue(), fundsForExpected: App.txtEditFundsForExpected.getValue(), certificationsID: App.cbEditCertificationsID.getValue(), fundsForFact: App.txtEditFundsForFact.getValue(), numberStudents: App.txtEditNumberStudents.getValue(), fundsForSupport: App.txtEditFundsForSupport.getValue(), fundsToPay: App.txEdittFundsToPay.getValue(), shortTimeout: App.txtEditShortTimeout.getValue(), partnersOfTrainingID: App.cbEditPartnersOfTrainingID.getValue() }
            });
        }
    };
    var insertRecord = function (configVal) {
        if (App.frService.getForm().isValid()) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Insert", "Service", new { Area = "Service" }, null))',
                params: { ServiceID: App.txtServiceID.getValue(), ServiceName: App.txtServiceName.getValue(), timeExpected: App.txtTimeExpected.getValue(), fundsForExpected: App.txtFundsForExpected.getValue(), certificationsID: App.cbCertificationsID.getValue(), fundsForFact: App.txtFundsForFact.getValue(), numberStudents: App.txtNumberStudents.getValue(), fundsForSupport: App.txtFundsForSupport.getValue(), fundsToPay: App.txtFundsToPay.getValue(), shortTimeout: App.txtShortTimeout.getValue(), partnersOfTrainingID: App.cbPartnersOfTrainingID.getValue(), val: configVal }
            });
        }
        return true;
    };    
    var deleteRecord = function () {
        var records = App.gpService.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        App.butEdit.setDisabled(true);
                        App.butDelete.setDisabled(true);
                        App.btnDetail.setDisabled(true);
                        return false;
                    }
                });
                break;
            default:
                var label = '';
                if (records.length > 1) { label = ' các '; } else { label = ' '; }
                Ext.MessageBox.show({
                    title: 'Xác nhận', msg: 'Bạn có chắc chắn muốn xóa' + label + 'Bản ghi đã chọn không?',
                    buttons: { yes: 'Đồng ý', no: 'Không' },
                    iconCls: '#Information',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var aId = new Array();
                            var strId = '';
                            for (var i = 0, r; r = records[i]; i++) {
                                aId[i] = records[i].get('ID');
                            }
                            strId = aId.join();
                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("Delete", "Service", new { Area = "Service" }, null))',
                                params: { stringId: strId }
                            });
                        }
                    }
                });
                break;
        }
    };
    var showFrmAdd = function () {
        var records = App.GridServiceCategory.selModel.getSelection();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ShowFrmAdd", "Service", new { Area = "Service" }, null))',
            params:{cateId:records[0].get('ID')}
        });
    };
    var showFrmAddCate = function () {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ShowFrmAddCate", "Service", new { Area = "Service" }, null))'
        });
    };
    var showFrmUpdateCate = function () {
        var records = App.GridServiceCategory.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo',
                    msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                break;
            default:
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("ShowFrmUpdateCate", "Service", new { Area = "Service" }, null))',
                    params: { id: records[0].get('ID') }
                });
                break;
        }
       
    };
    var showFrmDetailCate = function () {
        var records = App.GridServiceCategory.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo',
                    msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                break;
            default:
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("ShowFrmDetailCate", "Service", new { Area = "Service" }, null))',
                    params: { id: records[0].get('ID') }
                });
                break;
        }

    };
    var showFrmDetail = function () {
        var records = App.gpService.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo',
                    msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                break;
            default:
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("ShowFrmDetail", "Service", new { Area = "Service" }, null))',
                    params: { id: records[0].get('ID') }
                });
                break;
        }
    };
    var showFrmEditService = function () {
        var records = App.gpService.selModel.getSelection();
        if (records.length == 0) {
            Ext.MessageBox.show({
                title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Cancel',
                fn: function (btn) {
                    App.butEdit.setDisabled(true);
                    App.butDelete.setDisabled(true);
                    App.btnDetail.setDisabled(true);
                    return false;
                }
            });
        }
        else {
            var id = records[0].get('ID');
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ShowFrmEdit", "Service", new { Area = "Service" }, null))',
                params: { id: id }
            });
        }
    };    
</script>
@(Html.X().Menu()
          .ID("cmMenu")  
          .Items(                                     
                new MenuItem { Text = "Thêm mới", ID = "cmAdd", Icon = Icon.Add, Handler = "showFrmAdd();" },
                new MenuItem { Text = "Sửa", ID = "cmEdit", Disabled = true, Icon = Icon.Pencil, Handler = "showFrmEditService();" },
                new MenuItem { Text = "Xóa", ID = "cmDelete", Disabled = true, Icon = Icon.Delete, Handler = "deleteRecord();" },
                new MenuItem { Text = "Xem", ID = "cmDetail", Disabled = true, Icon = Icon.Zoom, Handler = "showFrmDetail();" }
             )
     )
@(Html.X().Viewport()
          .Layout(LayoutType.Border)
          .ID("vpService")
          .Items(       
          Html.X().Panel()
        .ID("CatePanel")
        .Region(Region.West)
        .Width(370)
        .Split(true)
        .Title("NHÓM DỊCH VỤ")
        .Border(true)
        .MarginSpec("1 0 1 1")
        .Header(true)
        .TitleAlign(TitleAlign.Center)
        .Layout(LayoutType.Fit)
        .Header(true)
        .Items(    
         Html.X().GridPanel()
                .ID("GridServiceCategory")
                .Height(400)
                .Border(false)
                .TopBar(
                    Html.X().Toolbar()
                        .Items(
                            Html.X().ButtonCreate()
                                .ID("btnAddCate")
                                    .Handler("showFrmAddCate();"),
                            Html.X().ToolbarSeparator(),
                                Html.X().ButtonUpdate()
                                    .ID("butUpdateCate")
                                        .Handler("showFrmUpdateCate();"),
                            Html.X().ButtonDelete()
                                .ID("butDeleteCate")
                                .Handler("deleteRecordCate();"),
                                          Html.X().ToolbarSeparator(),
                                       Html.X().ButtonView()
                                    .ID("butViewCate")
                                        .Handler("showFrmDetailCate();"),
                             Html.X().ToolbarFill()

                        )
                )
                .Store(
                    Html.X().Store()
                        .ID("stCategory")
                        .Proxy(
                            Html.X().AjaxProxy()
                                .Url(Url.Action("GetDataCate"))
                                .Reader(Html.X().JsonReader().Root("data"))
                        )
                        .RemoteSort(false)
                        .RemotePaging(true)
                        .PageSize(20)
                        .Model(
                            Html.X().Model()
                            .IDProperty("ID")
                                .Fields(
                                    Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                    Html.X().ModelField().Name("Name").Type(ModelFieldType.String),
                                    Html.X().ModelField().Name("Note").Type(ModelFieldType.String),
                                    Html.X().ModelField().Name("CreateAt").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("IsUse").Type(ModelFieldType.Boolean),
                                    Html.X().ModelField().Name("CreateName").Type(ModelFieldType.String),
                                    Html.X().ModelField().Name("UpdateAt").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("UpdateName").Type(ModelFieldType.String),
                                    Html.X().ModelField().Name("UpdateByTime").Type(ModelFieldType.Date),
                                    Html.X().ModelField().Name("UpdateByName").Type(ModelFieldType.String)
                                )
                        )

                )
                .ColumnModel(
                    Html.X().RowNumbererColumn()
                        .Text("STT")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Width(33)
                        .Align(Alignment.Center),
                    Html.X().Column()
                        .Text("Tên nhóm dịch vụ")
                        .DataIndex("Name")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Flex(1)
                        .Wrap(true)
                        .Editor(
                        Html.X().TextField()
                                .MaxLength(200)
                                .AllowOnlyWhitespace(false)
                                .AllowBlank(false)
                                    .BlankText("Tên nhóm dịch vụ không được để trống")
                            ),
                    Html.X().CheckColumn()
                        .Text("Sử dụng")
                            .DataIndex("IsUse")
                        .Align(Alignment.Center)
                        .Width(100)
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Editable(false)     
                )
                .SelectionModel(
               Html.X().RowSelectionModel()
                    .Mode(SelectionMode.Multi).Listeners(ls => ls.SelectionChange.Handler = "App.gpService.getStore().reload(); checkCateStatus();")
                )
                .Plugins(Html.X().CellEditing())
                .BottomBar(
                     Html.X().CustomPagingToolbar().DisplayInfo(false))
                
               ),
                       Html.X().GridPanel()
                               .ID("gpService")
                               .Title("Danh mục dịch vụ cung cấp")
                               .Header(false)          
                               .Region(Region.Center)
                                .Split(true)
                                .Border(true)
                                .MarginSpec("1 1 1 0")
                                .TitleAlign(TitleAlign.Center)
                                .Layout(LayoutType.Fit)
                                .Collapsible(true)                   
                               .ContextMenuID("cmMenu")
                               .ColumnLines(true)
                               .Icon(Icon.TextListBullets)
                               .ResizableConfig(new Resizer { Handles = ResizeHandle.East })
                               .TopBar(Html.X().Toolbar()
                               .ID("tbsgpService")
                                    .Layout(LayoutType.HBox)
                                    .Items(
                                        Html.X().ButtonCreate()
                                                .Handler("showFrmAdd();"),
                                        Html.X().ToolbarSeparator(),
                                        Html.X().ButtonUpdate()
                                                .ID("butEdit")
                                                .Disabled(true)                                                
                                                .Handler("showFrmEditService();"),
                                        Html.X().ToolbarSeparator(),
                                        Html.X().ButtonDelete()
                                                .ID("butDelete")
                                                .Disabled(true)                                              
                                                .Handler("deleteRecord();"),   
                                        Html.X().ToolbarSeparator(),
                                                Html.X().ButtonView()
                                                .ID("btnDetail")
                                                .Disabled(true)
                                                .Handler("showFrmDetail();"), 
                                        Html.X().ToolbarFill(),
                                            Html.X().ButtonTutorial()
                                            )
                                        )
                                        
                                 .Store(Html.X().Store()
                                                .ID("stService")                   
                                                .Proxy(Html.X().AjaxProxy()
                                                .Url(Url.Action("GetData"))
                                                .Reader(Html.X().JsonReader().Root("data"))
                                    )
                                        .Parameters(ps =>
                                        {
                                            ps.Add(new StoreParameter("cateId", "App.GridServiceCategory.selModel.getSelection().length > 0 ? App.GridServiceCategory.getSelectionModel().getLastSelected().data.ID:0", ParameterMode.Raw));
                                        })
                                    .RemoteSort(true)
                                    .RemotePaging(true)
                                    .PageSize(20)     
                                    .GroupField("CategoryName")
                                    .Sorters(Html.X().DataSorter().Property("CategoryName").Direction(Ext.Net.SortDirection.ASC))
                                    .Model(
                                        Html.X().Model()
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.Int),
                                                new ModelField("Code", ModelFieldType.String),
                                                new ModelField("Cost", ModelFieldType.Float),
                                                new ModelField("Name", ModelFieldType.String),
                                                new ModelField("CategoryID", ModelFieldType.Int),
                                                new ModelField("CategoryName", ModelFieldType.String),                                          
                                                new ModelField("Note", ModelFieldType.String),
                                                new ModelField("IsUse", ModelFieldType.Boolean)                                             
                                             )
                                    )
                               
                            )
                            .ColumnModel(
                                        Html.X().RowNumbererColumn()
                                                .Text("STT")
                                                .StyleSpec("font-weight: bold; text-align: center;")
                                                .Width(30)
                                                .Align(Alignment.Center),
                                         Html.X().Column()
                                                 .DataIndex("Code")
                                                 .Text("Mã dịch vụ")
                                                 .StyleSpec("font-weight: bold; text-align: center;")
                                                 .Width(80)
                                                 .Wrap(true), 
                                            Html.X().Column()                                                
                                                    .DataIndex("Name")
                                                    .Text("Tên dịch vụ")
                                                    .StyleSpec("font-weight: bold; text-align: center;")
                                                    .Flex(1)
                                                    .Wrap(true),
                                           Html.X().Column()
                                                     .DataIndex("Cost")
                                                     .Text("Giá tham khảo")
                                                     .Renderer("RenderVND")
                                                     .Align(Alignment.Right)
                                                     .StyleSpec("font-weight: bold; text-align: center;")
                                                     .Width(120)
                                                     .Wrap(true),                                         
                                            Html.X().Column()
                                                    .DataIndex("IsUse")                                                            
                                                    .Text("Tình trạng")
                                                    .Renderer("GetBooleanChar")
                                                    .StyleSpec("font-weight: bold; text-align: center;")
                                                    .Width(100)                                                                 
                                                   )
                            .SelectionModel(
                                        Html.X().RowSelectionModel()
                                                .Mode(SelectionMode.Multi)
                                                .Listeners(ls =>
                                                    ls.Select.Handler = "checkStatus();"
                                                 )
                            )
                          .View(
    Html.X().GridView().MarkDirty(false)
    )   
    .Features(
    Html.X().GroupingSummary()
            .ID("GroupingSummaryProduct")
            .GroupHeaderTplString("{name}")
            .HideGroupedHeader(true)
            .EnableGroupingMenu(false)
    )
                            .BottomBar(
                                Html.X().CustomPagingToolbar()
                            )
                            .Listeners(ls => ls.BeforeItemContextMenu.Fn = "itemcontextmenu")

                       )
   )
