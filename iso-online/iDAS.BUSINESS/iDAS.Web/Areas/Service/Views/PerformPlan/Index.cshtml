@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web.ExtExtend;
@using iDAS.Utilities;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var urlSubmitTask = Url.Action("Insert", "PerformPlan", new { area = "Service" });
    var urlStoreTask = Url.Action("LoadTasks", "PerformPlan", new { area = "Service" });
    var paramStoreTask = Html.X().StoreParameter().Name("planId").Value("getPlanId()").Mode(ParameterMode.Raw);
}
@( Html.X().Viewport()
    .Layout(LayoutType.Border)
    .Items (

        Html.X().GridPanel()
            .Header(true)
            .Region(Region.West)
            .Width(440)
            .Split(true)
            .Title("KẾ HOẠCH CUNG CẤP DỊCH VỤ")
            .ID("grPlan")
            .Border(true)
            .MarginSpec("1 0 1 1")
            .TitleAlign(TitleAlign.Center)
            .Layout(LayoutType.Fit)
            .Collapsible(true)
            .ForceFit(true)
            .ColumnLines(true)
            .RowLines(true)
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                          Html.X().ComboBox()
                                .ID("Year")
                                .MarginSpec("0 0 0 5")
                                .LabelWidth(30)
                                .DisplayField("Name")
                                .SelectedItems(new ListItem(DateTime.Now.Year.ToString(), DateTime.Now.Year))
                                    .FieldLabel("Năm")
                                    .Editable(false)
                                    .Width(100)
                                    .ValueField("ID")
                                    .Listeners(l => l.Change.Handler = "App.dfFromDate.setValue(new Date(App.Year.getValue(), 0, 1)); App.dfToDate.setValue(new Date(App.Year.getValue(), 11, 31)); App.grPlan.getStore().load();")
                                    .Store(
                            Html.X().Store()
                                    .AutoLoad(true)
                                    .Model(
                                    Html.X().Model()
                                            .IDProperty("ID")
                                                    .Fields(
                                                            new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                            new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                            )
                                                            )
                                                    .Proxy(
                                                        Html.X().AjaxProxy()
                                                            .Url(Url.Action("GetYear"))
                                                    .Reader(Html.X().JsonReader().Root("data"))
                                               ).Listeners(ls => ls.Load.Handler = "App.dfFromDate.setValue(new Date(new Date().getFullYear(), 0, 1)); App.dfToDate.setValue(new Date(new Date().getFullYear(), 11, 31))")
                                              ),
                                           Html.X().DateField()
                                                   .FieldLabel("Từ")
                                                   .ID("dfFromDate")
                                                   .MarginSpec("0 5 0 5")
                                                   .MaxDate(DateTime.Now)
                                                   .LabelWidth(20)
                                                   .Width(110)
                                                     .Listeners(l =>
                                                       {
                                                           l.Change.Handler = "App.grPlan.getStore().load();";
                                                           l.SpecialKey.Fn = "onSpecialKey";
                                                       })
                                                   .Format("dd/MM/yyyy"),
                                           Html.X().DateField()
                                                   .FieldLabel("Đến")
                                                        .LabelWidth(20)
                                                       .Width(110)
                                                   .ID("dfToDate")
                                                      .Listeners(l =>
                                                       {
                                                           l.Change.Handler = "App.grPlan.getStore().load();";
                                                           l.SpecialKey.Fn = "onSpecialKey";
                                                       }),
                                                        Html.X().ToolbarSeparator(), 
                                                         Html.X().Button()
                                    .Disabled(true)
                                        .Icon(Icon.Zoom)
                                        .Text("Xem chi tiết")
                                        .ID("btnDetailPlan")
                                            .Handler("ViewDetail();")
                                    .Disabled(true)
                                           
                                   

                    )
                )
                      .Store(Html.X().Store()
                        .ID("stMnPlan")
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetDataIsApproval", "Plan", new { Area = "Service" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                        .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("year", "App.Year.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("fromdate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("todate", "App.dfToDate.getValue()", ParameterMode.Raw));

                            })                      
                        .RemoteSort(true)
                        .RemotePaging(true)
                        .AutoLoad(false)                 
                        .PageSize(20)
                        .GroupField("CommandServiceName")
                        .Sorters(Html.X().DataSorter().Property("CommandServiceName").Direction(Ext.Net.SortDirection.ASC))
                        .Model(
                        Html.X().Model()
                                .Fields(
                                    Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                    Html.X().ModelField().Name("ServiceID").Type(ModelFieldType.Int),
                                         Html.X().ModelField().Name("ServiceCommandID").Type(ModelFieldType.Int),
                                     Html.X().ModelField().Name("CommandServiceName").Type(ModelFieldType.String),
                                    Html.X().ModelField().Name("ServicePlanID").Type(ModelFieldType.Int),
                                    Html.X().ModelField().Name("Name").Type(ModelFieldType.String)
                                )
                              )
                          )
                    .ColumnModel(
                        Html.X().RowNumbererColumn()
                                .Text("STT")
                                .StyleSpec("font-weight: bold; text-align: center;")
                                .Align(Alignment.Center)
                                .Width(33),
                        Html.X().Column()
                                .Text("ID")
                                .DataIndex("ID")
                                .Hidden(true),                          
                        Html.X().Column()
                                .Text("Tên kế hoạch")
                                .StyleSpec("font-weight: bold;text-align: center")
                                .DataIndex("Name")
                               .Flex(1)
                                .Wrap(true)

                )
                .HideHeaders(true)
                .SelectionModel(
                    Html.X().CheckboxSelectionModel()
                            .Mode(SelectionMode.Single)
                            .Listeners(l =>
                            {
                                l.Select.Handler = " checkPlanStatus(); App.grMnPhase.getStore().reload();";
                            })
                            )

                              .View(
                            Html.X().GridView().MarkDirty(false)
                            )
                             .Features(
                            Html.X().GroupingSummary()
                            .ID("GroupingSummaryProduct")
                            .GroupHeaderTplString("{name}")
                            .HideGroupedHeader(true)
                            .EnableGroupingMenu(false)
                    )
                .BottomBar(Html.X().CustomPagingToolbar()),
                     Html.X().GridPanel()
                                .ID("grMnPhase")
                                .Region(Region.Center)
                                .MarginSpec("1 1 1 0")
                                .Border(true)
                                .TopBar(
                                Html.X().Toolbar()
                                .Layout(LayoutType.HBox)
                                .Items(
                                Html.X().Button()
                                    .Disabled(true)
                                        .Icon(Icon.Zoom)
                                        .Text("Xem chi tiết")
                                        .ID("btnDetailPlanChiled")
                                                .Handler("ViewDetailViewChildrend();")
                                    .Disabled(true),
                                    Html.X().ToolbarSeparator(),
                                Html.X().ButtonTask()
                                        .UrlSubmit(urlSubmitTask)
                                        .UrlStore(urlStoreTask).ParamStore(paramStoreTask).AddWindowTask()
                                        .Text("Giao việc")
                                        .Disabled(true)
                                        .ID("btnTask"),
                                            Html.X().ToolbarFill(),
                                                                 Html.X().ButtonTutorial()
                                )
                        )
                            .Store(Html.X().Store()
                                    .ID("stMnPhase")
                                    .AutoLoad(false)
                                    .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("GetDataIsChoise", "PlanStage"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                    )
                                    .Parameters(ps =>
                                    {
                                        ps.Add(new StoreParameter("commandId", "App.grPlan.selModel.getSelection().length>0?App.grPlan.selModel.getSelection()[0].get('ServiceCommandID'):0", ParameterMode.Raw));
                                        ps.Add(new StoreParameter("parentId", "App.grPlan.selModel.getSelection().length>0?App.grPlan.selModel.getSelection()[0].get('ID'):0", ParameterMode.Raw));
                                    })
                                    .RemoteSort(true)
                                    .AutoLoad(true)
                                    .RemotePaging(true)
                                    .PageSize(20)
                                    .GroupField("CustomerName")
                                    .Sorters(Html.X().DataSorter().Property("CustomerName").Direction(Ext.Net.SortDirection.ASC))
                                  
                                   .Model(
                            Html.X().Model().Fields(
                                Html.X().ModelField().Name("ID"),
                                Html.X().ModelField().Name("CustomerName"),                                
                                Html.X().ModelField().Name("Name"),
                                Html.X().ModelField().Name("StartTime"),
                                Html.X().ModelField().Name("EndTime"),
                                Html.X().ModelField().Name("Cost"),
                                Html.X().ModelField().Name("IsEdit"),
                                Html.X().ModelField().Name("IsAccept"),
                                Html.X().ModelField().Name("RateFinish"),                                
                                Html.X().ModelField().Name("IsApproval")
                            )
                         )
                )
                .ColumnModel(
                                Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                 Html.X().Column().DataIndex("Name").Text("Công đoạn").Width(300).Flex(1),
                                 Html.X().ComponentColumn().Text("Thời gian thực hiện").Columns(
                                 Html.X().DateColumnExtend().DataIndex("StartTime").Format("dd/MM/yyyy").Text("Bắt đầu").Width(80).Align(Alignment.Center),
                                 Html.X().DateColumnExtend().DataIndex("EndTime").Format("dd/MM/yyyy").Text("Kết thúc").Width(80).Align(Alignment.Center)),
                                 Html.X().ComponentColumn().Text("Chi phí").Columns(
                                 Html.X().NumberColumn().DataIndex("Cost").Text("Giá trị").Width(70).Align(Alignment.Right),
                                 Html.X().Column().Renderer("return 'VNĐ';").Text("Đơn vị").Width(50).Align(Alignment.Center)),
                                  Html.X().ComponentColumn()
                                .Text("Tiến độ")
                                .StyleSpec("font-weight: bold; text-align: center;")
                                .Component(Html.X().ProgressBar().Text("%"))
                                    .Listeners(ls => ls.Bind.Handler = "cmp.updateProgress(record.get('RateFinish')/100, record.get('RateFinish') + '%');")   
                                                

                            ).SelectionModel(
                                Html.X().RowSelectionModel()
                                        .Mode(SelectionMode.Multi)
                                        .Listeners(l =>
                                        {
                                            l.Select.Handler = "CheckStatus();";
                                        })
                                        )
                                          .View(
                                        Html.X().GridView().MarkDirty(false)
                                        )
                                            .Features(
                                Html.X().GroupingSummary()
                                .ShowSummaryRow(false)
                                .ID("GroupingSummary")
                                .GroupHeaderTplString("{name}")
                                .HideGroupedHeader(true)
                                .EnableGroupingMenu(false)
                        )

                                       
            .BottomBar(
                        Html.X().CustomPagingToolbar()
        )
       )
)
<script type="text/javascript">
    var onSpecialKey = function (field, e) {
        if (e.getKey() === e.ENTER) {
            App.grPlan.getStore().load();
            e.stopEvent();
        }
    };
    var getPlanId = function () {
        var planId = 0;
        var records = App.grMnPhase.selModel.getSelection();
        if (records.length > 0) {
            planId = records[0].get('ID');
        }
        return planId;
    }
    var checkPlanStatus = function () {
        var records = App.grPlan.selModel.getSelection();
        switch (records.length) {
            case 0:
                App.btnDetailPlan.setDisabled(true);
                break;
            case 1:
                App.btnDetailPlan.setDisabled(false);
                break;
            default:
                App.btnDetailPlan.setDisabled(true);
        }

    };
    var CheckStatus = function () {
        var records = App.grMnPhase.selModel.getSelection();
        switch (records.length) {
            case 0:
                App.btnTask.setDisabled(true);
                App.btnDetailPlanChiled.setDisabled(true);

                break;
            case 1:
                App.btnTask.setDisabled(false);
                App.btnDetailPlanChiled.setDisabled(false);

                break;
            default:
                App.btnTask.setDisabled(true);
                App.btnDetailPlanChiled.setDisabled(true);
                break;
        }
    };
    var ViewDetailViewChildrend = function () {
        var records = App.grMnPhase.selModel.getSelection();
        var record = App.grPlan.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmViewPlanDetail", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    commandId: record[0].get('ServiceCommandID')
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            MessageBox();
        }
    };

    var ViewDetail = function () {
        var records = App.grPlan.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            var serviceId = records[0].get('ServiceID');
            var planId = records[0].get('PlanID');
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("DetailForm", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    commandId: records[0].get('ServiceCommandID')
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn chưa chọn bản ghi nào?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Information',
                fn: function (btn) {
                    return false;
                }
            });
        };
    };
    var showTaskChange = function (grid) {
        TaskGridPanel = grid;
        var taskId = getTaskId();
        if (taskId != 0) {
            var url = '@(Url.Action("ChangeVoteList", "Change", new { Area = "Task" }))';
            var params = { taskId: taskId };
            onDirectMethod(url, params);
        }
    };
    var showTaskDetail = function (grid) {
        TaskGridPanel = grid;
        var taskId = getTaskId();
        if (taskId != 0) {
            var url = '@(Url.Action("DetailWindow", "Task", new { Area = "Task" }))';
            var params = { taskId: getTaskId() };
            onDirectMethod(url, params);
        }
    };
    var showTaskPerform = function (grid) {
        TaskGridPanel = grid;
        var taskId = getTaskId();
        if (taskId != 0) {
            var url = '@(Url.Action("ViewPerforms", "Perform", new { Area = "Task" }))';
            var params = { taskId: taskId };
            onDirectMethod(url, params);
        }
    };
    var showTaskCheck = function (grid) {
        TaskGridPanel = grid;
        var taskId = getTaskId();
        if (taskId != 0) {
            var url = '@(Url.Action("ViewChecks", "Check", new { Area = "Task" }))';
            var params = { taskId: taskId };
            onDirectMethod(url, params);
        }
    };
    var showTaskPause = function (grid) {
        TaskGridPanel = grid;
        var taskId = getTaskId();
        if (taskId == 0) {
            Ext.MessageBox.show({
                title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    App.btnUpdate.setDisabled(true);
                    App.btnDelete.setDisabled(true);
                    return false;
                }
            });
        }
        else {
            var stringProcess = "tạm dừng";
            if (TaskGridPanel.selModel.getSelection()[0].get('Task.IsPause')) {
                stringProcess = "khởi động";
            }
            Ext.MessageBox.show({
                title: 'Xác nhận', msg: 'Bạn có chắc chắn muốn ' + stringProcess + ' công việc này không?',
                buttons: { yes: 'Đồng ý', no: 'Không' },
                iconCls: '#Information',
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("PauseTaskTrue", "Task", new { Area = "Task" }, null))',
                            params: { taskId: taskId },
                            success: function (result) {
                                TaskGridPanel.getStore().reload();
                            }
                        });
                    }
                }
            });

        }
    };
    var getTaskId = function () {
        var taskId = 0;
        var records = TaskGridPanel.selModel.getSelection();
        if (records.length > 0) {
            taskId = records[0].get('Task.ID');
        }
        else {
            Ext.MessageBox.show({ title: 'Thông báo', msg: 'Chưa có Công việc nào được chọn!', buttons: { yes: 'Đồng ý' }, iconCls: '#Information' });
        }
        return taskId;
    };
    var getColor = function (obj, store) {
        var id = obj.getValue();
        var record = store.getById(id);
        if (record != null) {
            var color = record.get('Color');
            obj.setFieldStyle('text-align: center; background-image: none; background-color: ' + color + ';');
        }
        else {
            return false;
        }
    };
</script>
