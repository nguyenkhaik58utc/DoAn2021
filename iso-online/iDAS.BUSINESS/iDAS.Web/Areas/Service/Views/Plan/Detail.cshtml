@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.ServicePlanItem
@{
    var X = Html.X();
    var commandId = ViewData["commandId"] != null ? ViewData["commandId"].ToString() : "0";
    var parentId = ViewData["parentId"] != null ? ViewData["parentId"].ToString() : "0";
}
@(Html.X().Window()
        .ID("winEditPlan")
        .Title("Xem chi tiết kế hoạch cung cấp dịch vụ")
        .Icon(Icon.Zoom)
        .Width(800)
        .Height(505)
        .Maximizable(true)
        .Layout(LayoutType.Fit)
        .Constrain(true)
        .Modal(true)
        .BodyPadding(0)
             .Border(false)
          .Items(
                   Html.X().TabPanel()
                .ActiveTabIndex(0)
                .Border(true)
                .Items(Html.X().Panel()
                    .BodyPadding(6)
                    .Icon(Icon.ApplicationViewDetail)
                    .Layout(LayoutType.Fit)                    
                    .StyleSpec("border: none;")
                    .Title("Thông tin chính")
                    .Frame(true)
                    .Items(
        Html.X().FormPanel()
                .ID("frmEditPlan")
                        .Layout(LayoutType.VBox)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Frame(true)
                        .StyleSpec("border: none;")
                        .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
                .Items(
                        Html.X().HiddenFor(m => m.ID).ReadOnly(true),
                        X.TextFieldFor(m => m.Name).EmptyText("Nhập tên kế hoạch ...").FieldLabel("Tên kế hoạch" ).AllowBlank(false).ReadOnly(true),
                            X.ComboBoxFor(m => m.ServiceCommandContractID).FieldLabel("Hợp đồng").EmptyText("Chọn hợp đồng ...")
                                            .ID("cbxContractID")
                                        .QueryMode(DataLoadMode.Local).Editable(false)
                                        .ForceSelection(true)
                                                       .ReadOnly(true)
                                            .DisplayField("ContractName")
                                        .ValueField("ID")
                                        .Store(Html.X().Store()
                                                    .AutoLoad(true)
                                                         .Parameters(ps =>
                                                                    {
                                                                        ps.Add(new StoreParameter("commandId", commandId, ParameterMode.Raw));
                                                                    })
                                                    .Model(Html.X().Model()
                                                            .IDProperty("ID")
                                                            .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                                                new ModelField("ContractName", ModelFieldType.String) { Mapping = "ContractName" }))
                                                    .Proxy(Html.X().AjaxProxy()
                                                                .Url(Url.Action("GetDataContract", "Plan", new { area = "Service" }))
                                                            .Reader(Html.X().JsonReader().Root("data")))),
                    Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 -2 2 0")
                        .Items(
                                        Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu" ).ReadOnly(true).AllowBlank(false).ColumnWidth(0.55),
                                            Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc" ).ReadOnly(true).AllowBlank(false).LabelWidth(70).MarginSpec("0 0 0 5").ColumnWidth(0.45)
                            ),
                    X.Container().Layout(LayoutType.Column).MarginSpec("2 -1 4 0")
                        .Items(
                            X.ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch" )
                                    .EmptyText("Chọn loại kế hoạch")
                                    .Items(new ListItem("Tổ chức", false),
                                                new ListItem("Cá nhân", true)).ReadOnly(true)
                                    .AllowBlank(false).ColumnWidth(0.55),
                            X.NumberFieldFor(m => m.Cost).AllowBlank(false)
                                        .LabelWidth(70)
                                        .ColumnWidth(0.45)
                                        .MinValue(0)
                                        .MarginSpec("0 0 0 5")
                                        .FieldLabel("Chi phí" ).ReadOnly(true)
                        ),
                        X.DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban").ReadOnly(true).AllowBlank(false).Height(25),
                        X.ComboBoxFor(m => m.TargetID).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...").ReadOnly(true)
                        .ID("cbxTarget")
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .ForceSelection(true)
                        .DisplayField("TargetName")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                    .AutoLoad(true)
                                    .Model(Html.X().Model()
                                            .IDProperty("ID")
                                            .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                    new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                                    .Proxy(Html.X().AjaxProxy()
                                            .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                                            .Reader(Html.X().JsonReader().Root("data"))))
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit)),
                        X.ComboBoxFor(m => m.ParentID).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...").ReadOnly(true)
                        .ID("cbxParentPlan")
                        .Hidden(true)
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .ForceSelection(true)
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                        .IDProperty("ID")
                                        .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                                                    .Reader(Html.X().JsonReader().Root("data"))))
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit)),
                        X.TextAreaFor(m => m.Content).FieldLabel("Nội dung").EmptyText("Nhập nội dung kế hoạch").ReadOnly(true).Flex(1),
                              Html.X().EmployeeFieldFor(m => m.Approval).ReadOnly(true)
                                                               .MarginSpec("-2 0 0 105")
                                                               .Title("Người phê duyệt")
                )),
                 Html.X().Panel()
                            .Icon(Icon.ApplicationViewDetail)
                            .Border(false)
                            .BodyPadding(0)
                            .Padding(0)
                            .Margin(0)
                            .StyleSpec("border:none")
                            .Frame(true)
                            .AutoScroll(true)
                            .Title("Kế hoạch chi tiết")
                            .Layout(LayoutType.Fit)
                            .Items(
                                Html.X().GridPanel()
                    .Header(false)
                    .Border(false)
                    .ID("grMnPlanView")
                    .ColumnLines(true)
                    .ForceFit(true)
                    .TopBar(
                        Html.X().Toolbar()
                        .Layout(LayoutType.HBox)
                        .Items(
                                            Html.X().Button().ToolTip("Xem chi tiết").ID("btnDetailView").Icon(Icon.Zoom).Text("Xem chi tiết").Handler("ViewDetailView();").Disabled(true),

                            Html.X().ToolbarFill()
                        )
                )
                .Store(
                    Html.X().Store()
                                .ID("StorePlanInsert")
                        .RemotePaging(true)
                        .AutoLoad(true)
                        .PageSize(20)
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetDataByParent", "Plan", new { Area = "Service" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("serviceCommandContractID", Model.ServiceCommandContractID.ToString(), ParameterMode.Raw));
                                ps.Add(new StoreParameter("parentId", parentId, ParameterMode.Raw));
                            })
                        .Model(
                            Html.X().Model().Fields(
                                Html.X().ModelField().Name("ID"),
                                Html.X().ModelField().Name("PlanID"),
                                Html.X().ModelField().Name("Name"),
                                Html.X().ModelField().Name("StartTime"),
                                Html.X().ModelField().Name("EndTime"),
                                Html.X().ModelField().Name("Cost"),
                                Html.X().ModelField().Name("IsEdit"),
                                Html.X().ModelField().Name("IsAccept"),
                                Html.X().ModelField().Name("IsApproval")
                            )
                         )
                )
                .ColumnModel(
                            X.RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                            X.Column().DataIndex("Name").Text("Công đoạn").Width(300).Flex(1),
                            X.ComponentColumn().Text("Thời gian thực hiện").Columns(
                            X.DateColumnExtend().DataIndex("StartTime").Format("dd/MM/yyyy").Text("Bắt đầu").Width(80).Align(Alignment.Center),
                            X.DateColumnExtend().DataIndex("EndTime").Format("dd/MM/yyyy").Text("Kết thúc").Width(80).Align(Alignment.Center)),
                            X.ComponentColumn().Text("Chi phí").Columns(
                            X.NumberColumn().DataIndex("Cost").Text("Giá trị").Width(70).Align(Alignment.Right),
                            X.Column().Renderer("return 'VNĐ';").Text("Đơn vị").Width(50).Align(Alignment.Center))
                    )
                .SelectionModel(Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false).Mode(SelectionMode.Single)
                                .Listeners(ls => ls.SelectionChange.Fn = "CheckStatusView"))
                .BottomBar(
                       X.CustomPagingToolbar()
                  )
                 )
                )
                )
        .Buttons(
                Html.X().ButtonExit()
                )
)
<script>
    function CheckStatusView() {
        var records = App.grMnPlanView.selModel.getSelection();
        if (records.length == 1) {
            App.btnDetailView.setDisabled(false);
        }
        else {
            App.btnDetailView.setDisabled(true);
        };
    };
    var ViewDetailView = function () {
        var records = App.grMnPlanView.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmViewPlanDetail", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    commandId: '@(commandId)'
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            MessageBox();
        }
    };
</script>