@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.ServicePlanItem
@{
    var X = Html.X();
    var commandId = ViewData["commandId"] != null ? ViewData["commandId"].ToString() : "0";
    var parentId = ViewData["parentId"] != null ? ViewData["parentId"].ToString() : "0";
}
@(Html.X().Window()
        .ID("winEditPlan")
        .Title("Sửa kế hoạch cung cấp dịch vụ")
        .Icon(Icon.Pencil)
        .Width(800)
        .Height(505)
        .Maximizable(true)
        .Layout(LayoutType.Fit)
        .Constrain(true)
        .Modal(true)
        .BodyPadding(0)
        .Border(false)
        .Items(
Html.X().TabPanel()
        .ActiveTabIndex(0)
        .Border(true)
        .Items(Html.X().Panel()
        .BodyPadding(6)
        .Icon(Icon.ApplicationViewDetail)
        .Layout(LayoutType.Fit)     
        .StyleSpec("border: none;")
        .Title("Thông tin chính")
        .Frame(true)
        .Items(
Html.X().FormPanel()
        .ID("frmEditPlan")
        .Layout(LayoutType.VBox)
        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Frame(true)
        .StyleSpec("border: none;")
        .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
        .Items(
        Html.X().HiddenFor(m => m.ID),
        Html.X().HiddenFor(m => m.ParentID),
        Html.X().HiddenFor(m => m.ServicePlanID),
        Html.X().HiddenFor(m => m.CustomerID),
        X.TextFieldFor(m => m.Name).EmptyText("Nhập tên kế hoạch ...").FieldLabel("Tên kế hoạch" + Html.Required()).AllowBlank(false),
        X.ComboBoxFor(m => m.ServiceCommandContractID).FieldLabel("Hợp đồng" + Html.Required()).EmptyText("Chọn hợp đồng ...")
        .ID("cbxContractID")
        .AllowBlank(false)
        .ReadOnly(true)
        .QueryMode(DataLoadMode.Local).Editable(false)
        .ForceSelection(true)
        .DisplayField("ContractName")
        .ValueField("ID")
        .Store(Html.X().Store()
        .AutoLoad(true)
        .Parameters(ps =>
        {
            ps.Add(new StoreParameter("commandId", commandId, ParameterMode.Raw));
        })
        .Model(Html.X().Model()
        .IDProperty("ID")
        .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
        new ModelField("ContractName", ModelFieldType.String) { Mapping = "ContractName" }))
        .Proxy(Html.X().AjaxProxy()
        .Url(Url.Action("GetDataContract", "Plan", new { area = "Service" }))
        .Reader(Html.X().JsonReader().Root("data")))),
        Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 -2 2 0")
        .Items(
        Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu" + Html.Required()).AllowBlank(false).ColumnWidth(0.55),
        Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc" + Html.Required()).AllowBlank(false).LabelWidth(70).MarginSpec("0 0 0 5").ColumnWidth(0.45)
),
X.Container().Layout(LayoutType.Column).MarginSpec("2 -1 4 0")
            .Items(
            X.ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch" + Html.Required())
            .EmptyText("Chọn loại kế hoạch")
            .Items(new ListItem("Tổ chức", false),
            new ListItem("Cá nhân", true))
            .AllowBlank(false).ColumnWidth(0.55),
            X.NumberFieldFor(m => m.Cost).AllowBlank(false)
            .LabelWidth(70).ColumnWidth(0.45).MinValue(0).MarginSpec("0 0 0 5")
            .FieldLabel("Chi phí" + Html.Required())
            ),
X.DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).Multiple(false).AllowBlank(false).Height(25),
X.ComboBoxFor(m => m.TargetID).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...")
                .ID("cbxTarget")
                .HideBaseTrigger(true)
                .QueryMode(DataLoadMode.Local).Editable(false)
                .DisplayField("TargetName")            
                .ValueField("ID")
                .Store(Html.X().Store()
                .AutoLoad(true)
                .Model(Html.X().Model()
                .IDProperty("ID")
                .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                .Proxy(Html.X().AjaxProxy()
                .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                .Reader(Html.X().JsonReader().Root("data"))))
                .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                .Listeners(ls => { ls.TriggerClick.Fn = "showTarget"; }),
                X.ComboBoxFor(m => m.ParentID).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...")
                .ID("cbxParentPlan")
                .Hidden(true)
                .QueryMode(DataLoadMode.Local).Editable(false)
                .ForceSelection(true)
                .DisplayField("Name")
                .ValueField("ID")
                .Store(Html.X().Store()
                .AutoLoad(true)
                .Model(Html.X().Model()
                .IDProperty("ID")
                .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                .Proxy(Html.X().AjaxProxy()
                .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                .Reader(Html.X().JsonReader().Root("data"))))
                .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                .Listeners(ls => { ls.TriggerClick.Fn = "showParentPlan"; }),
                X.TextAreaFor(m => m.Content).FieldLabel("Nội dung").EmptyText("Nhập nội dung kế hoạch").Flex(1),
                Html.X().EmployeeFieldFor(m => m.Approval)
                .MarginSpec("-2 0 0 105")
                .Title("Người phê duyệt" + Html.Required()))
                ),
                Html.X().Panel()
                .Icon(Icon.ApplicationViewDetail)
                .Border(false)
                .BodyPadding(0)
                .Padding(0)
                .Margin(0)
                .StyleSpec("border:none")
                .Frame(true)
                .AutoScroll(true)
                .Title("Kế hoạch chi tiết")
                .Layout(LayoutType.Fit)
                .Items(
                Html.X().GridPanel()
                .Header(false)
                .Border(false)
                .ID("grMnPlanUpdate")
                .ColumnLines(true)
                .ForceFit(true)
                .TopBar(
                Html.X().Toolbar()
                .Layout(LayoutType.HBox)
                .Items(
                Html.X().Button().ID("btnAddPlanUpdate").Icon(Icon.Add).Text("Thêm mới").Handler("AddNewDetailUpdate();"),
                Html.X().ToolbarSeparator(),
                Html.X().Button().ID("btnUpdateUpdate").Handler("UpdateItemUpdate();").Text("Sửa").Icon(Icon.Pencil).Disabled(true),
                Html.X().ToolbarSeparator(),
                Html.X().Button().Icon(Icon.Delete).ID("btnDeleteUpdate").Text("Xóa").Handler("deletePlanDetail(this.up('gridpanel'));").Disabled(true),
                Html.X().ToolbarSeparator(),
                Html.X().Button().ToolTip("Xem chi tiết").ID("btnDetailUpdate").Icon(Icon.Zoom).Text("Xem chi tiết").Handler("ViewDetailUpdate();").Disabled(true),

                Html.X().ToolbarFill()
)
)
                .Store(
                Html.X().Store()
                .ID("StorePlanInsert")
                .RemotePaging(true)
                .AutoLoad(true)
                .PageSize(20)
                .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetDataByParent", "Plan", new { Area = "Service" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                .Parameters(ps =>
                {
                    ps.Add(new StoreParameter("serviceCommandContractID", Model.ServiceCommandContractID.ToString(), ParameterMode.Value));
                    ps.Add(new StoreParameter("parentId", parentId, ParameterMode.Raw));
                })
                .Model(
                Html.X().Model().Fields(
                Html.X().ModelField().Name("ID"),
                Html.X().ModelField().Name("PlanID"),
                Html.X().ModelField().Name("Name"),
                Html.X().ModelField().Name("StartTime"),
                Html.X().ModelField().Name("EndTime"),
                Html.X().ModelField().Name("Cost"),
                Html.X().ModelField().Name("IsEdit"),
                Html.X().ModelField().Name("IsAccept"),
                Html.X().ModelField().Name("IsApproval")
                )
                )
                )
                .ColumnModel(
                X.RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                X.Column().DataIndex("Name").Text("Công đoạn").Width(300).Flex(1),
                X.ComponentColumn().Text("Thời gian thực hiện").Columns(
                X.DateColumnExtend().DataIndex("StartTime").Format("dd/MM/yyyy").Text("Bắt đầu").Width(80).Align(Alignment.Center),
                X.DateColumnExtend().DataIndex("EndTime").Format("dd/MM/yyyy").Text("Kết thúc").Width(80).Align(Alignment.Center)),
                X.ComponentColumn().Text("Chi phí").Columns(
                X.NumberColumn().DataIndex("Cost").Text("Giá trị").Width(70).Align(Alignment.Right),
                X.Column().Renderer("return 'VNĐ';").Text("Đơn vị").Width(50).Align(Alignment.Center))
                )
                .SelectionModel(Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false).Mode(SelectionMode.Single)
                .Listeners(ls => ls.SelectionChange.Fn = "CheckStatusUpdate"))
                .BottomBar(
                X.CustomPagingToolbar()
                )
                )
                )
                )
        .Buttons(
Html.X().ButtonSave()
.ID("btnSave")
.DirectEvents(de =>
{
    de.Click.ExtraParams.Add(new { val = false });
    de.Click.Before = @"if (!App.frmEditPlan.getForm().isValid()) { return false; } ";
    de.Click.Action = "Update";
    de.Click.ExtraParams.Add(new { IsEdit = true });
    de.Click.ExtraParams.Add(new { IsApproval = false });
    de.Click.FormID = "frmEditPlan";
    de.Click.Success = "this.up('window').close();";
}),
Html.X().ButtonExit()
)
)
<script>
    var deletePlanDetail = function (grid) {
        var records = grid.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Exclamation',
                    fn: function (btn) {
                        App.btnUpdate.setDisabled(true);
                        App.btnDelete.setDisabled(true);
                        return false;
                    }
                });
                break;
            default:
                var label = '';
                if (records.length > 1) { label = ' các '; } else { label = ' '; }
                Ext.MessageBox.show({
                    title: 'Xác nhận', msg: 'Bạn có chắc chắn muốn xóa' + label + 'Bản ghi đã chọn không?',
                    buttons: { yes: 'Đồng ý', no: 'Không' },
                    iconCls: '#Information',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("DeleteDetail", "Plan", new { Area = "Service" }, null))',
                                params: { id: records[0].get('ID') }
                            });
                        }
                    }
                });
                break;
        }
    };
    function CheckStatusUpdate() {
        var records = App.grMnPlanUpdate.selModel.getSelection();
        if (records.length == 1) {
            App.btnDetailUpdate.setDisabled(false);
            App.btnUpdateUpdate.setDisabled(false);
            App.btnDeleteUpdate.setDisabled(false);
        }
        else {
            App.btnDetailUpdate.setDisabled(true);
            App.btnDeleteUpdate.setDisabled(true);
            App.btnUpdateUpdate.setDisabled(true);
        };
    };
    var UpdateItemUpdate = function () {
        var records = App.grMnPlanUpdate.selModel.getSelection();
        var record = App.grCommand.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmUpdatePlanDetail", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    commandId: record[0].get('ID')
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            MessageBox();
        }
    };
    var AddNewDetailUpdate = function () {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("AddNewPlanDetail", "Plan", new { Area = "Service" }, null))',
            params: { serviceCommandContractID: App.cbxContractID.getValue(), parentId: '@(parentId)' },
            success: function (result) {
                mask.hide();
            }
        });
    };
    var showTarget = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectTarget = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxTarget.setValue(parseInt(id));
            App.WinTarget.close();
        };
    };
    var showParentPlan = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadPlanPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var ViewDetailUpdate = function () {
        var records = App.grMnPlanUpdate.selModel.getSelection();
        var record = App.grCommand.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmViewPlanDetail", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    commandId: record[0].get('ID')
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            MessageBox();
        }
    };
</script>