@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.ServicePlanItem
@{
    var X = Html.X();
    SelectedRowCollection selectedRow = new SelectedRowCollection();
    selectedRow.Add(new SelectedRow(0));
    var selected = (SelectedRowCollection)selectedRow;
    var commandId = ViewData["commandId"] != null ? ViewData["commandId"].ToString() : "0";
    var parentId = ViewData["parentId"] != null ? ViewData["parentId"].ToString() : "0";
}
@(Html.X().Window()
          .ID("winViewPlanDetail")
          .Title("Xem nội dung chi tiết của kế hoạch")
          .Icon(Icon.Zoom)
          .Width(900)
          .Height(530)
          .Maximizable(true)
          .Maximizable(true)
          .Layout(LayoutType.VBox)
          .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
          .Constrain(true)
          .Modal(true)
          .BodyPadding(6)
          .Border(true)
          .Items(
                 Html.X().FieldSet()
                    .ID("panelDetailx")
                    .Title("Thông tin chi tiết")
                    .PaddingSpec("0 0 0 0")
                    .MarginSpec("0 1 0 1")
                    .Items(
            Html.X().FormPanel()
                    .ID("frmPlanDetail")
                    .Layout(LayoutType.VBox)
                    .Margin(0)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Frame(true)
                    .StyleSpec("border: none;")
                    .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
                    .Items(
                        Html.X().HiddenFor(m => m.ParentID).Value(parentId).ReadOnly(true),
                        Html.X().HiddenFor(m => m.ID).ID("hdPlanChilEdit").ReadOnly(true),
                        Html.X().HiddenFor(m => m.ServiceCommandContractID).ReadOnly(true),
                        Html.X().HiddenFor(m => m.ID).ID("planIdDetailNew").ReadOnly(true),
                                X.TextFieldFor(m => m.Name).ID("planNameDetail").MarginSpec("0 0 0 0").ReadOnly(true).EmptyText("Nhập tên tiêu đề...").FieldLabel("Tiêu đề" + Html.Required()).AllowBlank(false),
                        Html.X().Container().Layout(LayoutType.Column).MarginSpec("5 0 5 0")
                        .Items(
                        Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu" + Html.Required()).ReadOnly(true).AllowBlank(false).ColumnWidth(0.55).ID("planstTDetail").MarginSpec("0 5 0 0"),
                        Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc" + Html.Required()).ReadOnly(true).AllowBlank(false).LabelWidth(70).ColumnWidth(0.45).ID("planendTDetail")
                            ),
                        X.Container().Layout(LayoutType.Column).MarginSpec("0 0 5 0")
                        .Items(
                                X.ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch" + Html.Required()).ReadOnly(true)
                                            .EmptyText("Chọn loại kế hoạch").ID("plantypeDetail").MarginSpec("0 5 0 0")
                                            .Items(new ListItem("Tổ chức", false),
                                            new ListItem("Cá nhân", true))
                                            .AllowBlank(false).ColumnWidth(0.55),
                                X.NumberFieldFor(m => m.Cost).AllowBlank(false).ReadOnly(true)
                                            .ID("planCostDetail")
                                            .LabelWidth(70).ColumnWidth(0.45).MinValue(0)
                                            .FieldLabel("Chi phí" + Html.Required())
                            ),
                        X.DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).ReadOnly(true).AllowBlank(false).Height(25).ID("planDepDetail").MarginSpec("0 0 0 0"),
                        X.Container().Layout(LayoutType.Column).MarginSpec("3 0 5 0")
                        .Items(
                        X.ComboBoxFor(m => m.TargetID).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...").ReadOnly(true)
                        .ID("plantargetDetail")
                        .ColumnWidth(0.55)
                        .MarginSpec("0 5 0 0")
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .ForceSelection(true)
                        .DisplayField("TargetName")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                    .AutoLoad(true)
                                    .Model(Html.X().Model()
                                            .IDProperty("ID")
                                            .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                    new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                                    .Proxy(Html.X().AjaxProxy()
                                            .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                                            .Reader(Html.X().JsonReader().Root("data"))))
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit)),
                        X.ComboBoxFor(m => m.ParentID).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...").ReadOnly(true)
                        .ID("cbxParentPlanDetail")
                        .ColumnWidth(0.45)
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .ForceSelection(true)
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                        .IDProperty("ID")
                                        .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                                                    .Reader(Html.X().JsonReader().Root("data"))))
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                        .ReadOnly(true)),
                        X.TextFieldFor(m => m.Content).FieldLabel("Nội dung").EmptyText("Nhập nội dung chi tiết của công đoạn").ID("contentInsertPlanDetail").Flex(1)
                        )
                ),
                 Html.X().FieldSet()
                        .ID("penlcTDetailx")
                        .Frame(true)
                        .AutoScroll(true)
                        .MarginSpec("0 1 0 1")
                        .Height(265)
                        .Flex(1)
                        .PaddingSpec("0 0 0 0")
                        .Title("Lựa chọn công đoạn thực hiện")
                        .Layout(LayoutType.Border)
                        .Items(
                   Html.X().GridPanel()
                        .Width(300)
                        .Region(Region.West)
                        .Height(250)
                        .Header(false)
                        .Margin(1)
                        .ID("grContractEdit")
                        .ColumnLines(true)
                        .ForceFit(true)
                        .Store(
                    Html.X().Store()
                        .ID("StoreContractEdit")
                        .RemotePaging(true)
                        .AutoLoad(true)
                        .PageSize(20)
                        .GroupField("CommandName")
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetDataContractDetail", "Plan", new { Area = "Service" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                        .Parameters(ps =>
                            {
                             ps.Add(new StoreParameter("serviceCommandContractID", Model.ServiceCommandContractID.ToString(), ParameterMode.Raw));
                            })
                        .Model(
                        Html.X().Model().Fields(
                            Html.X().ModelField().Name("ID"),
                            Html.X().ModelField().Name("ContractID"),
                            Html.X().ModelField().Name("CustomerID"),
                            Html.X().ModelField().Name("ContractName"),
                            Html.X().ModelField().Name("CommandName"),
                            Html.X().ModelField().Name("CustomerName")
                        )
                    )
                )
                .ColumnModel(
                                X.Column().DataIndex("ContractName").Text("Hợp đồng").Width(300)
                    )
                    .View(Html.X().GridView().StripeRows(false))
                    .SelectionModel(Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false).RowSpan(2).SelectedRows(rows => rows.AddRange(selected))).Listeners(ls => ls.SelectionChange.Handler = "App.StorePlanInsertPlanDetail.reload();")
                    .Features(
                Html.X().Grouping()
                        .HideGroupedHeader(true)
                        .GroupHeaderTplString("{name}"),

                Html.X().RowBody().GetAdditionalData("getAdditionalData"),
                Html.X().RowWrap()
                ),
                Html.X().GridPanel()
                        .Region(Region.Center)
                        .Height(250)
                        .Margin(1)
                        .ID("grPlanInsertPlanDetail")
                        .ColumnLines(true)
                        .ForceFit(true)
                        .Store(
                        Html.X().Store()
                            .ID("StorePlanInsertPlanDetail")
                            .RemotePaging(true)
                            .AutoLoad(false)
                            .PageSize(1000)
                            .GroupField("ServiceName")
                            .Sorters(Html.X().DataSorter().Property("ServiceName").Direction(Ext.Net.SortDirection.ASC))
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetDataServiceStageForDetail", "Plan", new { Area = "Service" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                            .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("contractId", "App.grContractEdit.selModel.getSelection().length>0?App.grContractEdit.selModel.getSelection()[0].get('ContractID'):0", ParameterMode.Raw));
                                    ps.Add(new StoreParameter("customerId", "App.grContractEdit.selModel.getSelection().length>0?App.grContractEdit.selModel.getSelection()[0].get('CustomerID'):0", ParameterMode.Raw));
                                    ps.Add(new StoreParameter("servicePlanId", Model.ServicePlanID.ToString(), ParameterMode.Raw));
                                })
                            .Model(
                                    Html.X().Model().Fields(
                                    Html.X().ModelField().Name("ID"),
                                    Html.X().ModelField().Name("Name"),
                                    Html.X().ModelField().Name("ServiceName"),
                                    Html.X().ModelField().Name("IsSelected")
                                    )
                                 )
                        )
                        .ColumnModel(
                                    X.RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                    X.Column().DataIndex("Name").Text("Công đoạn").Width(300).Flex(1),
                                Html.X().CheckColumn().DataIndex("IsSelected")
                                    .Text("Chọn").Align(Alignment.Center).Editable(false)
                                    .Width(60)
                            )
                    .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                    .Listeners(ls => ls.SelectionChange.Fn = "CheckStatus"))
                                        .Features(
                                        Html.X().GroupingSummary()
                                        .ShowSummaryRow(false)
                                        .ID("GroupingSummarys")
                                        .GroupHeaderTplString("{name}")
                                        .HideGroupedHeader(true)
                                        .EnableGroupingMenu(false)
                                )

                    //.BottomBar
                    //(
                    //        Html.X().CustomPagingToolbar()
                    //)

                )
                )
        .Buttons(
                Html.X().ButtonExit()
                )
)
<script>
    var getAdditionalData = function (data, idx, record, orig) {
        return {
            rowBodyColspan: record.fields.getCount(),
            rowBody: Ext.String.format('<div style=\'padding:0 5px 5px 0px;\'><b>Khách hàng: {0}</b></div>', data.CustomerName)
        };
    };
</script>