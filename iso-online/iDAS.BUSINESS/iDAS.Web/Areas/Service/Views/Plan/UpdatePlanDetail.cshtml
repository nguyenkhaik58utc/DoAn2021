@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.ServicePlanItem
@{
    var X = Html.X();
    SelectedRowCollection selectedRow = new SelectedRowCollection();
    selectedRow.Add(new SelectedRow(0));
    var selected = (SelectedRowCollection)selectedRow;
}
@(Html.X().Window()
            .ID("winNewPlanDetail")
            .Title("Sửa nội dung chi tiết của kế hoạch")
            .Icon(Icon.Pencil)
            .Width(900)
            .Height(530)
            .Maximizable(true)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
            .Constrain(true)
            .Modal(true)
            .BodyPadding(6)
            .Border(true)
            .Items(
                 Html.X().FieldSet()
                    .ID("panelDetailx")
                    .Title("Thông tin chi tiết")
                    .PaddingSpec("0 0 0 0")
                    .MarginSpec("0 1 0 1")
                    .Items(
            Html.X().FormPanel()
                    .ID("frmPlanDetail")
                    .Layout(LayoutType.VBox)
                    .Margin(0)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Frame(true)
                    .StyleSpec("border: none;")
                    .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
                    .Items (
                Html.X().HiddenFor(m => m.ParentID),
                Html.X().HiddenFor(m=>m.ID).ID("hdPlanChilEdit"),
                Html.X().HiddenFor(m => m.ServicePlanID),
                Html.X().HiddenFor(m => m.ServiceCommandContractID),
                X.TextFieldFor(m => m.Name).ID("planNameDetail").MarginSpec("0 0 0 0").EmptyText("Nhập tên tiêu đề...").FieldLabel("Tiêu đề" + Html.Required()).AllowBlank(false),
                Html.X().Container().Layout(LayoutType.Column).MarginSpec("5 0 5 0")
                    .Items(
                        Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu" + Html.Required()).AllowBlank(false).ColumnWidth(0.55).ID("planstTDetail").MarginSpec("0 5 0 0"),
                        Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc" + Html.Required()).AllowBlank(false).LabelWidth(70).ColumnWidth(0.45).ID("planendTDetail")
                        ),
                     X.Container().Layout(LayoutType.Column).MarginSpec("0 0 5 0")
                    .Items(
                    X.ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch" + Html.Required())
                                    .EmptyText("Chọn loại kế hoạch").ID("plantypeDetail").MarginSpec("0 5 0 0")
                                    .Items(new ListItem("Tổ chức", false),
                                            new ListItem("Cá nhân", true))
                                    .AllowBlank(false).ColumnWidth(0.55),
                            X.NumberFieldFor(m => m.Cost).AllowBlank(false)
                                .ID("planCostDetail")
                                    .LabelWidth(70).ColumnWidth(0.45).MinValue(0)
                                    .FieldLabel("Chi phí" + Html.Required())
                                ),
                                X.DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).Multiple(false).AllowBlank(false).Height(25).MarginSpec("0 0 0 0"),
                                         X.Container().Layout(LayoutType.Column).MarginSpec("3 0 5 0")
                        .Items(
                        X.ComboBoxFor(m => m.TargetID).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...")
                        .ID("cbxTarget")
                            .ID("plantargetDetail")
                                .ColumnWidth(0.55)
                                .MarginSpec("0 5 0 0")
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .ForceSelection(true)
                        .DisplayField("TargetName")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                    .AutoLoad(true)
                                    .Model(Html.X().Model()
                                            .IDProperty("ID")
                                            .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                    new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                                    .Proxy(Html.X().AjaxProxy()
                                            .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                                            .Reader(Html.X().JsonReader().Root("data"))))
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                        .Listeners(ls => { ls.TriggerClick.Fn = "showTarget"; }),
                    X.ComboBoxFor(m => m.ParentID).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...")
                        .ID("cbxParentPlanDetail")
                        .ColumnWidth(0.45)                        
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .ForceSelection(true)
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                                .IDProperty("ID")
                                                .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                                                    .Reader(Html.X().JsonReader().Root("data"))))
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                        .ReadOnly(true)),
                        X.TextFieldFor(m => m.Content).FieldLabel("Nội dung").EmptyText("Nhập nội dung chi tiết của công đoạn").ID("contentInsertPlanDetail").Flex(1)
                        
                        )
                ),
                 Html.X().FieldSet()
                        .ID("penlcTDetailx")
                        .Frame(true)
                        .AutoScroll(true)
                        .MarginSpec("0 1 0 1")
                        .Height(265)
                        .Flex(1)
                        .PaddingSpec("0 0 0 0")
                        .Title("Lựa chọn công đoạn thực hiện")
                        .Layout(LayoutType.Border)
                        .Items(
                Html.X().GridPanel()
                     .Width(300)
                     .Region(Region.West)
                     .Height(250)
                     .Header(false)
                     .Margin(1)
                    .ID("grContractEdit")
                    .ColumnLines(true)
                    .ForceFit(true)
                .Store(
                    Html.X().Store()
                        .ID("StoreContractEdit")
                        .RemotePaging(true)
                        .AutoLoad(true)
                        .PageSize(20)
                        .GroupField("CommandName")
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetDataContractDetail", "Plan", new { Area = "Service" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                        .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("serviceCommandContractID", Model.ServiceCommandContractID.ToString(), ParameterMode.Raw));
                            })
                        .Model(
                            Html.X().Model().Fields(
                                Html.X().ModelField().Name("ID"),
                                      Html.X().ModelField().Name("ContractID"),
                                    Html.X().ModelField().Name("CustomerID"),
                                     Html.X().ModelField().Name("ContractName"),
                                                  Html.X().ModelField().Name("CommandName"),
                                          Html.X().ModelField().Name("CustomerName")
                            )
                         )
                )
                .ColumnModel(
                         X.Column().DataIndex("ContractName").Text("Hợp đồng").Width(300)                                              
                    )
                       .View(Html.X().GridView().StripeRows(false))
                                    .SelectionModel(Html.X().CheckboxSelectionModel().RowSpan(2).Mode(SelectionMode.Single).ShowHeaderCheckbox(false).SelectedRows(rows => rows.AddRange(selected))).Listeners(ls => ls.SelectionChange.Handler = "App.StorePlanInsertPlanDetail.reload();")
                   .Features(
                    Html.X().Grouping()
                        .HideGroupedHeader(true),
                    Html.X().RowBody().GetAdditionalData("getAdditionalData"),
                    Html.X().RowWrap()
                )
                       .Plugins(
                                                                Html.X().RowEditing()
                                                                .SaveBtnText("Cập nhật")
                                                                .CancelBtnText("Hủy bỏ")
                                                                    .Listeners(l =>
                                                                    {
                                                                        l.Edit.Fn = "onEditSelected";
                                                                        l.CancelEdit.Handler = "if(e.record.phantom){e.store.remove(e.record);}";
                                                                    })
                                                            ),
           
                   Html.X().GridPanel()
                        .Region(Region.Center)
                        .Height(250)
                        .Margin(1)
                        .ID("grPlanInsertPlanDetail")
                        .ColumnLines(true)
                        .ForceFit(true)
                    .Store(
                        Html.X().Store()
                            .ID("StorePlanInsertPlanDetail")
                            .RemotePaging(true)
                            .AutoLoad(false)
                            .PageSize(1000)
                            .GroupField("ServiceName")
                                            .Sorters(Html.X().DataSorter().Property("ServiceName").Direction(Ext.Net.SortDirection.ASC))
                             .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetDataServiceStage", "Plan", new { Area = "Service" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                                .Parameters(ps =>
                                    {
                                        ps.Add(new StoreParameter("contractId", "App.grContractEdit.selModel.getSelection().length>0?App.grContractEdit.selModel.getSelection()[0].get('ContractID'):0", ParameterMode.Raw));
                                        ps.Add(new StoreParameter("customerId", "App.grContractEdit.selModel.getSelection().length>0?App.grContractEdit.selModel.getSelection()[0].get('CustomerID'):0", ParameterMode.Raw));
                                        ps.Add(new StoreParameter("servicePlanId", Model.ServicePlanID.ToString(), ParameterMode.Raw));
                                    })
                                .Model(
                                    Html.X().Model().Fields(
                                        Html.X().ModelField().Name("ID"),
                                        Html.X().ModelField().Name("Name"),
                                        Html.X().ModelField().Name("ServiceName"),
                                        Html.X().ModelField().Name("IsSelected")
                                    )
                                 )
                        )
                        .ColumnModel(
                                    X.RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                    X.Column().DataIndex("Name").Text("Công đoạn").Width(300).Flex(1),
                                       Html.X().CheckColumn().DataIndex("IsSelected")
                                                               .Text("Chọn").Align(Alignment.Center).Editable(true)
                                                               .Listeners(ls => ls.CheckChange.Handler = "renderTitle()")
                                                               .Width(60)
                            )

                         .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
                                    .Listeners(ls => ls.SelectionChange.Fn = "CheckStatus"))
                                        .Features(
                                        Html.X().GroupingSummary()
                                        .ShowSummaryRow(false)
                                        .ID("GroupingSummarys")
                                        .GroupHeaderTplString("{name}")
                                        .HideGroupedHeader(true)
                                        .EnableGroupingMenu(false)
                                )
                       //.BottomBar
                       //      (
                       //  Html.X().CustomPagingToolbar()
                       //     )            

                        )
                    )
        .Buttons(
                Html.X().ButtonSave()
                .ID("btnSavePlanDetail")
                .DirectEvents(de =>
                {
                    de.Click.ExtraParams.Add(new { val = false });
                    de.Click.Before = @"if (!App.frmPlanDetail.getForm().isValid()) { return false; } ";
                    de.Click.Action = "UpdateByParent";
                    de.Click.ExtraParams.Add(new { strStageID = new JRawValue("getStageIDEdit()") });
                    de.Click.ExtraParams.Add(new { customerId = new JRawValue("App.grContractEdit.selModel.getSelection()[0].get('CustomerID')") });
                    de.Click.FormID = "frmPlanDetail";
                    de.Click.Success = "App.StorePlanInsert.reload(); this.up('window').close();";
                }),
                Html.X().ButtonExit()
                )
)
<script>
    var renderTitle = function () {
        var prKeys = '';
        var records = App.StorePlanInsertPlanDetail.getCount();
        if (records > 0) {
            var arrPrKey = new Array();
            for (var i = 0; i < records; i++) {
                var rec = App.grPlanInsertPlanDetail.getStore().getAt(i);
                if (rec.get('IsSelected')) {
                    arrPrKey[i] = rec.get('Name') + " của " + rec.get('ServiceName');
                }
            }
            prKeys = arrPrKey.filter(String).join(", ");
        }
        App.planNameDetail.setValue(prKeys);
    };
    var getStageIDEdit = function () {
        var prKeys = '';
        var records = App.StorePlanInsertPlanDetail.getCount();
        if (records > 0) {
            var arrPrKey = new Array();
            for (var i = 0; i < records; i++) {
                var rec = App.grPlanInsertPlanDetail.getStore().getAt(i);
                if (rec.get('IsSelected')) {
                    arrPrKey[i] = rec.get('ID');
                }
            }
            prKeys = arrPrKey.filter(String).join(",");
        }
        return prKeys;
    };
    var onEditSelected = function (editor, e) {
        var servicePlanId = '@Model.ServicePlanID';
        if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("InsertPlanStage", "PlanStage"))',
                params: {
                    data: e.record.data,
                    servicePlanId: servicePlanId,
                    customerId:App.grContractEdit.selModel.getSelection()[0].get('CustomerID')
                }
            });
        }
    };
    var getAdditionalData = function (data, idx, record, orig) {
        return {
            rowBodyColspan: record.fields.getCount(),
            rowBody: Ext.String.format('<div style=\'padding:0 5px 5px 0px;\'><b>Khách hàng: {0}</b></div>', data.CustomerName)
        };
    };
    var AddNewDetail = function ()
    {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("AddNewPlanDetail", "Plan", new { Area = "Service" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var showTarget = function () {
    var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
    mask.show();
    Ext.net.DirectMethod.request({
        url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
        success: function (result) {
            mask.hide();
        }
    });
    };
    var onSelectTarget = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxTarget.setValue(parseInt(id));
            App.WinTarget.close();
        };
    };
    var showParentPlan = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadPlanPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectPlan = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxParentPlan.setValue(parseInt(id));
            App.WinPlan.close();
        };

    };
</script>