@model System.Collections.IEnumerable
@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/FieldSet.css" rel="stylesheet" />
<script type="text/javascript" src="@Url.Content("~/Areas/Stock/Content/js/jsCommon.js")"></script>
<script type="text/javascript">
    var template = '<span title="Click để nhập số lượng kiểm kê" style="color:{0};">{1}</span>';
    var change = function (value) {
        var rs = value.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
        return Ext.String.format(template, (value > 0) ? "green" : "red", rs);
    };
    var NCShow = function (grid) {
        NCGridPanel = grid;
        var records = grid.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("NCShow", "Adjustment", new { Area = "Stock" }, null))';
            var params = {
                adjustmentId: records[0].get('ID')
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        };
        onDirectMethod(url, params);
    };
    var deleteRecord = function () {
        var records = App.gpAdjustmentDetail.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        App.btnDelete.setDisabled(true);
                        App.btnDetail.setDisabled(true);
                        return false;
                    }
                });
                break;
            default:
                Ext.MessageBox.show({
                    title: 'Xác nhận', msg: 'Bạn có chắc chắn muốn xóa phiếu kiểm kê đã chọn không?',
                    buttons: { yes: 'Đồng ý', no: 'Không' },
                    iconCls: '#Information',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var id = records[0].get('ID');
                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("Delete", "Adjustment", new { Area = "Stock" }, null))',
                                params: { id: id }
                            });
                        }
                    }
                });
                break;
        }
    };
    var totalQtyiff = function (value, p, record) {
        var value = record.get('NewQty') - record.get('CurrentQty');
        return value;
    };
    var RenderAmountVND = function (value, p, record) {
        var value1 = (record.get('NewQty') - record.get('CurrentQty')) * record.get('UnitPrice')
        if (value1 == null)
            return "";
        return value1.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,") + " VNĐ";
    };
    var totalCost = function (records) {
        var i = 0,
            length = records.length,
            total = 0,
            record;
        for (; i < length; ++i) {
            record = records[i];
            total += (record.get('NewQty') - record.get('CurrentQty')) * record.get('UnitPrice');
        }
        App.txtAmount.setValue(total);
        return total;
    };
    var applyFilter = function (field) {
        var store = App.gpAdjustment.getStore();
        store.filterBy(getRecordFilter());
    };
    var filterString = function (value, dataIndex, record) {
        var val = record.get(dataIndex);
        if (typeof val != "string") {
            return value.length == 0;
        }
        return val.toLowerCase().indexOf(value.toLowerCase()) > -1;
    };
    var filterDate = function (value, dataIndex, record) {
        var val = Ext.Date.clearTime(record.get(dataIndex), true).getTime();
        if (!Ext.isEmpty(value, false) && val != Ext.Date.clearTime(value, true).getTime()) {
            return false;
        }
        return true;
    };
    var filterNumber = function (value, dataIndex, record) {
        var val = record.get(dataIndex);

        if (!Ext.isEmpty(value, false) && val != value) {
            return false;
        }
        return true;
    };
    var filterBoolean = function (value, dataIndex, record) {
        var val = record.get(dataIndex);
        if (typeof val != "boolean") {
            return value.length == 0;
        }
        return val.toString().toLowerCase().indexOf(value.toString().toLowerCase()) > -1;
    };
    var getRecordFilter = function () {
        var f = [];
        f.push({
            filter: function (record) {
                return filterString(App.ftProduct_Code.getValue() || "", "Product_Code", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterString(App.ftProduct_Name.getValue() || "", "Product_Name", record);
            }
        });

        f.push({
            filter: function (record) {
                return filterString(App.ftUnit.getValue() || "", "Unit", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterNumber(App.ftCurrentQty.getValue() || "", "CurrentQty", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterNumber(App.ftNewQty.getValue() || "", "NewQty", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterNumber(App.ftQtyDiff.getValue() || "", "QtyDiff", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterNumber(App.ftUnitPrice.getValue() || "", "UnitPrice", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterNumber(App.ftAmount.getValue() || "", "Amount", record);
            }
        });
        var len = f.length;
        return function (record) {
            for (var i = 0; i < len; i++) {
                if (!f[i].filter(record)) {
                    return false;
                }
            }
            return true;
        };
    };
    var clearFilter = function () {
        App.ftProduct_Code.reset();
        App.ftProduct_Name.reset();
        App.ftUnit.reset();
        App.ftCurrentQty.reset();
        App.ftNewQty.reset();
        App.ftQtyDiff.reset();
        App.ftUnitPrice.reset();
        App.ftAmount.reset();
        App.stAdjustment.clearFilter();
    };
    var editAdjustment = function (editor, e) {
        if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("HandleChanges"))',
                params: {
                    id: e.record.data.ID,
                    field: e.field,
                    oldValue: e.originalValue,
                    newValue: e.value,
                    currentQty: e.record.data.CurrentQty,
                    product: e.record.data
                }
            });
        }
    };
    var insertToTable = function(StockID)
    {
        if (StockID == null) {
            Ext.MessageBox.show({
                title: 'Cảnh báo', msg: 'Bạn chưa chọn kho vật tư tiến hành kiểm kê!',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Cancel',
                fn: function (btn) {
                    return false;
                }
            });
        }
        else {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("Insert", "Adjustment", new { Area = "Stock" }, null))',
                params: { StockID: StockID }
            });
        }
    };
    var saveAdjustment = function (StockID) {
        if (StockID == null) {
            Ext.MessageBox.show({
                title: 'Cảnh báo', msg: 'Bạn chưa chọn kho vật tư tiến hành kiểm kê!',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Cancel',
                fn: function (btn) {
                    return false;
                }
            });
        }
        else {
            var amount = App.txtAmount.getValue();
            Ext.MessageBox.show({
                title: 'Xác nhận', msg: 'Bạn có chắc chắn muốn lưu phiếu kiểm kê hay không?',
                buttons: { yes: 'Đồng ý', no: 'Không' },
                iconCls: '#Information',
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("InsertAdjustment", "Adjustment", new { Area = "Stock" }, null))',
                            params: { StockID: StockID, amount: amount }
                        });
                    }
                }
              });
        }
    };
    var showFrmDetail = function () {
        var records = App.gpAdjustmentDetail.selModel.getSelection();
        var idAdjustment = records[0].get('ID');
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ShowFrmDetail", "Adjustment", new { Area = "Stock" }, null))',
            params: { idAdjustment: idAdjustment}
         });
    };
    var checkStatus = function () {
        var records = App.gpAdjustmentDetail.selModel.getSelection();
        switch (records.length) {
            case 0:
                App.btnDelete.setDisabled(true);
                App.btnDetail.setDisabled(true);
                App.btnNC.setDisabled(true);
                break;
            case 1:
                App.btnDelete.setDisabled(false);
                App.btnDetail.setDisabled(false);
                App.btnNC.setDisabled(false);
                break;
            default:
                App.btnDelete.setDisabled(true);
                App.btnDetail.setDisabled(true);
                App.btnNC.setDisabled(true);
                break;
        }
    };
</script>
@(Html.X().Viewport()
          .Layout(LayoutType.Border)
          .Items(
            Html.X().GridPanel()
                    .ID("gpAdjustment")
                    .ColumnLines(true)
                    .Region(Region.Center)
                    .Border(false)
                    .TopBar(
                    Html.X().Toolbar().ID("tbgpAdjustment")
                    .Items(
                    Html.X().ComboBox()
                            .ID("Stock")
                            .MarginSpec("0 5 0 5")
                            .LabelWidth(30)
                            .Width(300)
                            .DisplayField("Name")
                                .FieldLabel("Kho")
                                .EmptyText("Chọn kho cần kiểm kê!")
                                .ValueField("ID")
                                .Store(
                        Html.X().Store()
                                .AutoLoad(true)
                                .Model(
                                Html.X().Model()
                                        .IDProperty("ID")
                                                .Fields(
                                                        new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                        )
                                                        )
                                                .Proxy(
                                                    Html.X().AjaxProxy()
                                                        .Url(Url.Action("LoadStock", "Stock_Inward"))
                                                .Reader(Html.X().JsonReader().Root("data"))
                                           )

                                          ),
                                          Html.X().ToolbarSeparator(),
                                          Html.X().Button()
                                                  .Text("Tạo phiếu")
                                                  .Icon(Icon.PageAdd)
                                                  .Handler("insertToTable(App.Stock.getValue())"),
                                         Html.X().ToolbarSeparator(),
                                          Html.X().Button()
                                                  .Text("Lưu phiếu")
                                                  .Icon(Icon.Disk)
                                                  .Handler("saveAdjustment(App.Stock.getValue())"),
                                          Html.X().ToolbarSeparator(),
                                          Html.X().Button()
                                                  .Text("In phiếu")
                                                     .Handler("this.up('grid').print();")
                                                     .Hidden(false)
                                                  .Icon(Icon.Printer),
                                                  Html.X().Label().Text("(Double click vào cột số lượng kiểm kê để nhập kết quả kiểm kê)").StyleSpec("color:red"),
                                                           Html.X().ToolbarFill(),
                                                                 Html.X().ButtonTutorial()
                                     )
                                )
            .Store(Html.X().Store()
                    .ID("stAdjustment")
                     .Parameters(ps =>
                         {
                             ps.Add(new StoreParameter("StockID", "App.Stock.getValue()", ParameterMode.Raw));
                         }
                    )
                   .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("GetData"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .RemoteSort(true)
                    .RemotePaging(true)
                    .PageSize(20)
                    .GroupField("Group_Name")
                    .Sorters(Html.X().DataSorter().Property("Group_Name").Direction(Ext.Net.SortDirection.ASC))
                    .Model(
                        Html.X().Model()
                            .Fields(
                                Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("StockAdjustmentID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("StockProductID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Product_Code").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Unit").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Product_Name").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("StockID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Unit_ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("UnitConvert").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("Width").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("Height").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("Orgin").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("CurrentQty").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("NewQty").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("QtyDiff").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("UnitPrice").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("Amount").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("QtyConvert").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("StoreID").Type(ModelFieldType.Auto),
                                Html.X().ModelField().Name("Batch").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Group_Name").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Sorted").Type(ModelFieldType.Auto),
                                Html.X().ModelField().Name("Description").Type(ModelFieldType.String)
                            )
                    )

            )
.ColumnModel(
Html.X().RowNumbererColumn()
        .Text("STT")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(33)
        .Wrap(true)
        .Align(Alignment.Center),
Html.X().Column()
        .Text("ID")
        .DataIndex("ID")
        .Wrap(true)
        .Hidden(true),
        Html.X().Column()
        .Text("Mã vật tư hàng hóa")
        .DataIndex("Product_Code")
        .Align(Alignment.Center)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(120)
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftProduct_Code")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 120;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
    Html.X().Column()
        .Text("Tên vật tư hàng hóa")
        .DataIndex("Product_Name")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(190)
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftProduct_Name")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 190;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
    Html.X().Column()
        .Text("Đơn vị tính")
        .DataIndex("Unit")
        .Align(Alignment.Left)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(90)
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftUnit")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 90;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
    Html.X().SummaryColumn()
        .Text("Số lượng tồn")
        .DataIndex("CurrentQty")
        .Align(Alignment.Right)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(90)
        .SummaryType(SummaryType.Sum)
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftCurrentQty")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 80;
                        })
                        .Plugins(Html.X().ClearButton())

            ),
        Html.X().Column()
        .Text("Số lượng kiểm kê")
        .DataIndex("NewQty")
        .Align(Alignment.Right)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(120)
        .Renderer("change")
        .SummaryType(SummaryType.Sum)
        .Wrap(true)
            .Editor(
            Html.X().NumberField().MinValue(1)
            )
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftNewQty")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 80;
                        })
                        .Plugins(Html.X().ClearButton())

            ),
        Html.X().SummaryColumn()
        .Text("Chênh lệch")
        .DataIndex("QtyDiff")
        .Align(Alignment.Right)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(80)
        .SummaryType(SummaryType.Sum)
        .Renderer("totalQtyiff")
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftQtyDiff")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 80;
                        })
                        .Plugins(Html.X().ClearButton())

            ),
    Html.X().Column()
        .Text("Đơn giá")
        .DataIndex("UnitPrice")
        .Align(Alignment.Right)
        .Renderer("RenderVND")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(120)
        .Wrap(true)
        .Editor(
        Html.X().NumberField().MinValue(1)
        )
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftUnitPrice")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 120;
                        })
                        .Plugins(Html.X().ClearButton())

            ),
     Html.X().SummaryColumn()
        .Text("Thành tiền")
        .DataIndex("Amount")
        .Renderer("RenderVND")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Align(Alignment.Right)
        .Flex(1)
        .Wrap(true)
        .Groupable(false)
                    .CustomSummaryType("totalCost")
                    .Renderer("RenderAmountVND")
                    .SummaryRenderer("RenderVND")
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftAmount")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 140;
                        })
                        .Plugins(Html.X().ClearButton())

            ),
Html.X().Column()
        .Width(25)
        .Sortable(false)
        .MenuDisabled(true)
        .Text("&nbsp;")
        .Resizable(false)
        .Renderer("return '';")
        .HeaderItems(
        Html.X().Container()
        .Items(
            Html.X().Button()
                    .ID("ClearFilterButton")
                    .Icon(Icon.Cancel)
                    .ToolTip("Loại bỏ tất cả điều kiện tìm kiếm")
                    .Handler("clearFilter();")
                    )
             )
        )
        .SelectionModel(
                Html.X().RowSelectionModel()
                        .Mode(SelectionMode.Multi)
                        .Listeners(l =>
                        {
                            l.Select.Handler = "";
                        })
                        )

                          .View(
                        Html.X().GridView().MarkDirty(false)
                        )
                        .Features(
                            Html.X().GroupingSummary()
                                    .ID("GroupingSummaryProductGroup")
                                    .GroupHeaderTplString("{name}")
                                    .HideGroupedHeader(true)
                                    .EnableGroupingMenu(false),
                                     Html.X().Summary().Dock(SummaryDock.Bottom)
                            )
                        .Plugins(
                            Html.X().CellEditing().Listeners(ls => ls.Edit.Fn = "editAdjustment")
                        )
                        .BottomBar
                        (
                            Html.X().PagingToolbar()
                                    .EmptyMsg("Hiện không có dữ liệu")
                                    .NextText("Trang kế tiếp")
                                    .PrevText("Trang trước")
                                    .LastText("Trang cuối cùng")
                                    .FirstText("Trang đầu tiên")
                                    .DisplayMsg("Hiển thị từ {0}-{1} của {2} bản ghi")
                                    .BeforePageText("Trang")
                                    .AfterPageText("của {0}")
                                    .RefreshText("Tải lại dữ liệu")
                                    .Items
                                    (
                                    Html.X().Label("Số bản ghi trên một trang:"),
                                    Html.X().ToolbarSpacer(10),
                                    Html.X().ComboBox()
                                            .Width(80)
                                            .Items("10", "20", "30", "50", "100")
                                            .SelectedItems("10")
                                            .Listeners(l =>
                                            {
                                                l.Select.Fn = "warehouseOnComboBoxSelect";
                                            }),
                                            Html.X().Hidden().ID("txtAmount")


                                    )
                            .Plugins(Html.X().ProgressBarPager())
        ),

        Html.X().Panel()
            .Title("LỊCH SỬ KIỂM KÊ THEO NGÀY")
            .Width(530)
            .Collapsible(true)
            .Collapsed(true)
            .MarginSpec("1 1 1 1")
            .Icon(Icon.ApplicationViewGallery)
            .Region(Region.East)
            .Layout(LayoutType.Fit)
            .Items(
               Html.X().GridPanel()
                    .ID("gpAdjustmentDetail")
                    .ColumnLines(true)
                    .Region(Region.Center)
                    .Border(false)
                    .TopBar(
                     Html.X().Toolbar()
                    .Items(


                                          Html.X().Button()
                                                  .Text("Xem chi tiết")
                                                  .ID("btnDetail")
                                                  .Disabled(true)
                                                  .Icon(Icon.Zoom)
                                                  .Handler("showFrmDetail()"),
                                          Html.X().ToolbarSeparator(),
                                          Html.X().Button()
                                                  .Text("Xóa")
                                                  .ID("btnDelete")
                                                  .Disabled(true)
                                                  .Icon(Icon.Delete)
                                                  .Handler("deleteRecord()"),
                                             Html.X().ToolbarSeparator(),
                                             Html.X().Button().Text("Sự không phù hợp")
                                                    .Icon(Icon.ApplicationOsx)
                                                    .ID("btnNC").Disabled(true)
                                                    .Handler("NCShow(this.up('gridpanel'));"),
                                            Html.X().ToolbarFill()

                                     )
                                )
            .Store(Html.X().Store()
                    .ID("stAdjustmentDetail")
                   .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("GetDataDetail"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .RemoteSort(true)
                    .RemotePaging(true)
                    .PageSize(20)
                    .Model(
                        Html.X().Model()
                            .Fields(
                                Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("RefDate").Type(ModelFieldType.Date),
                                Html.X().ModelField().Name("Ref_OrgNo").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Stock_Name").Type(ModelFieldType.String),
                                 Html.X().ModelField().Name("Employee_Name").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Description").Type(ModelFieldType.String)
                            )
                    )

            )
.ColumnModel(
Html.X().RowNumbererColumn()
        .Text("STT")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(33)
        .Wrap(true)
        .Align(Alignment.Center),
Html.X().Column()
        .Text("ID")
        .DataIndex("ID")
        .Wrap(true)
        .Hidden(true),
        Html.X().Column()
        .Text("Mã kiểm kê")
        .DataIndex("Ref_OrgNo")
        .Align(Alignment.Center)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(80)
        .Wrap(true),
          Html.X().Column()
        .Text("Kho")
        .DataIndex("Stock_Name")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(180)
        .Wrap(true),
    Html.X().DateColumnExtend(iDAS.Utilities.DateFormat.DateTime)
        .Text("Ngày giờ kiểm kê")
        .DataIndex("RefDate")
        .Align(Alignment.Center)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Flex(1)
        .Wrap(true)
        .Format("dd/MM/yyyy HH:ss"),
           Html.X().Column()
        .Text("Người tạo")
        .DataIndex("Employee_Name")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(100)
        .Wrap(true)
        )
        .SelectionModel(
                Html.X().RowSelectionModel()
                        .Mode(SelectionMode.Single)
                        .Listeners(l =>
                        {
                            l.Select.Handler = "checkStatus()";
                        })
                        )
                        .View(
                        Html.X().GridView().MarkDirty(false)
                        )
                        .Plugins(Html.X().FilterHeader())
                        .BottomBar
                        (
                                  Html.X().CustomPagingToolbar("10", "20", "30", "50", "100")

        )
      )
     )
)
