@model System.Collections.IEnumerable
@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/FieldSet.css" rel="stylesheet" />
<script type="text/javascript" src="@Url.Content("~/Areas/Stock/Content/js/jsCommon.js")"></script>
<script type="text/javascript">
    var applyFilter = function (field) {
        var store = App.gpTransferByVouchers.getStore();
        store.filterBy(getRecordFilter());
    };
    var filterString = function (value, dataIndex, record) {
        var val = record.get(dataIndex);
        if (typeof val != "string") {
            return value.length == 0;
        }
        return val.toLowerCase().indexOf(value.toLowerCase()) > -1;
    };
    var filterDate = function (value, dataIndex, record) {
        var val = Ext.Date.clearTime(record.get(dataIndex), true).getTime();
        if (!Ext.isEmpty(value, false) && val != Ext.Date.clearTime(value, true).getTime()) {
            return false;
        }
        return true;
    };
    var filterNumber = function (value, dataIndex, record) {
        var val = record.get(dataIndex);

        if (!Ext.isEmpty(value, false) && val != value) {
            return false;
        }
        return true;
    };
    var filterBoolean = function (value, dataIndex, record) {
        var val = record.get(dataIndex);
        if (typeof val != "boolean") {
            return value.length == 0;
        }
        return val.toString().toLowerCase().indexOf(value.toString().toLowerCase()) > -1;
    };
    var getRecordFilter = function () {
        var f = [];
        f.push({
            filter: function (record) {
                return filterString(App.ftBarcode.getValue() || "", "Barcode", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterDate(App.ftRefDate.getValue() || "", "RefDate", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterNumber(App.ftAmount.getValue() || "", "Amount", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterString(App.ftDescription.getValue() || "", "Description", record);
            }
        });
        f.push({
            filter: function (record) {
                return filterString(App.ftEmployeeName.getValue() || "", "EmployeeName", record);
            }
        });
        var len = f.length;
        return function (record) {
            for (var i = 0; i < len; i++) {
                if (!f[i].filter(record)) {
                    return false;
                }
            }
            return true;
        };
    };
    var onSpecialKey = function (field, e) {
        if (e.getKey() === e.ENTER) {
            App.gpTransferByVouchers.getStore().load();
            e.stopEvent();
        }
    };
    var clearFilter = function () {
        App.ftBarcode.reset();
        App.ftRefDate.reset();
        App.ftFAmount.reset();
        App.ftDescription.reset();
        App.ftEmployeeName.reset();
        App.stTransferByVouchers.clearFilter();
    };
</script>
@(Html.X().Viewport()
          .Layout(LayoutType.Fit)
          .Items(
            Html.X().GridPanel()
                    .ID("gpTransferByVouchers")
                    .ColumnLines(true)
                    .Height(400).Border(false)
                    .TopBar(
                     Html.X().Toolbar().ID("tbgpTransferByVouchers")
                                     .Items(
                    Html.X().ComboBox()
                            .ID("Year")
                            .MarginSpec("0 20 0 5")
                            .LabelWidth(50)
                            .DisplayField("Name")
                            .SelectedItems(new ListItem(DateTime.Now.Year.ToString(), DateTime.Now.Year))
                                .FieldLabel("Năm")
                                .ValueField("ID")
                                .Editable(false)
                                .Listeners(l => l.Select.Handler = "App.dfFromDate.setValue(new Date(App.Year.getValue(), 0, 1)); App.dfToDate.setValue(new Date(App.Year.getValue(), 11, 31)); App.gpTransferByVouchers.getStore().load();")
                                .Store(
                        Html.X().Store()
                                .AutoLoad(true)
                                .Model(
                                Html.X().Model()
                                        .IDProperty("ID")
                                                .Fields(
                                                        new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                        )
                                                        )
                                                .Proxy(
                                                    Html.X().AjaxProxy()
                                                        .Url(Url.Action("GetYear"))
                                                .Reader(Html.X().JsonReader().Root("data"))
                                           ).Listeners(ls => ls.Load.Handler = "App.dfFromDate.setValue(new Date(new Date().getFullYear(), 0, 1)); App.dfToDate.setValue(new Date(new Date().getFullYear(), 11, 31))")
                                          ),
                                       Html.X().DateField()
                                               .FieldLabel("Từ")
                                               .ID("dfFromDate")
                                               .MarginSpec("0 5 0 10")
                                               .MaxDate(DateTime.Now)
                                               .LabelWidth(50)
                                               .Listeners(l =>
                                                   {
                                                       l.Select.Handler = "App.gpTransferByVouchers.getStore().load();";
                                                       l.SpecialKey.Fn = "onSpecialKey";
                                                   })
                                               .Format("dd/MM/yyyy"),
                                       Html.X().DateField()
                                               .FieldLabel("Đến")
                                               .LabelWidth(50)
                                               .ID("dfToDate")
                                                .Listeners(l =>
                                                   {
                                                       l.Select.Handler = "App.gpTransferByVouchers.getStore().load();";
                                                       l.SpecialKey.Fn = "onSpecialKey";
                                                   })
                                               .Format("dd/MM/yyyy"),
                                                 Html.X().Button()
                                               .Text("Báo cáo")
                                               .Handler("this.up('grid').print();")
                                               .Icon(Icon.Printer)
                                               .MarginSpec("0 5 0 10"),
                                                        Html.X().ToolbarFill(),
                                                                 Html.X().ButtonTutorial()

                                     )
                                )
            .Store(Html.X().Store()
                    .ID("stTransferByVouchers")
                     .Parameters(ps =>
                         {
                             ps.Add(new StoreParameter("year", "App.Year.getValue()", ParameterMode.Raw));
                             ps.Add(new StoreParameter("fromdate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                             ps.Add(new StoreParameter("todate", "App.dfToDate.getValue()", ParameterMode.Raw));
                         }
                    )
                   .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("GetDataTransferByVouchers", "Stock_Transfer"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .RemoteSort(true)
                    .RemotePaging(true)
                    .PageSize(20)
                    .Model(
                        Html.X().Model()
                            .Fields(
                                Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("RefDate").Type(ModelFieldType.Date),
                                Html.X().ModelField().Name("Ref_OrgNo").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("EmployeeName").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("RefType").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Barcode").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Department_ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Employee_ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("StockID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Branch_ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Contract_ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Currency_ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("ExchangeRate").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("Vat").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Amount").Type(ModelFieldType.Float),
                                Html.X().ModelField().Name("IsClose").Type(ModelFieldType.Boolean),
                                Html.X().ModelField().Name("Description").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("FromStockID").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("ToStockID").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("Sorted").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Active").Type(ModelFieldType.Boolean),
                                Html.X().ModelField().Name("IsReview").Type(ModelFieldType.Boolean),
                                Html.X().ModelField().Name("Receiver_ID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("Sender_ID").Type(ModelFieldType.Int)


                            )
                    )

            )
.ColumnModel(
Html.X().RowNumbererColumn()
        .Text("STT")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(33)
        .Wrap(true)
        .Align(Alignment.Center),
Html.X().Column()
        .Text("ID")
        .DataIndex("ID")
        .Wrap(true)
        .Hidden(true),
Html.X().Column()
        .Text("Số phiếu")
        .StyleSpec("font-weight: bold; text-align: center;")
        .DataIndex("Barcode")
        .Align(Alignment.Center)
        .Wrap(true)
        .Width(100)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftBarcode")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 80;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
Html.X().DateColumnExtend()
        .Text("Ngày")
        .DataIndex("RefDate")
        .Align(Alignment.Center)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(100)
        .Format("dd/MM/yyyy")
        .Wrap(true)
        .HeaderItems(
                Html.X().DateField()
                        .ID("ftRefDate")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 100;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
                    Html.X().Column()
        .Text("Nhân sự chuyển")
        .DataIndex("EmployeeName")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(150)
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftEmployeeName")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 150;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
    Html.X().Column()
        .Text("Số tiền")
        .DataIndex("Amount")
        .Renderer("RenderVND")
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(130)
        .Align(Alignment.Right)
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftAmount")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 130;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
    Html.X().Column()
        .Text("Diễn giải")
        .DataIndex("Description")
        .Align(Alignment.Left)
        .Flex(1)
        .StyleSpec("font-weight: bold; text-align: center;")
        .Width(160)
        .Wrap(true)
        .HeaderItems(
                Html.X().TextField()
                        .ID("ftDescription")
                        .Icon(Icon.Magnifier)
                        .Listeners(ls =>
                        {
                            ls.Change.Handler = "applyFilter(this);";
                            ls.Change.Buffer = 160;
                        })
                        .Plugins(Html.X().ClearButton())
                    ),
Html.X().Column()
        .Width(25)
        .Sortable(false)
        .MenuDisabled(true)
        .Text("&nbsp;")
        .Resizable(false)
        .Renderer("return '';")
        .HeaderItems(
        Html.X().Container()
        .Items(
            Html.X().Button()
                    .ID("ClearFilterButton")
                    .Icon(Icon.Cancel)
                    .ToolTip("Loại bỏ tất cả điều kiện tìm kiếm")
                    .Handler("clearFilter();")
                    )
             )
        )
        .SelectionModel(
                Html.X().RowSelectionModel()
                        .Mode(SelectionMode.Multi)
                        .Listeners(l =>
                        {
                            l.Select.Handler = "";
                        })
                        )

                          .View(
                        Html.X().GridView().MarkDirty(false)
                        )
                        .Features(
                            Html.X().GroupingSummary()
                                    .ID("GroupingSummaryProductGroup")
                                    .GroupHeaderTplString("{name}")
                                    .HideGroupedHeader(true)
                                    .EnableGroupingMenu(false)
                            )
                        .Plugins(Html.X().CellEditing())
                        .BottomBar
                        (
                                  Html.X().CustomPagingToolbar()
        )
     )
)
