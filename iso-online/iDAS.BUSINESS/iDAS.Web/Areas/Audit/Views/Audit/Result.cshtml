@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.AuditItem
@(Html.X().GridPanel()
    .Header(false)
    .Split(true)
    .Border(false)
    .ID("grResult")
    .TitleAlign(TitleAlign.Center)
    .Layout(LayoutType.Fit)
    .Collapsible(true)
    .ForceFit(true)
    .ColumnLines(true)
    .RowLines(true)
    .TopBar(
        Html.X().Toolbar()
            .Items(
            Html.X().Button()
                .Icon(Icon.Pencil)
                .ID("btnSetPoint")
                .Text("Chấm điểm")
                    .Handler("updateForm(this.up('gridpanel'));")
                .Disabled(true),
            Html.X().ToolbarSeparator(),
            Html.X().ButtonDelete()
                .ID("btnDeletePoint")
                .Handler("deleteRecord(this.up('gridpanel'));")
                .Disabled(true),
            Html.X().ToolbarSeparator(),
            Html.X().ButtonView()
                .ID("btnDetailPoint")
                .Handler("detailForm(this.up('gridpanel'));")
                .Disabled(true),
            Html.X().Button().Text("Sự không phù hợp")
                .Icon(Icon.ApplicationOsx)
                .ID("btnNC").Disabled(true)
                .Handler("NCShow(this.up('gridpanel'));"),
        Html.X().ToolbarFill(),
        Html.X().ComboBoxFor(m => m.QualityCriteriaCategoryID)
                .FieldLabel("Bộ tiêu chí"+Html.Required())
                .EmptyText("Chọn bộ tiêu chí đánh giá")
                .AllowBlank(false)
                .BlankText("Bạn phải chọn bộ tiêu chí cần đánh giá!")
                .ID("cbCriteriaCategoryID")
                .Editable(false)
                .Width(360)
                .LabelWidth(70)
                .DisplayField("Name")
                .ValueField("ID")
                .Store(
            Html.X().Store()
                .ID("StoreCriteriaCategory")
                .AutoLoad(true)
                .Proxy(
                Html.X().AjaxProxy()
                            .Url(Url.Action("LoadData", "CriteriaCategory", new { area = "Quality" }))
                        .Reader(Html.X().JsonReader().Root("data")
                        )
                        )
                .Model(Html.X().Model()
                    .Fields(
                        new ModelField("Name"),
                        new ModelField("ID")
                    )
                )
            )
            .Listeners(ls => ls.Change.Handler = "refreshXXX();")
        )
    )
    .Store(Html.X().Store().ID("StoreTreeCriteria")
        .AutoLoad(false)
        .PageSize(20)
        .Proxy(Html.X().AjaxProxy()
                    .Url(Url.Action("LoadResult", "Result", new { area = "Audit" }))
                    .Reader(Html.X().JsonReader()
                    .Root("data"))
                )
              .Parameters(ps =>
                {
                    ps.Add(new StoreParameter("cateId", "App.cbCriteriaCategoryID.getValue()!=null? App.cbCriteriaCategoryID.getValue():0", ParameterMode.Raw));
                    ps.Add(new StoreParameter("auditId", "App.hdfAuditId.getValue()!=null? App.hdfAuditId.getValue():0", ParameterMode.Raw));
                })
        .Model(
            Html.X().Model()
            .Fields(
                    Html.X().ModelField().Name("ID"),
                    Html.X().ModelField().Name("QualityCriteriaID"),
                    Html.X().ModelField().Name("DepartmentID"),
                    Html.X().ModelField().Name("Name"),
                    Html.X().ModelField().Name("MinPoint").Type(ModelFieldType.String),
                    Html.X().ModelField().Name("MaxPoint").Type(ModelFieldType.String),
                    Html.X().ModelField().Name("AuditNote").Type(ModelFieldType.String),
                    Html.X().ModelField().Name("AuditAt").Type(ModelFieldType.Date),
                    Html.X().ModelField().Name("IsCategory").Type(ModelFieldType.Boolean),
                    Html.X().ModelField().Name("ResultPass").Type(ModelFieldType.Boolean),
                    Html.X().ModelField().Name("ResultNotPass").Type(ModelFieldType.Boolean),
                    Html.X().ModelField().Name("Point").Type(ModelFieldType.Int),
                    Html.X().ModelField().Name("TotalPoint").Type(ModelFieldType.Int),
                    Html.X().ModelField().Name("Result").Type(ModelFieldType.String),
                    Html.X().ModelField().Name("IsPass").Type(ModelFieldType.Boolean),
                    Html.X().ModelField().Name("IsObs").Type(ModelFieldType.Boolean),
                    Html.X().ModelField().Name("IsMaximum").Type(ModelFieldType.Boolean),
                    Html.X().ModelField().Name("IsMedium").Type(ModelFieldType.Boolean)
            )
        )
    )
    .ColumnModel(
        Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
        Html.X().Column()
            .Text("Tiêu chí đánh giá")
            .StyleSpec("font-weight: bold; text-align: center;")
            .Align(Alignment.Left)
            .DataIndex("Name")
            .Flex(1),
        Html.X().DateColumnExtend()
            .Text("Thời gian")
            .Width(70)
            .Format("dd/MM/yyyy")
            .Align(Alignment.Center)
            .DataIndex("AuditAt"),
            Html.X().SummaryColumn()
            .Text("Điểm")
            .SummaryRenderer(new Renderer() { Handler = "return App.grResult.getStore().getAt(0).data.TotalPoint;" })
            .Width(50)
            .Align(Alignment.Right)
            .DataIndex("Point"),
       Html.X().ComponentColumn().Text("Kết quả").Columns(
            Html.X().CheckColumn()
            .Text("Đạt")
            .StyleSpec("font-weight: bold; text-align: center;")
            .Width(70)
            .DataIndex("ResultPass")
            .Align(Alignment.Center),
             Html.X().CheckColumn()
            .Text("Không đạt")
            .StyleSpec("font-weight: bold; text-align: center;")
            .Width(70)
            .DataIndex("ResultNotPass")
            .Align(Alignment.Center)
            ),
             Html.X().ComponentColumn().Text("Loại điểm không phù hợp").Columns(
            Html.X().CheckColumn().Text("Obs")
            .Width(50)
            .DataIndex("IsObs")
            .Align(Alignment.Right),
            Html.X().CheckColumn()
            .Text("M")
            .Width(50)
            .DataIndex("IsMaximum")
            .Align(Alignment.Right),
            Html.X().CheckColumn()
            .Text("m")
            .Width(50)
            .DataIndex("IsMedium")
            .Align(Alignment.Right)
            )
    )
            .Listeners(lS => lS.SelectionChange.Handler = "checkStatusAuditResult(this);")
             .Features(
                        Html.X().GroupingSummary()
                                .ID("GroupingSummary")
                                .GroupHeaderTplString("{name}")
                                .HideGroupedHeader(true)
                                .EnableGroupingMenu(false),
                    Html.X().Summary().Dock(SummaryDock.Bottom)
                    )
             .BottomBar(
                               Html.X().CustomPagingToolbar()
        )
)
<script type="text/javascript">
    var refreshXXX = function () {
        App.WindowAuditUpdate.queryById('PanelResult').down('gridpanel').getStore().reload();
    };
    var updateForm = function (grid) {
        GridResult = grid;
        var record = GridResult.selModel.getSelection();
        if (record.length > 0) {
            var auditId = App.hdfAuditId.getValue();
            var criteriaId = record[0].get('QualityCriteriaID');
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmEdit", "Result", new { Area = "Audit" }, null))',
                params: { auditId: auditId, criteriaId: criteriaId, cateId: App.cbCriteriaCategoryID.getValue() }
            });
        }
    };
    var deleteRecord = function (grid) {
        var record = grid.selModel.getSelection();
        if (record.length > 0) {
            Ext.MessageBox.show({
                title: 'Xác nhận', msg: 'Bạn có chắc chắn muốn xóa kết quả đánh giá đã chọn không?',
                buttons: { yes: 'Đồng ý', no: 'Không' },
                iconCls: '#Information',
                fn: function (btn) {
                    if (btn == 'yes') {
                        var auditId = App.hdfAuditId.getValue();
                        var criteriaId = record[0].get('QualityCriteriaID');
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("Delete", "Result", new { Area = "Audit" }, null))',
                            params: { auditId: auditId, criteriaId: criteriaId },
                            success: function (result) {
                                grid.getStore().reload();
                            }
                        });
                    }
                }
            });
        }
    };
    var detailForm = function (grid) {
        var record = grid.selModel.getSelection();
        if (record.length > 0) {
            var auditId = App.hdfAuditId.getValue();
            var criteriaId = record[0].get('QualityCriteriaID');
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmDetail", "Result", new { Area = "Audit" }, null))',
                params: { auditId: auditId, criteriaId: criteriaId }
            });
        }
    };
    var NCShow = function (grid) {
        NCGridPanel = grid;
        var records = grid.selModel.getSelection();
        var auditId = App.hdfAuditId.getValue();
        if (records.length > 0) {
            var url = '@(Url.Action("NCShow", "NC", new { Area = "Quality" }, null))';
            var params = {
                auditId: auditId,
                criteriaId: records[0].get('QualityCriteriaID'),
                departmentId: App.hdfDepartmentID.getValue()
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();           
        };
        onDirectMethod(url, params);
    };
    var checkStatusAuditResult = function (grid) {
        var records = grid.selModel.getSelection();
        switch (records.length) {
            case 0:
                App.btnSetPoint.setDisabled(true);
                App.btnDeletePoint.setDisabled(true);
                App.btnDetailPoint.setDisabled(true);
                App.btnNC.setDisabled(true);
                break;
            case 1:
                if (!records[0].get('IsCategory') && App.hdfAuditId.getValue() != 0) {
                    App.btnSetPoint.setDisabled(false);
                    App.btnDeletePoint.setDisabled(false);
                    App.btnDetailPoint.setDisabled(false);
                }
                else {
                    App.btnSetPoint.setDisabled(true);
                    App.btnDeletePoint.setDisabled(true);
                    App.btnDetailPoint.setDisabled(true);
                };
                if (records[0].get('ResultNotPass') == true) {
                    App.btnNC.setDisabled(false);
                }
                else {
                    App.btnNC.setDisabled(true);
                };
                break;
            default:
                App.btnSetPoint.setDisabled(true);
                App.btnDeletePoint.setDisabled(true);
                App.btnDetailPoint.setDisabled(true);
                App.btnNC.setDisabled(true);
        }
    };
</script>
