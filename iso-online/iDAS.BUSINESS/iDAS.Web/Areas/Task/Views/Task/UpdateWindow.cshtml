@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.TaskItem
@( Html.X().Window()
    .Title("Cập nhật thông tin công việc")
    .Icon(Icon.Pencil)
    .Width(700)
    .Layout(LayoutType.Fit)
    .BodyPadding(6)
    .Maximizable(true)
    .Constrain(true)
    .Modal(true)
    .Border(true)
    .Items(
        Html.X().FormPanel()
        .Url(ViewData["UrlUpdate"].ToString())
        .BaseParams(a => a.Add(ViewData["Parameter"] as Parameter))
        .Layout(LayoutType.VBox)
        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Frame(true)
        .StyleSpec("border: none;")
        .FieldDefaults(lb => lb.LabelWidth = 110)
        .Items(

                         Html.X().HiddenFor(m => m.ID).ID("hdfIDTask"),
                         Html.X().ComboBoxFor(m => m.ParentID).FieldLabel("Phát sinh từ công việc").EmptyText("Chọn công việc cha ...")
                            .ID("cbParentID")
                            .AllowBlank(true)
                            .QueryMode(DataLoadMode.Local).Editable(false)
                            .ForceSelection(true)
                            .HideBaseTrigger(true)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                        .IDProperty("ID")
                                        .Fields(
                                        new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                .Url(Url.Action("LoadComboTask", "Task", new { area = "Task" }))
                                                .Reader(Html.X().JsonReader().Root("data"))))
                            .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                            .Listeners(ls => { ls.TriggerClick.Fn = "showTask"; }),
                    Html.X().TextFieldFor(m => m.Name)
                        .ID("txtName")
                        .FieldLabel("Tên công việc" + Html.Required())
                        .AllowOnlyWhitespace(false)
                        .MaxLength(100)
                        .AllowBlank(false)
                        .BlankText("Tên công việc không được bỏ trống!"),
                    Html.X().ComboBoxFor(m => m.CategoryID)
                        .FieldLabel("Nhóm công việc" + Html.Required())
                        .EmptyText("Chọn nhóm công việc")
                        .AllowBlank(false)
                        .Editable(false)
                        .BlankText("Nhóm công việc không được bỏ trống!")
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(
                            Html.X().Store()
                                .AutoLoad(true)
                                .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("GetDataIsUse", "TaskCategory", new { area = "Task" }))
                                .Reader(Html.X().JsonReader().Root("data"))
                                )
                                .Model(Html.X().Model()
                                    .Fields(
                                        new ModelField("ID"),
                                        new ModelField("Name")
                                    )
                                )
                        ),
                        Html.X().DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).Multiple(false).AllowBlank(false).Height(25),
                           Html.X().Container().Layout(LayoutType.Column).ColSpan(2).MarginSpec("0 0 0 0").Items(
                        Html.X().DateTimeFieldFor(m => m.StartTime, true)
                        .AllowBlank(false)
                        .FieldLabel("Bắt đầu" + Html.Required())
                            .ColumnWidth(0.5).MarginSpec("0 5 5 0"),
                Html.X().DateTimeFieldFor(m => m.EndTime, true)
                        .AllowBlank(false)
                        .FieldLabel("Kết thúc" + Html.Required())
                        .ColumnWidth(0.5)
                        .MarginSpec("0 0 5 0")),
                    Html.X().Container().Layout(LayoutType.Column).ColSpan(2).MarginSpec("0 0 5 0").Items(
                    Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 5 0 0").ColumnWidth(0.5).Items(
                        Html.X().NumberFieldFor(m => m.Cost)
                            .MinValue(0)
                            .AllowDecimals(true)
                            .Icon(Icon.Coins)
                            .FieldLabel("Chi phí dự tính")
                            .MarginSpec("0 5 0 0")
                            .ColumnWidth(0.7),
                        Html.X().TextField().Text("VNĐ")
                            .Icon(Icon.MoneyDollar)
                            .ColumnWidth(0.3)
                        ),
                        Html.X().ComboBoxFor(m => m.LevelID)
                            .ID("cbLevelID")
                            .MarginSpec("0 0 5 0")
                            .FieldLabel("Mức độ công việc" + Html.Required())
                            .EmptyText("Chọn mức độ công việc")
                            .BlankText("Mức độ ưu tiên chưa được chọn!")
                            .DisplayField("Name")
                            .Editable(false)
                            .ColumnWidth(0.5)
                            .ValueField("ID")
                               .Tpl(
                                @<text>
                                    <tpl for=".">
                                        <div class="x-boundlist-item" style="display: inline-block; width: 100%;">
                                            <div style="width: 50px; height: 20px; float: left; background-color: {Color}; border: #cecece 1px solid;">&nbsp;</div><div style="width: auto; float: left">&nbsp;{Name}</div>
                                        </div>
                                    </tpl>
                                </text>)
                            .Store(
                                Html.X().Store()
                                    .ID("stTaskLevel")
                                    .AutoLoad(true)
                                    .Model(
                                        Html.X().Model().IDProperty("ID")
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.Int),
                                                new ModelField("Name", ModelFieldType.String),
                                                new ModelField("Color", ModelFieldType.String)
                                            )
                                    )
                                    .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("LoadStoreIsUse", "TaskLevel", new { area = "Task" }))
                                        .Reader(Html.X().JsonReader().Root("data"))
                                    )
                            )
                            .Listeners(ls => ls.Change.Handler = "getColor(App.cbLevelID, App.stTaskLevel);")
                    ),
                    Html.X().TextAreaFor(m => m.Content)
                        .ID("txtContent")
                        .FieldLabel("Nội dung công việc")
                                 .Flex(1),
                            Html.X().FileUploadFieldFor(m => m.AttachmentFiles),
                           Html.X().EmployeeFieldFor(m => m.Perform).Title("Người thực hiện" + Html.Required()).MarginSpec("0 0 0 115"),
                    Html.X().HiddenFor(m => m.IsNew).ID("IsNew"),
                                      Html.X().HiddenFor(m => m.IsEdit)
                                        .ID("IsEdit")
           )
    )
    .Buttons(
        Html.X().Button()
        .ID("btnSendApproval")
            .Icon(Icon.Tick)
            .Text("Giao việc")
            .Handler("App.IsEdit.setValue(false);App.IsNew.setValue(false);updateTask(this.up('window'))"),
        Html.X().ButtonSave()
        .ID("btnSave")
        .Handler("updateTask(this.up('window'))"),
        Html.X().ButtonExit()
    )
)

<script>
    var showTask = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTaskPartialView", "Task", new { Area = "Task" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectTask = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn công việc cha?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            if (parseInt(id) == '@Model.ID') {
                Ext.MessageBox.show({
                    title: 'Thông báo', msg: 'Công việc cha phải khác công việc hiện tại?',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Exclamation',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            return false;
                        }
                    }
                });
            }
            else {
                App.cbParentID.setValue(parseInt(id));
                App.WinTask.close();
            }
        };
    };
    var showTaskEmloyee = function () {
        var url = '@(Url.Action("EmployeeWindow", "Task", new { Area = "Task" }))';
        onDirectMethod(url);
    };
    var updateTask = function (window) {
        var form = window.down('form');
        form.submit({
            success: function (form, action) {
                window.close();
                TaskGridPanel.getStore().reload();
            },
        });
    };

    var getColor = function (obj, store) {
        var id = obj.getValue();
        var record = store.getById(id);
        var color = record.get('Color');
        obj.setFieldStyle('background-image: none; background-color: ' + color + ';');
    };
</script>