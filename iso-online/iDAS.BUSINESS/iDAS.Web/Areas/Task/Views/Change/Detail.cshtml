@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Web.ExtExtend
@model iDAS.Items.TaskHistoryItem
@{
    var X = Html.X();
}
@( Html.X().Window()
    .Title("Xem chi tiết nội dung công việc")
    .Icon(Icon.Zoom)
    .Header(true)
    .Height(1)
    .Maximized(true)
    .Constrain(true)
    .Layout(LayoutType.Fit)
    .Modal(true)
    .Resizable(false)
    .BodyPadding(0)
    .Border(true)
    .Items(
        Html.X().FormPanel()
        .ID("frmDetailChangeVote")
        .Layout(LayoutType.Border)
        .StyleSpec("border: none;")
        .Border(false)
        .FieldDefaults(lb => lb.LabelWidth = 110)
        .Items(
                Html.X().TabPanel().Margin(1).Region(Region.Center).Items(
            Html.X().Panel()
                .Title("Thông tin nội dung công việc")
                   .StyleSpec("border: none;")
               .Border(false)


                .BodyPadding(6)
                .Icon(Icon.ApplicationViewDetail)
                      .Layout(LayoutType.VBox)
                                                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Frame(true)
                .Items(
                      Html.X().HiddenFor(m => m.ID),
                           Html.X().ComboBoxFor(m => m.ParentID).FieldLabel("Phát sinh từ công việc").EmptyText("Chọn công việc cha ...")
                            .ID("cbParentID")
                            .AllowBlank(true)
                            .QueryMode(DataLoadMode.Local).Editable(false)
                            .ForceSelection(true)
                            .ReadOnly(true)
                            .HideBaseTrigger(true)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                                .IDProperty("ID")
                                                .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("LoadComboTask", "Task", new { area = "Task" }))
                                                .Reader(Html.X().JsonReader().Root("data"))))
                            .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit)),
           
                    Html.X().TextFieldFor(m => m.Name)
                        .ID("txtName")
                        .FieldLabel("Tên công việc")
                        .EmptyText("Nhập tên công việc")
                        .MaxLength(100)
                        .AllowBlank(false)
                        .ReadOnly(true)
                        .BlankText("Tên công việc không được bỏ trống!"),

                    Html.X().ComboBoxFor(m => m.CategoryID)
                        .FieldLabel("Nhóm công việc")
                        .EmptyText("Chọn nhóm công việc")
                        .AllowBlank(false)
                        .ReadOnly(true)
                        .Editable(false)
                        .BlankText("Nhóm công việc không được bỏ trống!")
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(
                            Html.X().Store()
                                .AutoLoad(true)
                                .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("GetData", "TaskCategory", new { area = "Task" }))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                )
                                .Model(Html.X().Model()
                                    .Fields(
                                        new ModelField("ID"),
                                        new ModelField("Name")
                                    )
                                )
                        ),

                          Html.X().DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban").ReadOnly(true).Multiple(false).AllowBlank(false).Height(25),
                                    Html.X().Container().Layout(LayoutType.Column).ColSpan(2).MarginSpec("0 0 0 0").Items(
                                    Html.X().DateTimeFieldFor(m => m.StartTime)
                                    .ReadOnly(true)
                                        .FieldLabel("Bắt đầu").MarginSpec("0 5 5 0")
                                    .ColumnWidth(0.5),
                            Html.X().DateTimeFieldFor(m => m.EndTime)
                                    .FieldLabel("Kết thúc")
                                    .ReadOnly(true)
                                    .ColumnWidth(0.5)
                                    .MarginSpec("0 0 5 0")),
                        Html.X().Container().Layout(LayoutType.Column).ColSpan(2).MarginSpec("0 0 0 0").Items(
                        Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 5 0 0").ColumnWidth(0.5).Items(
                            Html.X().NumberFieldFor(m => m.Cost)
                                .MinValue(0)
                                .AllowDecimals(true)
                                .Icon(Icon.Coins)
                                .ReadOnly(true)
                                .FieldLabel("Chi phí dự tính")
                                .MarginSpec("0 5 0 0")
                                .ColumnWidth(0.7),
                            Html.X().TextField().Text("VNĐ")
                                .Icon(Icon.MoneyDollar)
                                .ReadOnly(true)
                                .ColumnWidth(0.3)
                                 ),
                        Html.X().ComboBoxFor(m => m.LevelID)
                            .ID("cbLevelID")
                            .ReadOnly(true)
                            .MarginSpec("0 0 5 0")
                            .FieldLabel("Mức độ công việc")
                            .EmptyText("Chọn mức độ công việc")
                            .BlankText("Mức độ ưu tiên chưa được chọn!")
                            .DisplayField("Name")
                            .Editable(false)
                            .ColumnWidth(0.5)
                            .ValueField("ID")
                            .Tpl(
                            @<text>
                                <tpl for=".">
                                    <div class="x-boundlist-item">
                                        <div style="text-align: center; width: 100%; background-color: {Color}; border: #cecece 1px solid;">{Name}</div>
                                    </div>
                                </tpl>
                            </text>
                            )
                            .Store(
                                Html.X().Store()
                                    .ID("stTaskLevel")
                                    .AutoLoad(true)
                                    .Model(
                                        Html.X().Model().IDProperty("ID")
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.Int),
                                                new ModelField("Name", ModelFieldType.String),
                                                new ModelField("Color", ModelFieldType.String)
                                            )
                                    )
                                    .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("LoadStore", "TaskLevel", new { area = "Task" }))
                                        .Reader(Html.X().JsonReader().Root("data"))
                                    )
                            )
                            .Listeners(ls => ls.Change.Handler = "getColor(App.cbLevelID, App.stTaskLevel);")
                    ),


                           Html.X().FileUploadFieldFor(m => m.AttachmentFiles).ReadOnly(true),

                        Html.X().TextAreaFor(m => m.Content).ReadOnly(true)
                        .ID("txtContent")
                        .FieldLabel("Nội dung công việc")                      
                        .EmptyText("Nhập nội dung chi tiết cho công việc")
                        .Flex(1),
                        Html.X().EmployeeFieldFor(m => m.Perform).ReadOnly(true).Title("Người thực hiện").MarginSpec("0 0 0 115"),
                        Html.X().HiddenFor(m => m.IsEdit).ID("IsEdit").ReadOnly(true)

                )),
                     Html.X().Panel()
                    .Title("Lý do điều chỉnh công việc")
                    .StyleSpec("-webkit-border-radius:0")
                    .Region(Region.East)
                    .Width(400)
                    .Icon(Icon.ResultsetFirst)
                    .Margin(1)
                    .Border(true)
                    .Split(true)
                    .Collapsible(true)
                    .Frame(true)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .Items(
                    Html.X().FieldSet().Title("Lý do điều chỉnh công việc").Padding(4).Layout(LayoutType.Form).Items(
                         Html.X().TextAreaFor(m => m.Reason)
                                          .ID("txtReason")
                                              .ReadOnly(true)
                            .FieldLabel("Lý do điều chỉnh").HideLabel(true)
                            .Height(200)
                            ),
                    Html.X().ComboBoxFor(m => m.IsChange).AllowBlank(false).LabelWidth(70).FieldLabel("Xác nhận").Items(
                    new ListItem("Đồng ý", true),
                    new ListItem("Không đồng ý", false)
                    ),
                    Html.X().TextAreaFor(m => m.ChangeNote).Flex(1).FieldLabel("Nhận xét").LabelWidth(70)
                    )
        )
    )
        .Buttons(
            Html.X().ButtonExit()
        )
)

<script type="text/javascript">
    var getColor = function (obj, store) {
        var id = obj.getValue();
        var record = store.getById(id);
        var color = record.get('Color');
        obj.setFieldStyle('background-image: none; background-color: ' + color + ';');
    };
    var AvatarRenderer = function (value) {
        var tpl = "<img src='" + value + "' style='width:30px;height:30px;margin: -3px -6px -5.5px -6px;'/>";
        return tpl;
    };
    var getEmployessPerform = function () {
        var records = App.GrdUserPerform.selModel.getSelection();
        var aId = new Array();
        var strId = '';
        for (var i = 0, r; r = records[i]; i++) {
            aId[i] = records[i].get('ID');
        }
        strId = aId.join();
        return strId;
    };
    var getEmployessAssess = function () {
        var records = App.GrdUserAssess.selModel.getSelection();
        var aId = new Array();
        var strId = '';
        for (var i = 0, r; r = records[i]; i++) {
            aId[i] = records[i].get('ID');
        }
        strId = aId.join();
        return strId;
    };
    var reloadGrid = function () {
        var records = App.GrdUserPerform.getStore();
        for (var i = 0; i < records.getCount() ; i++) {
            var record = records.data.items[i].data;
            if (record.ID == App.IsPerform.value) {
                record.IsPerform = true;
            }
            if (record.ID == App.IsCheck.value) {
                record.IsCheck = true;
            }
            if (record.ID == App.IsAudit.value) {
                record.IsAudit = true;
            }
            if (record.ID == App.IsApproval.value) {
                record.IsApproval = true;
            }

        };
        App.GrdUserPerform.getView().refresh();
    };
    var setCheck = function () {
        var records = App.GrdUserPerform.getStore();
        for (var i = 0; i < records.getCount() ; i++) {
            var record = records.data.items[i].data;
            if (App.IsCheck.value != record.ID) {
                record.IsCheck = false;
            }
            if (App.IsAudit.value != record.ID) {
                record.IsAudit = false;
            }
            if (App.IsPerform.value != record.ID) {
                record.IsPerform = false;
            }
            if (App.IsApproval.value != record.ID) {
                record.IsApproval = false;
            }

        };
        App.GrdUserPerform.getView().refresh();
    };

</script>



