@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend;
<script type="text/javascript">
    function onDepartmentReadyForTask(records) {
        App.hdfTaskPartialViewDepartmentID.setValue(records[0].get('id'));
        App.gpTaskPartialView.getStore().reload();
    };
</script>
@(Html.X().Hidden().ID("hdfTaskPartialViewDepartmentID"))
@(Html.X().Window().ID("WinTask")
.Title("Danh sách công việc")
.Icon(Icon.ApplicationSideList)
.Layout(LayoutType.Border)
.Width(950)
.Height(470)
.Constrain(true)
.Modal(true)
.Resizable(false)
.Maximizable(true)
.BodyPadding(0)
.Center()
.Border(true)
.Items(
Html.X().DepartmentPanel().Handler("onDepartmentReadyForTask").MarginSpec("1 0 1 1"),
Html.X().TreePanel()
    .Split(true)
    .AutoScroll(true)
    .RootVisible(false)
    .RowLines(true).ColumnLines(true)
    .SyncFx()
    .Region(Region.Center)
    .ColumnLines(true)
        .ID("gpTaskPartialView")
        .Border(true)
                  .Store(
                  Html.X().TreeStore()
                                    .AutoSync(false)
                                    .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("LoadTreeTaskParents", "Task"))
                                    .Reader(Html.X().JsonReader().Root("data")).IDParam("id"))
                                          .Parameters(ps =>
                                                {
                                                    ps.Add(new StoreParameter("dpId", "App.hdfTaskPartialViewDepartmentID.getValue()", ParameterMode.Raw));
                                                }
                                            )
                                    .Model(
                                    Html.X().Model().Fields(
                                            new ModelField("id"),
                                            new ModelField("text", ModelFieldType.String),
                                            new ModelField("ParentID", ModelFieldType.Int),
                                            new ModelField("CategoryName", ModelFieldType.String),
                                            new ModelField("LevelID", ModelFieldType.Int),
                                            new ModelField("LevelName", ModelFieldType.String),
                                            new ModelField("LevelColor", ModelFieldType.String),
                                            new ModelField("StartTime", ModelFieldType.String),
                                            new ModelField("EndTime", ModelFieldType.String),
                                            new ModelField("CompleteTime", ModelFieldType.Date),
                                            new ModelField("IsNew", ModelFieldType.Boolean),
                                            new ModelField("IsEdit", ModelFieldType.Boolean),
                                            new ModelField("IsComplete", ModelFieldType.Boolean),
                                            new ModelField("IsAudit", ModelFieldType.Boolean),
                                            new ModelField("IsPass", ModelFieldType.Boolean),
                                            new ModelField("IsPause", ModelFieldType.Boolean),
                                            new ModelField("IsOverTime", ModelFieldType.Boolean),
                                            new ModelField("PerformBy", ModelFieldType.Int),
                                            new ModelField("CheckBy", ModelFieldType.Int),
                                            new ModelField("AuditBy", ModelFieldType.Int),
                                            new ModelField("Status", ModelFieldType.String),
                                            new ModelField("Rate", ModelFieldType.Float),
                                            new ModelField("Cost", ModelFieldType.Float),
                                            new ModelField("Content", ModelFieldType.String),
                                            new ModelField("Note", ModelFieldType.String)
                                        )
                                    )
                                )
        .ColumnModel(
            Html.X().RowNumbererColumn()
                .Text("STT")
                .StyleSpec("font-weight: bold; text-align: center;")
                .Width(35)
                .Locked(true)
                .Align(Alignment.Center),
                Html.X().TreeColumn()
                .Text("Tên công việc")
                .Wrap(true)
                .StyleSpec("font-weight: bold; text-align: center;")
                .DataIndex("text")
                .Width(400)
                .HeaderItems(
                    Html.X().TriggerField()
                        .EnableKeyEvents(true)
                        .Triggers(
                            Html.X().FieldTrigger().Icon(TriggerIcon.Clear)
                        )
                        .Listeners(l =>
                        {
                            l.KeyUp.Fn = "filterTree";
                            l.KeyUp.Buffer = 250;

                            l.TriggerClick.Fn = "clearFilter";
                        })
                        )
                .Locked(true),
                Html.X().ComponentColumn().Text("Thời gian thực hiện").Filterable(false)
                .Columns(
                    Html.X().Column()
                        .Width(120)
                        .Text("Bắt đầu")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Align(Alignment.Center)
                        .DataIndex("StartTime"),
                    Html.X().Column()
                        .Width(120)
                        .Text("Kết thúc")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Align(Alignment.Center)
                        .DataIndex("EndTime")
                ),
            Html.X().ComponentColumn()
                    .Text("Tiến độ")
                    .Filterable(false)
                    .StyleSpec("font-weight: bold; text-align: center;")
                    .Component(Html.X().ProgressBar().Text("%"))
                    .Listeners(ls => ls.Bind.Handler = "cmp.updateProgress(record.get('Rate')/100, record.get('Rate') + '%');"),
            Html.X().Column()
                    .Width(100)
                    .Text("Trạng thái")
                             .Filterable(false)
                    .StyleSpec("font-weight: bold; text-align: center;")
                    .Align(Alignment.Center)
                    .DataIndex("Status"),
            Html.X().Column()
                    .Width(100)
                    .Text("Mức độ")
                    .Filterable(false)
                    .DataIndex("LevelName")
                    .Align(Alignment.Center)
                    .StyleSpec("font-weight: bold; text-align: center;")
                    .Renderer(new Renderer { Fn = "function(value, meta, record) { meta.style = 'background-color:' + record.get('LevelColor') + ';'; return value; }" }),
            Html.X().Column()
                    .Text("Danh mục")
                          .Filterable(false)
                    .StyleSpec("font-weight: bold; text-align: center;")
                    .DataIndex("CategoryName")
                    .Align(Alignment.Left)
                    .Width(200)
        )
                .SelectionModel(
                    Html.X().RowSelectionModel().Mode(SelectionMode.Single)
                )

                )
    .Buttons(
            Html.X().Button()
                    .TabIndex(17)
                    .Icon(Icon.Accept)
                    .Text("Chọn")
                    .Handler("onSelectTask(App.gpTaskPartialView.selModel.getSelection().length>0? App.gpTaskPartialView.selModel.getSelection()[0].get('id'):0);"),
            Html.X().Button()
                    .TabIndex(18)
                    .Icon(Icon.Cancel)
                    .Text("Thoát")
                    .Handler("this.up('window').close();")
        )
)
