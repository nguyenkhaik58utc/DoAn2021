@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.CalendarOverrideItem
@(Html.X().Window()
.ID("winEditService")
.Title("Sửa thông tin ngày thay đổi")
.Icon(Icon.Pencil)
.Width(620)
.BodyPadding(6)
        .Listeners(ls => ls.Close.Handler = " App.stDateOverride.reload();ReloadHighLight();")
.Constrain(true)
.Modal(true)
.Layout(LayoutType.Fit)
.Items(
Html.X().FormPanel()
    .ID("frEditCalendarOverride")
.Layout(LayoutType.Form)
.Frame(true)
.Padding(0)
.StyleSpec("border: none;")
.FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
.Items(
Html.X().HiddenFor(m => m.ID),
             Html.X().ComboBoxFor(m => m.TaskCalendarEventID)
                            .ID("cbTaskCalendarEvent")
                        .MarginSpec("0 0 0 0")
                        .FieldLabel("Loại lịch" + Html.Required())
                        .EmptyText("Chọn loại lịch")
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Editable(false)
                        .ColumnWidth(0.481)
                        .Tpl(
                        @<text>
                            <tpl for=".">
                                <div class="x-boundlist-item"><div style="text-align: center; width: 100%; background-color: {Color}; border: #cecece 1px solid;">{Name}</div></div>
                            </tpl>
                        </text>
                            )
                        .Store(
                            Html.X().Store()
                                    .ID("stTaskCalendarEvent")
                                .AutoLoad(true)
                                .Model(
                                    Html.X().Model().IDProperty("ID")
                                        .Fields(
                                            new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                            new ModelField("Name", ModelFieldType.String) { Mapping = "Name" },
                                            new ModelField("Color", ModelFieldType.String) { Mapping = "Color" },
                                            new ModelField("IsWorking", ModelFieldType.Boolean) { Mapping = "IsWorking" }
                                        )
                                )
                                .Proxy(Html.X().AjaxProxy()
                                                .Url(Url.Action("LoadStoreIsUse", "TaskCalendarEvent", new { area = "Task" }))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                )
                              )
                              .Listeners(l => l.Change.Handler = "changeColor(App.cbTaskCalendarEvent, App.stTaskCalendarEvent);updateEvent();"),
                            Html.X().GridPanel()
                             .ID("GridCalendarTimeOverride")
                            .Height(240)                         
                            .MarginSpec("2 0 0 0")
                            .Border(true)
                            .Header(true)
                            .Title("Thiết lập thời gian làm việc")
                            .TopBar(
                             Html.X().Toolbar()
                                     .Items(
                            Html.X().ButtonCreate()
                                        .ID("btnAddCalendarTimeOverride")
                                        .Handler("addRecordTimeOverride(this.up('grid'));"),                          
                            Html.X().ButtonDelete()
                                        .ID("butDeleteCalendarTimeOverride")
                                           .Handler("deleteRecordCalendarTimeOverride(this.up('grid'));")
                         
                        )
                )
                .Store(
                    Html.X().Store()
                            .ID("stCalendarTimeOverride")
                        .AutoLoad(true)
                        .Proxy(
                            Html.X().AjaxProxy()
                                            .Url(Url.Action("LoadDataTimeOverride", "CalendarOverride"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                        )
                        .Parameters(ps =>
                                    {
                                        ps.Add(new StoreParameter("id", Model.ID.ToString(), ParameterMode.Raw));
                                    })
                        .RemoteSort(false)
                        .RemotePaging(true)
                        .PageSize(20)
                        .Model(
                            Html.X().Model()
                                .Fields(
                                    Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                    Html.X().ModelField().Name("Name").Type(ModelFieldType.String),
                                    Html.X().ModelField().Name("StartTime").Type(ModelFieldType.String),
                                    Html.X().ModelField().Name("EndTime").Type(ModelFieldType.String)
                                )
                        )

                )
                .ColumnModel(
                    Html.X().RowNumbererColumn()
                        .Text("STT")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Width(33)
                        .Align(Alignment.Center),
                             Html.X().Column()
                                .Text("Tên")
                                .DataIndex("Name")
                                .Flex(1)
                                .StyleSpec("font-weight: bold; text-align: center;")
                                .Width(180)
                                .Wrap(true)
                                .Editor(
                                    Html.X().TextField()
                                ),             
                        Html.X().DateColumn()
                            .Text("Bắt đầu")
                            .DataIndex("StartTime")
                            .StyleSpec("font-weight: bold; text-align: center;")
                            .Width(100)
                            .Format("g:i A")                 
                            .Wrap(true)
                            .Editor(
                                Html.X().TimeField().Format("g:i A")
                            ),
                             Html.X().DateColumn()
                            .Text("Kết thúc")
                            .DataIndex("EndTime")
                            .StyleSpec("font-weight: bold; text-align: center;")
                            .Width(100)
                            .Format("g:i A")                            
                            .Wrap(true)
                            .Editor(
                                Html.X().TimeField().Format("g:i A")
                            ),
                
                    Html.X().CommandColumn()
                            .ID("commandCol")
                            .Text("Chức năng")
                            .StyleSpec("font-weight: bold; text-align: center;")
                            .Width(70)
                            .Commands(
                                Html.X().GridCommand()
                                    .CommandName("save")
                                    .Icon(Icon.Disk)
                                    .ToolTip(tt => tt.Text = "Lưu")
                                    ,
                                Html.X().GridCommand()
                                    .CommandName("reject")
                                    .Icon(Icon.ArrowUndo)
                                    .ToolTip(tt => tt.Text = "Hủy")
                            )
                            .Listeners(ls => ls.Command.Handler = "handlecmdCalendarEdit(command, this.up('grid') );")
                    )
                .SelectionModel(
               Html.X().RowSelectionModel()
                   .Mode(SelectionMode.Single)
                       .Listeners(ls => ls.Select.Handler = "App.butDeleteCalendarTimeOverride.setDisabled(false);")
                )
                .Plugins(Html.X().CellEditing())
                .BottomBar(
                      Html.X().CustomPagingToolbar())
                
    
    
    )
)
.Buttons(
    Html.X().ButtonExit()
    )
)
<script>
    var changeColor = function (obj, store) {
        var id = obj.getValue();
        var record = store.getById(id);
        var color = record.get('Color');
        obj.setFieldStyle('background-image: none; background-color: ' + color + ';');
        App.GridCalendarTimeOverride.setDisabled(record.get('IsWorking'));
    };
    var handlecmdCalendarEdit = function (cmd, grid) {
        var records = grid.selModel.getSelection();
        var id = records[0].get('ID'), name = records[0].get('Name'),startTime = records[0].get('StartTime'), endTime = records[0].get('EndTime');
        if (cmd == 'save') {
            if (startTime == '' || endTime == '') {
                Ext.MessageBox.show({
                    title: 'Thông báo', msg: 'Thời gian bắt đầu và thời gian kết thúc không được để trống!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Exclamation',
                    fn: function (btn) {
                        return false;
                    }
                });
                return;
            } else {

                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("UpdateTime", "CalendarOverride", new { Area = "Task" }, null))',
                    params: { id: id == null ? 0 : id, calendarId: '@Model.ID',name:name, startTime: startTime, endTime: endTime },
                    success: function (result) {
                        if (result == 'Error') {
                            Ext.MessageBox.show({
                                title: 'Thông báo', msg: 'Mức độ ưu tiên đã tồn tại. Vui lòng nhập tên khác!',
                                buttons: { yes: 'Đồng ý' },
                                iconCls: '#Exclamation',
                                fn: function (btn) {
                                    records[0].reject();
                                    return false;
                                }
                            });
                        }
                    }
                });
            }

        }
        if (cmd == 'reject') {
            records[0].reject();
        }
    };
    function addRecordTimeOverride(grid) {
        grid.store.insert(0, {Name:'Ca', StartTime: '', EndTime: '' });
        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 });
    };
    var deleteRecordCalendarTimeOverride = function (grid) {
        var records = grid.selModel.getSelection();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("DeleteTime", "CalendarOverride", new { Area = "Task" }, null))',
            params: { id: records[0].get('ID')},
            success: function (result) {
                if (result == 'Error') {
                    Ext.MessageBox.show({
                        title: 'Thông báo', msg: 'Đã xảy ra lỗi trong quá trình thao tác dữ liệu!',
                        buttons: { yes: 'Đồng ý' },
                        iconCls: '#Exclamation',
                        fn: function (btn) {
                            return false;
                        }
                    });
                }
            }
        });
    };
    var updateEvent = function () {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("UpdateEvent", "CalendarOverride", new { Area = "Task" }, null))',
            params: { id: '@Model.ID', eventId: App.cbTaskCalendarEvent.getValue()},
            success: function (result) {

            }
        });
    };
</script>