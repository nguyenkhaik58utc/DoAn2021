@model System.Collections.IEnumerable
@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend
@{
    Layout = "~/Views/Shared/_Layout.cshtml"; 
}

@(Html.X().ChartTheme()
    .ThemeName("White")
    .Axis(new SpriteAttributes { Stroke = "rgb(8,69,148)", StrokeWidth = 1 })
    .AxisLabel(new SpriteAttributes { Fill = "rgb(8,69,148)", Font = "12px Arial", FontFamily = "Arial" })
    .AxisTitle(new SpriteAttributes { Font = "bold 18px Arial" })
)
@(Html.X().Viewport()
          .Layout(LayoutType.Border)
            .StyleSpec("border: none;")
            .Items (
        Html.X().Panel()
                .MarginSpec("1 0 1 1")
                .Region(Region.West)
                .Title("XEM THỐNG KÊ DƯỚI DẠNG DỮ LIỆU")
                .TitleAlign(TitleAlign.Center)
                .Icon(Icon.ApplicationViewDetail)
                .Collapsible(true)
                .Split(true)
                .Header(false)
                .Border(true)
                .Layout(LayoutType.Fit)
                .Width(700)
                .Items (
          Html.X().TreePanel()
                    .Layout(LayoutType.Fit)
                    .Split(true)
                    .Region(Region.West)
                    .ID("gpDepartmentStatisticalTask")
                    .Listeners(ls =>
                    {
                        ls.Load.Handler = "expandDepartment(records);";
                    })
                    .TitleAlign(TitleAlign.Center)
                    .Border(false)
                    .AutoScroll(true)
                    .RootVisible(false)
                    .ColumnLines(true)
                    .RowLines(true)
                    .TopBar(
            Html.X().Toolbar()
                    .ID("tbgpDepartmentStatisticalTask")
                    .Items(
                        Html.X().SearchByDate("refreshDepartment();onSelect();").FromDateID("dfFromDate").ToDateID("dfToDate"),
                            Html.X().ToolbarSeparator(),
                                                             Html.X().ButtonExportExcelFile().GridIDGetFile("gpDepartmentStatisticalTask").isTree(true),                                   
                        Html.X().ToolbarFill()
                                )
                                )
                        .Store(
                        Html.X().TreeStore().ID("stDepartmentStatisticalTask")
                            .AutoLoad(false)
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetData"))
                            .Reader(Html.X().JsonReader().Root("data")).IDParam("id"))
                            .Parameters(ps =>
                                {
                                    ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                                    ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                                })
                            .Model(
                                Html.X().Model()
                                        .Fields(
                                            Html.X().ModelField().Name("id"),
                                            Html.X().ModelField().Name("text"),
                                            Html.X().ModelField().Name("ParentID"),
                                            Html.X().ModelField().Name("TotalTask"),
                                            Html.X().ModelField().Name("TotalPause"),
                                            Html.X().ModelField().Name("TotalDoing"),
                                            Html.X().ModelField().Name("TotalOverTime"),
                                            Html.X().ModelField().Name("TotalFinish"),
                                            Html.X().ModelField().Name("TotalFinishOverTime"),
                                            Html.X().ModelField().Name("TotalAuditNot"),
                                            Html.X().ModelField().Name("TotalAuditGood"),
                                            Html.X().ModelField().Name("TotalAuditFail")
                                            )
                                        )
                                )
                                .ColumnModel(
                                    Html.X().TreeColumn()
                                            .Text("Phòng ban")
                                            .Width(300)
                                            .DataIndex("text"),
                                    Html.X().Column()
                                            .DataIndex("TotalTask")
                                                .Renderer("renderTotalTask")
                                            .Text("Tổng số công việc")
                                            .Width(120)
                                            .Align(Alignment.Right),
                                    Html.X().ComponentColumn()
                                            .Text("Kết quả thực hiện")
                                            .Columns(
                                                Html.X().Column()
                                                        .DataIndex("TotalPause")
                                                        .Text("Tạm dừng")
                                                        .Renderer("renderPauseTask")
                                                        .Width(100).Align(Alignment.Right),
                                                Html.X().Column()
                                                        .DataIndex("TotalOverTime")
                                                        .Text("Quá hạn")
                                                        .Renderer("renderOverTimeTask")
                                                        .Width(100)
                                                        .Align(Alignment.Right),
                                                Html.X().Column()
                                                        .DataIndex("TotalDoing")
                                                        .Renderer("renderDoingTask")
                                                        .Text("Đang thực hiện")
                                                        .Width(100)
                                                        .Align(Alignment.Right),
                                                Html.X().Column()
                                                        .DataIndex("TotalFinish")
                                                        .Text("Hoàn thành")
                                                        .Renderer("renderFinishTask")
                                                        .Width(100)
                                                        .Align(Alignment.Right),
                                                Html.X().Column()
                                                        .DataIndex("TotalFinishOverTime")
                                                        .Text("Hoàn thành quá hạn")
                                                        .Renderer("renderFinishOverTimeTask")
                                                        .Width(130)
                                                        .Align(Alignment.Right)
                                            ),
                                                Html.X().ComponentColumn()
                                                    .Text("Kết quả đánh giá")
                                                    .Columns(
                                                    Html.X().Column()
                                                            .DataIndex("TotalAuditNot")
                                                            .Text("Chưa đánh giá")
                                                            .Renderer("renderAuditNotTask")
                                                            .Width(100).Align(Alignment.Right),
                                                    Html.X().Column()
                                                            .DataIndex("TotalAuditGood")
                                                            .Text("Đạt")
                                                            .Renderer("renderAuditGoodTask")
                                                            .Width(60)
                                                            .Align(Alignment.Right),
                                                    Html.X().Column()
                                                            .DataIndex("TotalAuditFail")
                                                            .Renderer("renderAuditFailTask")
                                                            .Text("Không đạt")
                                                            .Width(80)
                                                            .Align(Alignment.Right)
                                                )
                                    )
                                    .SelectionModel(
                                Html.X().RowSelectionModel()
                                        .Mode(SelectionMode.Single)
                                        .Listeners(l =>
                                        {
                                            l.Select.Handler = "onSelect();";
                                        })
                                        )
                                    ),
                    Html.X().Panel()
                        .Layout(LayoutType.Fit)
                        .MarginSpec("1 1 1 0")
                        .Region(Region.Center)
                        .AutoScroll(false)
                        .Header(false)
                        .Border(true)
                        .TopBar(
                    Html.X().Toolbar()
                        .Items(
                        Html.X().ComboBox()
                                .FieldLabel("Biểu đồ")
                                .Width(300)
                                .MarginSpec("0 0 0 5")
                                .LabelWidth(50)
                                .SelectedItems("0")
                                .ID("cbSelectChart")
                                    .Items(
                                    new ListItem() { Value = "0", Text = "Biểu đồ hình tròn kết quả thực hiện(%)", },
                                    new ListItem() { Value = "1", Text = "Biểu đồ cột kết quả thực hiện(SL)" },
                                    new ListItem() { Value = "2", Text = "Biểu đồ hình tròn kết quả đánh giá(%)" },
                                    new ListItem() { Value = "3", Text = "Biểu đồ cột kết quả đánh giá(SL)" }
                                            )
                            .Listeners(ls => ls.Select.Handler = "onComboboxSelect(this);"),
                        Html.X().ToolbarFill(),
                        Html.X().ButtonTutorial()
                        )                   
                        )
                    .Items(
                    Html.X().Panel()
                        .Layout(LayoutType.Fit)
                        .ID("pChart0")
                        .Title("<b>Biểu đồ hình tròn kết quả thực hiện(%)</b>")
                        .Header(false)
                        .Border(false)
                        .TopBar(Html.X().Toolbar()
                        .Items(
                            Html.X().Button()
                                .Text("Tải lại dữ liệu")
                                .Icon(Icon.ArrowRefresh)
                                .Handler("#{Chart0}.getStore().reload()"),
                            Html.X().ToolbarSeparator(),
                            Html.X().Button()
                                .Icon(Icon.Style)
                                .Text("Kiểu vành khăn")
                                .EnableToggle(true)
                                .Listeners(l => l.Toggle.Handler = "#{Chart0}.series.first().donut = pressed ? 35 : false;#{Chart0}.refresh();"),
                            Html.X().ToolbarSeparator(),
                            Html.X().Button()
                                .Text("Lưu biểu đồ")
                                .Icon(Icon.Disk)
                                .Handler("saveChart")
                        )
                    )
                .Items(
                    Html.X().Chart()
                        .ID("Chart0")
                        .Animate(true)               
                        .Shadow(true)
                        .InsetPadding(30)
                        .Theme("Base:gradients")
                        .StandardTheme(StandardChartTheme.Base)
                        .LegendConfig(Html.X().ChartLegend().Position(LegendPosition.Float).LabelFont("9px Helvetica,sans-serif"))
                        .StyleSpec("background:#fff;")
                        .Store(
                        Html.X().Store()
                        .ID("stChart0")
                        .AutoLoad(false)
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("id", "App.gpDepartmentStatisticalTask.getSelectionModel().getLastSelected().get('id')", ParameterMode.Raw));
                                ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                            })
                        .Model(Html.X().Model()
                        .Fields(
                                Html.X().ModelField().Name("Name"),
                                Html.X().ModelField().Name("Data1")
                            )
                            )
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("GetDataPie"))
                            .Reader(Html.X().JsonReader().Root("data"))
                        )
                        )
                    .Series(
                Html.X().PieSeries()
                    .AngleField("Data1")
                    .ShowInLegend(true)
                    .Donut(0)
                    .Highlight(true)
                    .HighlightSegmentMargin(20)
                        .Label(Html.X().SeriesLabel()
                        .Display(SeriesLabelDisplay.Rotate)
                        .Field(new [] { "Name" })
                        .Contrast(true)
                        .Font("12px Helvetica,sans-serif")
                        .Orientation(Orientation.Horizontal)
                        )
                        .Tips(Html.X().ChartTip()
                        .TrackMouse(true)
                        .Width(170)
                        .Height(28)
                        .Renderer(r => r.Fn = "tipRenderer")
                         )
                        )
                     ),
                    Html.X().Panel()
                        .Layout(LayoutType.Fit)
                        .ID("pChart1")
                        .Title("<b>Biểu đồ cột kết quả thực hiện(SL)</b>")
                        .Hidden(true)
                        .Border(false)
                        .Header(false)
                        .TopBar(Html.X().Toolbar()
                        .Items(
                    Html.X().Button()
                        .Text("Tải lại")
                        .Icon(Icon.ArrowRefresh)
                            .Handler("#{Chart1}.getStore().reload()"),
                    Html.X().ToolbarSeparator(),
                    Html.X().Button()
                        .Text("Lưu biểu đồ")
                        .Icon(Icon.Disk)
                        .Handler("saveChart")
                             )
                        )
                        .Items (
                            Html.X().Chart()
                        .ID("Chart1")
                        .Shadow(true)
                        .Theme("White")
                        .InsetPadding(30)
                        .Animate(true)
                            .Background(Html.X().DrawBackground()
                                .Gradient(Html.X().Gradient()
                                .GradientID("backgroundGradient")
                                .Angle(45)
                                .Stops(s =>
                                {
                                    s.Add(Html.X().GradientStop()
                                        .Offset(0)
                                        .Color("#ffffff"));
                                    s.Add(Html.X().GradientStop()
                                        .Offset(100)
                                        .Color("#eaf1f8"));
                                })
                            )
                        )
                        .Store(Html.X().Store()
                            .ID("stChart1")
                            .Model(Html.X().Model()
                            .Fields(
                                        Html.X().ModelField().Name("Name"),
                                        Html.X().ModelField().Name("Data1")
                            )
                           )
                            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("id", "App.gpDepartmentStatisticalTask.getSelectionModel().getLastSelected().get('id')", ParameterMode.Raw));
                                ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                                ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                            })
                            .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("GetDataColumn"))
                                .Reader(Html.X().JsonReader().Root("data"))
                          )
                        )
                        .Axes(
                            Html.X().NumericAxis()
                            .Fields("Data1")
                            .Position(Position.Bottom)
                            .Grid(true)
                            .Title("Biểu đồ thống kê công việc")
                            .Minimum(0)
                                .Label(Html.X().AxisLabel()
                                    .Renderer(r => r.Handler = "return Ext.util.Format.number(value, '0,0');")
                            ),
                            Html.X().CategoryAxis()
                            .Position(Position.Left)
                            .Fields("Name")
                            )
                            .Series(Html.X().BarSeries()
                            .Axis(Position.Bottom)
                            .Highlight(true)
                            .XField("Name")
                            .YField("Data1")
                                .Tips(Html.X().ChartTip()
                                .TrackMouse(true)
                                .Width(210)
                                .Height(28)
                                    .Renderer(r => r.Handler = "this.setTitle(storeItem.get('Name') + ': ' + storeItem.get('Data1') + ' công việc');")
                                )
                            .Label(Html.X().SeriesLabel()
                            .Display(SeriesLabelDisplay.InsideEnd)
                            .Field(new[] { "Data1" })
                            .Orientation(Orientation.Horizontal)
                            .Color("#333")
                            .TextAnchor("middle")
                            )
                         )
                       ),
                    Html.X().Panel()
                        .Layout(LayoutType.Fit)
                        .ID("pChart2")
                            .Title("<b>Biểu đồ hình tròn kết quả đánh giá(%)</b>")
                        .Hidden(true)
                        .Border(false)
                        .Header(false)
                        .TopBar(Html.X().Toolbar()
                        .Items(
                        Html.X().Button()
                            .Text("Tải lại dữ liệu")
                            .Icon(Icon.ArrowRefresh)
                            .Handler("#{Chart2}.getStore().reload()"),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button()
                            .Icon(Icon.Style)
                            .Text("Kiểu vành khăn")
                            .EnableToggle(true)
                            .Listeners(l => l.Toggle.Handler = "#{Chart2}.series.first().donut = pressed ? 35 : false;#{Chart2}.refresh();"),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button()
                            .Text("Lưu biểu đồ")
                            .Icon(Icon.Disk)
                            .Handler("saveChart")
                                )
                            )
                        .Items(
                    Html.X().Chart()
                        .ID("Chart2")
                        .Animate(true)
                        .Shadow(true)
                        .InsetPadding(30)
                        .Theme("Base:gradients")
                        .StandardTheme(StandardChartTheme.Base)
                        .LegendConfig(Html.X().ChartLegend().Position(LegendPosition.Bottom))
                        .StyleSpec("background:#fff;")
                        .Store(Html.X().Store()
                        .ID("stChart2")
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("id", "App.gpDepartmentStatisticalTask.getSelectionModel().getLastSelected().get('id')", ParameterMode.Raw));
                            ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                        })
                        .Model(Html.X().Model()
                        .Fields(
                                Html.X().ModelField().Name("Name"),
                                Html.X().ModelField().Name("Data1")
                                    )
                                )
                                    .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("GetDataAuditPie"))
                                        .Reader(Html.X().JsonReader().Root("data"))
                                )
                            )
                                .Series(
                                Html.X().PieSeries()
                                .AngleField("Data1")
                                .ShowInLegend(true)
                                .Donut(0)
                                .Highlight(true)
                                .HighlightSegmentMargin(20)
                                    .Label(Html.X().SeriesLabel()
                                    .Display(SeriesLabelDisplay.Rotate)
                                    .Field(new [] { "Name" })
                                    .Contrast(true)
                                        .Font("12px Helvetica,sans-serif")
                                    .Orientation(Orientation.Horizontal)
                                )
                                    .Tips(Html.X().ChartTip()
                                    .TrackMouse(true)
                                    .Width(170)
                                    .Height(28)
                                    .Renderer(r => r.Fn = "tipRenderer")
                                )
                            )
                            ),
                        Html.X().Panel()
                            .Layout(LayoutType.Fit)
                            .ID("pChart3")
                            .Title("<b>Biểu đồ cột kết quả đánh giá(SL)</b>")
                            .Hidden(true)
                            .Border(false)
                            .Header(false)
                            .TopBar(
                            Html.X().Toolbar()
                            .Items(
                        Html.X().Button()
                            .Text("Tải lại")
                            .Icon(Icon.ArrowRefresh)
                            .Handler("#{Chart3}.getStore().reload()"),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button()
                            .Text("Lưu biểu đồ")
                            .Icon(Icon.Disk)
                            .Handler("saveChart")
                                 )
                            )
                            .Items(
                    Html.X().Chart()
                            .ID("Chart3")
                            .Shadow(true)
                            .Theme("White")
                            .InsetPadding(30)
                            .Animate(true)
                            .Background(Html.X().DrawBackground()
                            .Gradient(Html.X().Gradient()
                            .GradientID("backgroundGradient")
                            .Angle(45)
                            .Stops(s =>
                            {
                                s.Add(Html.X().GradientStop()
                                    .Offset(0)
                                    .Color("#ffffff"));
                                s.Add(Html.X().GradientStop()
                                    .Offset(100)
                                    .Color("#eaf1f8"));
                            })
                        )
                    )
                    .Store(Html.X().Store()
                        .ID("stChart3")
                        .Model(Html.X().Model()
                        .Fields(
                            Html.X().ModelField().Name("Name"),
                            Html.X().ModelField().Name("Data1")
                         )
                        )
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("id", "App.gpDepartmentStatisticalTask.getSelectionModel().getLastSelected().get('id')", ParameterMode.Raw));
                            ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                        })
                        .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("GetDataAuditColumn"))
                            .Reader(Html.X().JsonReader().Root("data"))
                      )
                    )
                        .Axes(
                    Html.X().NumericAxis()
                            .Fields(new string[] { "Data1" })
                            .Grid(true)
                            .Title("Đơn vị: Công việc")
                            .Minimum(0)
                            .Label(Html.X().AxisLabel()
                            .Renderer(r => r.Handler = "return Ext.util.Format.number(value, '0,0');")
                    ),
                    Html.X().CategoryAxis()
                            .Position(Position.Bottom)
                            .Fields("Name")
                            .Title("Biểu đồ thống kê công việc")
                             )
                        .Series(
                    Html.X().ColumnSeries()
                        .Axis(Position.Bottom)
                        .Highlight(true)
                        .XField("Name")
                        .YField("Data1")
                            .Tips(Html.X().ChartTip()
                            .TrackMouse(true)
                            .Width(210)
                            .Height(28)
                                .Renderer(r => r.Handler = "this.setTitle(storeItem.get('Name') + ': ' + storeItem.get('Data1') + ' công việc');")
                        )
                        .Label(Html.X().SeriesLabel()
                        .Display(SeriesLabelDisplay.InsideEnd)
                        .Field(new[] { "Data1" })
                        .Orientation(Orientation.Horizontal)
                        .Color("#333")
                        .TextAnchor("middle")
                       )
                      )
                    )
                    )
                )
)
<script type="text/javascript">
    var onSelect = function () {
        var charId = "Chart" + App.cbSelectChart.getValue();
        Ext.getCmp(charId).getStore().reload();
    };
    var onComboboxSelect = function (obj) {
        var records = obj.store.getAllRange();
        for (var i = 0; i < records.length; i++) {
            var pcharId = "pChart" + records[i].data.field1;
            Ext.getCmp(pcharId).hide();
        };
        Ext.getCmp("pChart" + obj.value).show();
        Ext.getCmp("Chart" + obj.value).getStore().reload();
    };
    var tipRenderer = function (storeItem, item) {
        this.setTitle(storeItem.get('Name'));
    };
    var saveChart = function (btn) {
        Ext.MessageBox.confirm('Lưu biểu đồ', 'Bạn có muốn lưu biểu đồ dưới dạng ảnh không?', function (choice) {
            if (choice == 'yes') {
                btn.up('panel').down('chart').save({
                    type: 'image/png'
                });
            }
        });
    };
    var getDepartmentID = function () {
    var records = App.gpDepartmentStatisticalTask.selModel.getSelection();
    if (records.length > 0) {
        return records[0].get('id');
    } else {
        return 0;
    }
    };
    var showTaskStatiscal = function (storeUrl) {
        var records = App.gpDepartmentStatisticalTask.selModel.getSelection();
        var departmentID = 0;
        if (records.length > 0) {
            departmentID = records[0].get('id');
        }
        var url = '@(Url.Action("TaskViewStatistical", "DepartmentStatisticalTask", new { Area = "Task" }))';
        var params = {
            urlStore: storeUrl,
            Name: 'departmentId',
            Value: departmentID,
            Mode: '@(ParameterMode.Value)',
            fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
            toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
        };
        onDirectMethod(url, params);
    };
    var renderTotalTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadTotalTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderPauseTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadPauseTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderOverTimeTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadOverTimeTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderDoingTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadDoingTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderFinishTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadFinishTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderFinishOverTimeTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadFinishOverTimeTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderAuditNotTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadAuditNotTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderAuditGoodTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadAuditGoodTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var renderAuditFailTask = function (value) {
        var urlStoreTask = '@(Url.Action("LoadAuditFailTasks", "DepartmentStatisticalTask", new { Area = "Task" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showTaskStatiscal(\'" + urlStoreTask.toString() + "\')\">" + value + "</a>";
    };
    var recordDepartments = null;
    var expandDepartment = function (records) {
        if (records.length > 0) {
            for (var i = 0; i < records.length; i++) {
                var node = records[i];
                if (recordDepartments != null && checkExpandDepartment(node)) {
                    node.expand();
                }
                else if (node.getDepth() < 2 && !node.data.leaf && !node.data.expanded) {
                    node.expand();
                }
            }
        }
        if (App.gpDepartmentStatisticalTask.selModel.getCount() <= 0) {
            setDepartmentSelection(0);
        }
    };
    var checkExpandDepartment = function (record) {
        var check = false;
        recordDepartments.forEach(function (obj) {
            if (!check && obj.id == record.data.id) {
                check = obj.expanded;
                if (obj.selected) {
                    setDepartmentSelection(record);
                }
            }
        })
        return check;
    };
    var getDepartmentRecords = function () {
        var records = App.gpDepartmentStatisticalTask.getView().store.getRange();
        var node = getDepartmentSelection();
        var data = [];
        records.forEach(function (obj) {
            var selected = obj.data.id == node.data.id;
            var item = {
                id: obj.data.id,
                expanded: obj.data.expanded,
                selected: selected
            };
            data.push(item);
        });
        return data;
    };
    var setDepartmentSelection = function (record) {
        if (record != null) {
            App.gpDepartmentStatisticalTask.selModel.select(record);
        }
    };
    var getDepartmentSelection = function () {
        return App.gpDepartmentStatisticalTask.getSelectionModel().getLastSelected();
    };
    var reloadDepartment = function () {
        recordDepartments = getDepartmentRecords();
        var node = getDepartmentSelection();
        App.gpDepartmentStatisticalTask.store.reload({ node: node.parentNode });
    };
    var reloadDepartmentNode = function () {
        recordDepartments = getDepartmentRecords();
        var node = getDepartmentSelection();
        App.gpDepartmentStatisticalTask.store.reload({ node: node });
        node.data.leaf = false;
        node.data.expanded = true;
        node.expand();
    };
    var refreshDepartment = function () {
        recordDepartments = getDepartmentRecords();
        App.gpDepartmentStatisticalTask.selModel.deselectAll()
        App.gpDepartmentStatisticalTask.getRootNode().reload();
    };
</script>