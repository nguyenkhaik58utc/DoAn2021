@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.TaskRequestItem
@( Html.X().Window()
    .Title("Thêm mới đề xuất thực hiện công việc")
    .Icon(Icon.Add)
    .ID("wdAddTaskRequest")
    .Height(1)
    .Height(500)
    .Width(800)
    .Maximized(true)
    .Constrain(true)
    .Maximizable(true)
    .Layout(LayoutType.Fit)
    .Modal(true)
    .Resizable(false)
    .BodyPadding(0)
    .Border(false)
    .Center()
    .Items(
    Html.X().FormPanel()
            .Layout(LayoutType.Border)
            .StyleSpec("border: none;")
            .ID("frmTaskRequest")
            .Border(false)
            .Items(
            Html.X().TabPanel()
            .Region(Region.Center)
            .ActiveTabIndex(0)
            .Border(true)
            .Items(
            Html.X().Panel()
                    .BodyPadding(6)
                    .Icon(Icon.ApplicationViewDetail)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                    .StyleSpec("border: none;")
                    .Title("Nội dung công việc đề xuất thực hiện")
                    .Frame(true)
                    .Items(
                Html.X().ComboBoxFor(m => m.ParentID)
                    .FieldLabel("Phát sinh từ công việc")
                    .EmptyText("Chọn công việc cha ...")
                    .ID("cbParentID")
                    .AllowBlank(true)
                    .QueryMode(DataLoadMode.Local).Editable(false)
                    .ForceSelection(true)
                    .HideBaseTrigger(true)
                    .DisplayField("Name")
                    .ValueField("ID")
                    .Store(
                        Html.X().Store()
                                .AutoLoad(true)
                                .Model(Html.X().Model()
                                .IDProperty("ID")
                                .Fields(
                                    new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" })
                                )
                                .Proxy(
                                Html.X().AjaxProxy()
                                        .Url(Url.Action("LoadComboTask", "Task", new { area = "Task" }))
                                        .Reader(Html.X().JsonReader().Root("data")))
                                    )
                        .Triggers(
                        Html.X().FieldTrigger()
                                .Icon(TriggerIcon.SimpleEdit).Tag("c").Qtip("Chọn công việc cha"),
                         Html.X().FieldTrigger()
                                 .Icon(TriggerIcon.SimpleDelete).Tag("x").Qtip("Xóa")
                            )
                            .Listeners(ls => { ls.TriggerClick.Fn = "searchFieldTriggerClick"; }),
                    Html.X().TextFieldFor(m => m.Name)
                            .ID("txtName")
                            .AllowOnlyWhitespace(false)
                            .FieldLabel("Tên công việc" + Html.Required())
                            .EmptyText("Nhập tên công việc")
                            .MaxLength(100)
                            .AllowBlank(false)
                            .BlankText("Tên công việc không được bỏ trống!"),
                    Html.X().ComboBoxFor(m => m.TaskCategoryID)
                            .FieldLabel("Nhóm công việc" + Html.Required())
                            .EmptyText("Chọn nhóm công việc")
                            .AllowBlank(false)
                            .Editable(false)
                            .BlankText("Nhóm công việc không được bỏ trống!")
                            .DisplayField("Name")
                            .ValueField("ID")
                            .Store(
                                Html.X().Store()
                                    .AutoLoad(false)
                                    .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("GetDataIsUse", "TaskCategory", new { area = "Task" }))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                    )
                                    .Model(Html.X().Model()
                                        .Fields(
                                            new ModelField("ID"),
                                            new ModelField("Name")
                                        )
                                    )
                            ),
                    Html.X().DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).Multiple(false).AllowBlank(false).Height(25),
                    Html.X().Container().Layout(LayoutType.Column).ColSpan(2).MarginSpec("0 0 0 0").Items(
                    Html.X().DateTimeFieldFor(m => m.StartTime)
                            .AllowBlank(false)
                            .FieldLabel("Bắt đầu" + Html.Required())
                            .ColumnWidth(0.5)
                            .ID("dfStart")
                            .MarginSpec("0 5 5 0"),
                    Html.X().DateTimeFieldFor(m => m.EndTime)
                            .LabelWidth(120)
                            .AllowBlank(false)
                            .FieldLabel("Kết thúc" + Html.Required())
                            .ColumnWidth(0.5)
                            .MarginSpec("0 0 5 0")),
                    Html.X().Container().Layout(LayoutType.Column).ColSpan(2).MarginSpec("0 0 5 0").Items(
         Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 5 0 0").ColumnWidth(0.5).Items(
         Html.X().NumberFieldFor(m => m.Cost)
                 .MinValue(0)
                 .AllowDecimals(true)
                 .Icon(Icon.Coins)
                 .FieldLabel("Chi phí dự tính")
                 .MarginSpec("0 5 0 0")
                 .ColumnWidth(0.7),
         Html.X().TextField().Text("VNĐ")
                 .Icon(Icon.MoneyDollar)
                 .ColumnWidth(0.3)
                 ),
     Html.X().ComboBoxFor(m => m.TaskLevelID)
             .ID("cbLevelID")
             .MarginSpec("0 0 5 0")
             .FieldLabel("Mức độ công việc" + Html.Required())
             .EmptyText("Chọn mức độ công việc")
             .LabelWidth(120)
             .BlankText("Mức độ ưu tiên chưa được chọn!")
             .DisplayField("Name")
             .ValueField("ID")
             .Editable(false)
             .ColumnWidth(0.5)
                 .Tpl(
                 @<text>
                     <tpl for=".">
                         <div class="x-boundlist-item" style="display: inline-block; width: 100%;">
                             <div style="width: 50px; height: 20px; float: left; background-color: {Color}; border: #cecece 1px solid;">&nbsp;</div><div style="width: auto; float: left">&nbsp;{Name}</div>
                         </div>
                     </tpl>
                 </text>)
             .Store(
                 Html.X().Store()
                     .ID("stTaskLevel")
                     .AutoLoad(false)
                     .Model(
                         Html.X().Model().IDProperty("ID")
                             .Fields(
                                 new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                 new ModelField("Name", ModelFieldType.String) { Mapping = "Name" },
                                 new ModelField("Color", ModelFieldType.String) { Mapping = "Color" }
                             )
                     )
                     .Proxy(Html.X().AjaxProxy()
                             .Url(Url.Action("LoadStoreIsUse", "TaskLevel", new { area = "Task" }))
                         .Reader(Html.X().JsonReader().Root("data"))
                     )
             )
             .Listeners(l => l.Select.Handler = "getColor(App.cbLevelID, App.stTaskLevel);")
                     ),
                     Html.X().TextAreaFor(m => m.Contents)
                             .ID("txtContent")
                             .FieldLabel("Nội dung công việc")
                             .EmptyText("Nhập nội dung chi tiết cho công việc")
                             .Flex(1),
                     Html.X().EmployeeFieldFor(m => m.Perform).ReadOnly(true).AllowBlank(false).Title("Người thực hiện" + Html.Required()).MarginSpec("0 0 5 105"),
                          Html.X().TextAreaFor(m => m.Reason).FieldLabel("Lý do" + Html.Required())
                     
                                         )
                              ),
                                Html.X().ApprovalPanelFor(m => m)
                              )
          
                )
                
            .Buttons(
                Html.X().ButtonSave()
                    .ID("btnSave")
                    .DirectEvents(de =>
                                {
                                    de.Click.Before = @"if (!App.frmTaskRequest.getForm().isValid()) { return false; } ";
                                    de.Click.Action = "Insert";
                                    de.Click.ExtraParams.Add(new { IsEdit = false });
                                    de.Click.FormID = "frmTaskRequest";
                                }),
                Html.X().ButtonExit()
            )
)

<script type="text/javascript">
    var searchFieldTriggerClick = function (field, trigger, index) {
        var me = field;
        if (index == 1) {
            me.setValue('');
        }
        else {
            showTask();
        }
    };
    var showTask = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTaskPartialView", "Task", new { Area = "Task" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectTask = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn công việc cha?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbParentID.setValue(parseInt(id));
            App.WinTask.close();
        };
    };
    var showTaskEmloyee = function () {
        var url = '@(Url.Action("EmployeeWindow", "Task", new { Area = "Task" }))';
        onDirectMethod(url);
    };

</script>