@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@{
    int userID = ViewData["UserLogOn"] != null ? (int)ViewData["UserLogOn"] : 0;
    var productDevelopmentRequirementPlanID = ViewData["ProductDevelopmentRequirementPlanID"] != null ? ViewData["ProductDevelopmentRequirementPlanID"].ToString() : "0";
}
@(Html.X().Window()
          .ID("winDocumentProduction")
          .Title("Danh sách tài liệu thiết kế sản phẩm")
          .Icon(Icon.Pencil)
          .Width(960)
          .Height(500)
          .Layout(LayoutType.Fit)
          .Constrain(true)
          .Modal(true)
          .BodyPadding(0)
          .Border(true)
          .Items(
            Html.X().GridPanel()
            .ID("GrDocument")
            .Title("Danh sách tài liệu")
            .Header(false)
            .Region(Region.Center)
            .ColumnLines(true)
            .ForceFit(true)
            .Border(false)
            .Icon(Icon.TextListBullets)
            .TopBar(
                Html.X().Toolbar()
                    .Layout(LayoutType.HBox)
                    .Items(
                        Html.X().ButtonCreate().Handler("ShowInsert"),
                        Html.X().ToolbarSeparator(),
                        Html.X().ButtonUpdate().ID("btnEdit").Handler("ShowEdit"),
                        Html.X().ToolbarSeparator(),
                        Html.X().ButtonView().ID("btnDetail").Handler("ShowDetail"),
                        Html.X().ToolbarSeparator(),
                        Html.X().ButtonApproval().ID("btnApprove").Handler("ShowApprove"),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button().Text("Ban hành").Icon(Icon.PageForward).ID("btnIssues").Disabled(true).Handler("ShowIssues"),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button().Text("Đề nghị Sửa đổi").ID("btnInsertModified").Icon(Icon.CommentAdd).Disabled(false)
                            .Handler("RequiredEdits();").Disabled(true),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button().Text("Sửa đổi").ID("btnModifield").Icon(Icon.PageRefresh).Disabled(true).Handler("ShowModified"),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button().Text("Phân phối").Icon(Icon.PageCode).ID("btnDistribution").Disabled(true).Handler("ShowDistribution"),//
                        Html.X().ToolbarSeparator(),
                        Html.X().Button().Text("Thu hồi").Icon(Icon.PageRed).ID("btnDestroy").Disabled(true)
                            .Handler("ShowDestroy")
                      )
                   )
            .Store(
                Html.X().Store()
                    .AutoLoad(true)
                    .ID("StDocument")
                    .RemotePaging(true)
                         .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("productDevelopmentRequirementPlanID", productDevelopmentRequirementPlanID, ParameterMode.Value));
                            })
                  .PageSize(20)
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadData", "PerformPlan")).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                    .Model(
                        Html.X().Model().Fields(
                        Html.X().ModelField().Name("ID"),
                        Html.X().ModelField().Name("Name"),
                        Html.X().ModelField().Name("Code"),
                        Html.X().ModelField().Name("Version"),
                        Html.X().ModelField().Name("Type"),
                        Html.X().ModelField().Name("IssuedDate"),
                        Html.X().ModelField().Name("IssuedTime"),
                        Html.X().ModelField().Name("FormH"),
                        Html.X().ModelField().Name("FormS"),
                        Html.X().ModelField().Name("Security"),
                        Html.X().ModelField().Name("Status"),
                        Html.X().ModelField().Name("Note"),
                        Html.X().ModelField().Name("Color"),
                        Html.X().ModelField().Name("IsEdit"),
                        Html.X().ModelField().Name("IsApproval"),
                        Html.X().ModelField().Name("IsAccept"),
                        Html.X().ModelField().Name("IsPublic"),
                        Html.X().ModelField().Name("IsObs"),
                        Html.X().ModelField().Name("HasRequest"),
                        Html.X().ModelField().Name("ApprovalBy")
                        )
                    )
            )
            .ColumnModel(
                Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                Html.X().Column().DataIndex("Code").Text("Mã số Tài liệu").Width(110),
                Html.X().Column().DataIndex("Name").Text("Tên Tài liệu").Flex(1),
                Html.X().Column().DataIndex("Type").Text("Loại Tài liệu").Width(100).Align(Alignment.Center),
                Html.X().DateColumnExtend().DataIndex("IssuedDate").Text("Ngày ban hành").Width(100).Format("dd/MM/yyyy").Align(Alignment.Center),
                Html.X().Column().DataIndex("IssuedTime").Text("Lần ban hành").Width(100).Align(Alignment.Right),
                Html.X().ComponentColumn().Text("Hình thức lưu trữ").Columns(
                Html.X().CheckColumn().DataIndex("FormH").Text("Bản cứng").Width(80),
                Html.X().CheckColumn().DataIndex("FormS").Text("Bản mềm").Width(80)
                       ),
                Html.X().Column().DataIndex("Security").Text("Mức độ mật").Width(100).Align(Alignment.Center)
                    .Renderer(new Renderer { Fn = "function(value, meta, record) { meta.style = 'background-color:' + record.get('Color') + ';'; return value; }" })
                ,
                Html.X().Column().DataIndex("Status").Text("Trạng thái").Width(100).Align(Alignment.Center)

                )
            .SelectionModel(
                Html.X().CheckboxSelectionModel()
                    .ShowHeaderCheckbox(false)
                    .Mode(SelectionMode.Single)
                    .Listeners(l => l.SelectionChange.Handler = "checkStatusDocumentProduction();")

                        ).BottomBar(Html.X().CustomPagingToolbar())
                )
        .Buttons(
                Html.X().ButtonExit()
                )
)
<script>
    var getColor = function (obj, store) {
        var id = obj.getValue();
        var record = store.getById(id);
        var color = record.get('Color');
        obj.setFieldStyle('background-image: none; background-color: ' + color + ';');
    };
    var ShowInsert = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Insert", "PerformPlan", new { Area = "DevelopmentProduct" }, null))',
            params: { productDevelopmentRequirementPlanID: '@(productDevelopmentRequirementPlanID)' },
            success: function (result) {
                mask.hide();
            }
        });
    };
    var ShowEdit = function () {
        var record = App.GrDocument.selModel.getSelection();
        if (record.length > 0) {
            var url = '@(Url.Action("Update", "Document", new { Area = "Document" },null))';
            var params = { id: record[0].get('ID') };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        }
    };
    var ShowDetail = function () {
        var record = App.GrDocument.selModel.getSelection();
        if (record.length > 0) {
            var url = '@(Url.Action("Detail", "Document", new { Area = "Document" },null))';
            var params = { id: record[0].get('ID') };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        }
    };
    var ShowApprove = function () {
        var record = App.GrDocument.selModel.getSelection();
        if (record.length > 0) {
            var url = '@(Url.Action("Approve", "Document", new { Area = "Document" },null))';
            var params = { id: record[0].get('ID') };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        }
    };
    var ShowModified = function () {
        var record = App.GrDocument.selModel.getSelection();
        if (record.length > 0) {
            var url = '@(Url.Action("Modified", "PerformPlan", new { Area = "DevelopmentProduct" }, null))';
            var params = { id: record[0].get('ID'), productDevelopmentRequirementPlanID: '@(productDevelopmentRequirementPlanID)' };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        }
    };
    var ShowDistribution = function () {
        var record = App.GrDocument.selModel.getSelection();
        if (record.length > 0) {
            var url = '@(Url.Action("Distribution", "Document", new { Area = "Document" },null))';
            var params = { id: record[0].get('ID') };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        }
    };
    var ShowDestroy = function () {
        var record = App.GrDocument.selModel.getSelection();
        if (record.length > 0) {
            var url = '@(Url.Action("Obsolete", "Document", new { Area = "Document" },null))';
            var params = { id: record[0].get('ID') };
            onDirectMethod(url, params, 'get');
        }
        else {
            MessageBox();
        }
    };
    var ShowIssues = function (cmd) {
        var record = App.GrDocument.selModel.getSelection();
        var id = record[0].get('ID');
        var ck = record[0].get('HasRequest');
        var isPublic = record[0].get('IsPublic');
        if (ck) {
            Ext.MessageBox.show({
                title: 'Xác nhận', msg: 'Tài liệu đã chọn đang có yêu cầu Sửa đổi. Bạn có chắc chắn muốn thay đổi trạng thái Ban hành của Tài liệu không?',
                buttons: { yes: 'Đồng ý', no: 'Không' },
                iconCls: '#Information',
                fn: function (btn) {
                    if (btn == 'yes') {
                        var url = '@(Url.Action("Issued", "Document", new { Area = "Document" }, null))';
                        var params = { id: id };
                        onDirectMethod(url, params, 'get');
                    }
                }
            });

        } else {
            var url = '@(Url.Action("Issued", "Document", new { Area = "Document" }, null))';
            var params = { id: id };
            onDirectMethod(url, params, 'get');
        }
    };
    var RequiredEdits = function () {
        var record = App.GrDocument.selModel.getSelection();
        var id = record[0].get('ID');
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("InsertModified", "Request", new { Area = "Document" }, null))',
            params: { id: id }
        });
    };
    var ShowFrmDocCate = function () {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ShowFrmDocCate", "Document", new { Area = "Document" }, null))'
        });
    };
    var viewFile = function (orgName, filename) {
        if (orgName != '') {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("CheckAttachmentExist", "Document", new { Area = "Document" }, null))',
                params: { oriName: filename },
                success: function (result) {
                    if (result == 'false') {
                        Ext.Msg.alert('Thông báo lỗi', 'Tệp đính kèm \"<b>' + orgName + '</b>\" không tồn tại!');
                    } else {
                        var id = 'DownloadAttachment' + orgName;
                        var icon = '#Attach';
                        var title = 'Tệp đính kèm: ' + orgName;
                        var link = '@Url.Action("DownloadAttachment", "Document")?oriName=' + filename;
                        window.parent.customTab(id, icon, title, link);
                        return;

                    }
                }
            });
        }
    };
    var deleteFileUpload = function (docID, attId, fname, oname, idx, idgrid) {
        Ext.MessageBox.show({
            title: 'Xác nhận',
            msg: 'Bạn có chắc chắn muốn xóa tệp đính kèm có tên là <b>' + oname + '</b> không?',
            buttons: { yes: 'Đồng ý', no: 'Không' },
            iconCls: '#Help',
            fn: function (btn) {
                if (btn == 'yes') {

                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("RemoveFile", "Document", new { Area = "Document" }, null))',
                        params: { idAtt: attId, id: docID, fname: fname },
                        success: function (result) {
                            if (result == 'Success') {
                                Ext.getCmp(idgrid).store.removeAt(idx);
                            }
                        } 
                    });
                }
            }
        });
    };
    var checkStatusDocumentProduction = function () {
        var record = App.GrDocument.selModel.getSelection();
        if (record.length > 0) {
            App.btnDetail.setDisabled(false);
            if (record[0].get('IsEdit')) {
                App.btnEdit.setDisabled(false);
            }
            else {
                App.btnEdit.setDisabled(true);
            }
            if ((!record[0].get('IsEdit') && !record[0].get('IsApproval')) || (!record[0].get('IsAccept') && record[0].get('IsApproval'))) {
                if ('@userID' > 0 && record[0].get('ApprovalBy') == '@userID') {
                    App.btnApprove.setDisabled(false);
                }
                else {
                    App.btnApprove.setDisabled(true);
                }

            } else {
                App.btnApprove.setDisabled(true);
            }

            if (record[0].get('IsApproval') && record[0].get('IsAccept')) {
                App.btnIssues.setDisabled(false);
            } else
                App.btnIssues.setDisabled(true);
            if (record[0].get('IsApproval') && record[0].get('IsAccept') && record[0].get('IsPublic') && !record[0].get('IsObs')) {
                App.btnDistribution.setDisabled(false);
                App.btnInsertModified.setDisabled(false);
            } else {
                App.btnDistribution.setDisabled(true);
                App.btnInsertModified.setDisabled(true)
            }

            if (record[0].get('IsPublic') && !record[0].get('IsObs'))
                App.btnModifield.setDisabled(false);
            else
                App.btnModifield.setDisabled(true);
            if (record[0].get('IsObs')) {
                App.btnDestroy.setDisabled(false);
            } else
                App.btnDestroy.setDisabled(true);

        } else {
            App.btnDetail.setDisabled(true);
            App.btnEdit.setDisabled(true);
            App.btnApprove.setDisabled(true);
            App.btnIssues.setDisabled(true);
            App.btnModifield.setDisabled(true);
            App.btnDestroy.setDisabled(true);
        }
    };
</script>