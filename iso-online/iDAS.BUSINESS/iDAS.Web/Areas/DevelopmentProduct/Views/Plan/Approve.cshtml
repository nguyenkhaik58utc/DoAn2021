@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend;
@model iDAS.Items.ProductDevelopmentRequirementPlanItem
@{
    var X = Html.X();
    var requirmentId = ViewData["requirmentId"] != null ? ViewData["requirmentId"].ToString() : "0";
}
@(Html.X().Window()
    .Title("Phê duyệt kế hoạch phát triển sản phẩm")
    .Icon(Icon.Tick)
    .ID("wdApprove")
    .Height(550)
    .Width(1000)
    .Constrain(true)
    .Layout(LayoutType.Fit)
    .Modal(true)
    .Resizable(false)
    .BodyPadding(0)
    .Border(false)
    .Center()
    .Items(
   Html.X().FormPanel()
        .Layout(LayoutType.Border)
        .StyleSpec("border: none;")
        .ID("frmPlanApprovel")
        .Border(false)
        .Items(
            Html.X().TabPanel()
           .Region(Region.Center)
            .ActiveTabIndex(0)
            .Border(true)
            .Items(Html.X().Panel()
                .BodyPadding(6)
                .Icon(Icon.ApplicationViewDetail)
                .Layout(LayoutType.Form)
                .StyleSpec("border: none;")
                .Title("Thông tin kế hoạch")
                .Frame(true)
                .Items (
                        
                            Html.X().HiddenFor(m => m.ID).ReadOnly(true),
                                      Html.X().HiddenFor(m => m.ProductDevelopmentRequirementID),
                                     Html.X().HiddenFor(m => m.CreateByEmployeeID),
                                    Html.X().HiddenFor(m => m.UpdateByEmployeeID),
                            X.TextFieldFor(m => m.Name).EmptyText("Nhập tên kế hoạch ...").FieldLabel("Kế hoạch" + Html.Required()).AllowBlank(false).ReadOnly(true),
                                      
                        Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 0 0 0")
                        .Items(
                        Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu" + Html.Required()).ReadOnly(true).AllowBlank(false).ColumnWidth(0.55).MarginSpec("0 5 0 0"),
                        Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc" + Html.Required()).ReadOnly(true).AllowBlank(false).LabelWidth(75).ColumnWidth(0.45)
                            ),
                        X.Container().Layout(LayoutType.Column).MarginSpec("0 0 0 0")
                            .Items(
                                X.ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch" + Html.Required())
                                        .EmptyText("Chọn loại kế hoạch")
                                        .Items(new ListItem("Tổ chức", false),
                                                    new ListItem("Cá nhân", true)).ReadOnly(true)
                                            .AllowBlank(false).ColumnWidth(0.55).MarginSpec("0 5 0 0"),
                                X.NumberFieldFor(m => m.Cost).AllowBlank(false)
                                        .LabelWidth(76).ColumnWidth(0.45).MinValue(0)
                                            .FieldLabel("Chi phí" + Html.Required()).ReadOnly(true)
                            ),
                                X.DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).ReadOnly(true).AllowBlank(false).Height(25),
                            X.ComboBoxFor(m => m.TargetID).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...").ReadOnly(true)
                            .ID("cbxTarget")
                            .QueryMode(DataLoadMode.Local).Editable(false)
                            .ForceSelection(true)
                            .DisplayField("TargetName")
                            .ValueField("ID")
                            .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                                .IDProperty("ID")
                                                .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                                                .Reader(Html.X().JsonReader().Root("data"))))
                            .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                            ,
                            X.ComboBoxFor(m => m.ParentID).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...").ReadOnly(true)
                            .ID("cbxParentPlan")
                            .QueryMode(DataLoadMode.Local).Editable(false)
                            .ForceSelection(true)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .Store(Html.X().Store()
                                            .AutoLoad(true)
                                            .Model(Html.X().Model()
                                                    .IDProperty("ID")
                                                    .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                            new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                            .Proxy(Html.X().AjaxProxy()
                                                        .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                                                        .Reader(Html.X().JsonReader().Root("data"))))
                            .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                            ,
                            X.TextAreaFor(m => m.Content).FieldLabel("Nội dung").EmptyText("Nhập nội dung kế hoạch").ReadOnly(true).MinHeight(250).Flex(1)
                            
                            
                            )             
                    
                     ),
                     Html.X().ApprovalPanelFor(m => m)
        )
)
            .Buttons(
                 Html.X().Button()
                            .ID("btnAccept")
                            .TabIndex(17)
                            .Icon(Icon.Accept)
                            .Text("Lưu phê duyệt")
                            .DirectEvents(de =>
                                {
                                    de.Click.FormID = "frmPlanApprovel";
                                    de.Click.Url = Url.Action("Appproved");
                                    de.Click.Before = @"if (!#{frmPlanApprovel}.getForm().isValid()) {Ext.MessageBox.show({ title: 'Thông báo', msg: 'Kiểm tra các thông tin cần nhập!', buttons: { yes: 'Đồng ý' }, iconCls: '#Exclamation' }); return false; }";
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.EventMask.Msg = "Đang xử lý Dữ liệu...";
                                    de.Click.Success = "this.up('window').close();";
                                }),   
                Html.X().ButtonExit()
            )

)


<script>
    function CheckStatusApproval() {
        var records = App.grMnPlanIndex.selModel.getSelection();
        if (records.length == 1) {
            App.btnDetailView.setDisabled(false);
        }
        else {
            App.btnDetailView.setDisabled(true);
        };
    };
    var ViewDetailApproval = function () {
        var records = App.grMnPlanIndex.selModel.getSelection();
        var record = App.grRequirment.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmViewPlanDetail", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    requirmentId: record[0].get('ID')
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            MessageBox();
        }
    };
</script>




