@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web.ExtExtend;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    int userID = ViewData["UserLogOn"] != null ? (int)ViewData["UserLogOn"] : 0;
}
@(Html.X().Viewport()
          .Layout(LayoutType.Border)
            .StyleSpec("border: none;")
            .Items(
        Html.X().Panel()
                .MarginSpec("1 0 1 1")
                .Region(Region.West)
                .Title("XEM THỐNG KÊ DƯỚI DẠNG DỮ LIỆU")
                .TitleAlign(TitleAlign.Center)
                .Icon(Icon.ApplicationViewDetail)
                .Collapsible(true)
                .Split(true)
                .Header(false)
                .Border(true)
                .Layout(LayoutType.Border)
                .Width(700)
                .Items(
        Html.X().DepartmentPanel().Handler("selectDepartmentDispatch").Collapsed(true)
                        .Margin(1),
                        Html.X().Panel().Region(Region.Center)
                                    .Layout(LayoutType.Fit)
                                    .MarginSpec("-1 -1 -1 0")
                                    .Items(
                                            Html.X().GridPanel()
                                                    .Header(false)
                                                    .ID("grStatisticalDispatchEmployee")
                                                    .ColumnLines(true)
                                                    .ForceFit(true)
                                                    .Border(false)
                                                    .Icon(Icon.TextListBullets)
                                                    .TopBar(
                            Html.X().Toolbar().ID("tbgpStatisticalDispatchEmployee")
                    .Items(
                     Html.X().Hidden().ID("hdfDepartmentID").Value(0),
                                 Html.X().SearchByDate("App.StoreCustomerStatistical.reload();onSelect();").FromDateID("dfFromDate").ToDateID("dfToDate"),
                            Html.X().ToolbarSeparator(),
                                Html.X().Button()
                                        .Text("In báo cáo")
                                            .Hidden(false)
                                                .Handler("this.up('grid').print();")
                                        .Icon(Icon.Printer),
                                                Html.X().ToolbarFill()


                                ))
                                                    .Store(
                                                        Html.X().Store()
                                                            .ID("StoreCustomerStatistical")
                                                            .PageSize(20)
                                                            .AutoLoad(false)
                                                            .RemotePaging(true)
                                                            .Proxy(
                                                                Html.X().AjaxProxy().Url(Url.Action("GetData"))
                                                                    .Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                                                            .Parameters(ps =>
                                                                {
                                                                    ps.Add(new StoreParameter("id", "App.hdfDepartmentID.getValue()", ParameterMode.Raw));
                                                                    ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                                                                    ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                                                                })
                                                            .Model(
                                                                    Html.X().Model().IDProperty("EmployeeID").Fields(
                                                                            Html.X().ModelField().Name("EmployeeID"),
                                                                            Html.X().ModelField().Name("Avatar"),
                                                                            Html.X().ModelField().Name("EmployeeName"),
                                                                            Html.X().ModelField().Name("TotalDispatchTo"),
                                                                            Html.X().ModelField().Name("TotalDispatchToVerify"),
                                                                            Html.X().ModelField().Name("TotalDispatchGo"),
                                                                            Html.X().ModelField().Name("TotalDispatchGoVerify"),
                                                                            Html.X().ModelField().Name("TotalDispatchGoFromEmployee")
                                                                )
                                                            )
                                                        )
                                                    .ColumnModel(
                                                                  Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                                                  Html.X().Column().DataIndex("UserID").Hidden(true),
                                                                  Html.X().TemplateColumn().DataIndex("AttachmentFileID").Width(30).TdCls("AvatarColumn").Tpl(
                                                                  Html.X().XTemplate().Html(@<text>
                                                                    <img src='{Avatar}' style='width:30px;height:40px;' />
                                                                </text>)
                                                                       ).Filterable(false),
                                                                  Html.X().Column()
                                                                          .DataIndex("EmployeeName")
                                                                          .Text("Nhân sự")
                                                                          .Width(300)
                                                                          .Flex(1),
                                                                         Html.X().ComponentColumn()
                                                                    .Text("Công văn đến từ bên ngoài")
                                                                    .Columns(
                                                                        Html.X().Column()
                                                                                .DataIndex("TotalDispatchTo")
                                                                                .Text("Tổng số")
                                                                                .Renderer("renderTotalDispatchTo")
                                                                                .Width(80).Align(Alignment.Right),                                                                     
                                                                        Html.X().Column()
                                                                                .DataIndex("TotalDispatchToVerify")
                                                                                .Text("Đã xác nhận")
                                                                                .Renderer("renderDispatchToVerify")
                                                                                .Width(100)
                                                                                .Align(Alignment.Right)
                                                                                ),
                                                                            Html.X().ComponentColumn()
                                                                                    .Text("Công văn đến từ nội bộ")
                                                                                    .Columns(
                                                                            Html.X().Column()
                                                                                    .DataIndex("TotalDispatchGo")
                                                                                    .Text("Tổng số")
                                                                                    .Renderer("renderTotalDispatchGo")
                                                                                    .Width(80)
                                                                                    .Align(Alignment.Right),                                                                               
                                                                            Html.X().Column()
                                                                                    .DataIndex("TotalDispatchGoVerify")
                                                                                    .Text("Đã xác nhận")
                                                                                    .Renderer("renderDispatchGoVerify")
                                                                                    .Width(90).Align(Alignment.Right)
                                                                                    ),
                                                                            Html.X().Column()
                                                                                    .DataIndex("TotalDispatchGoFromEmployee")
                                                                                    .Text("Tổng số công văn đi")
                                                                                    .Renderer("renderTotalDispatchGoFromEmployee")
                                                                                    .Width(130)
                                                                                    .Align(Alignment.Right)
                                                                                
                                                                                )
                                                               .Plugins(
                                                                Html.X().FilterHeader()
                                                                        .Remote(true)
                                                                )
                                                        .SelectionModel(
                                                        Html.X().RowSelectionModel()
                                                        .SelectedIndex(0)
                                                                .Mode(SelectionMode.Single)
                                                                    .Listeners(ls => ls.SelectionChange.Handler = "onSelect();")
                                                                )
                                                        .BottomBar(Html.X().CustomPagingToolbar())
                                                        )
                                             ),

                                                  Html.X().Panel()
                                .Layout(LayoutType.Fit)
                                .MarginSpec("1 1 1 0")
                                .Region(Region.Center)
                                .AutoScroll(false)
                                .Header(false)
                                .Border(true)
                                .TopBar(
                            Html.X().Toolbar()
                                .Items(
                            Html.X().ComboBox()
                                .FieldLabel("Biểu đồ")
                                .Width(300)
                                .MarginSpec("0 0 0 5")
                                .LabelWidth(50)
                                .SelectedItems("0")
                                .ID("cbSelectChart")
                                    .Items(
                                        new ListItem() { Value = "0", Text = "Biểu đồ cột(SL)" }
                                        )
                                    .Listeners(ls => ls.Select.Handler = "onSelectCombobox(this);"),
                                Html.X().ToolbarFill(),
                                Html.X().ButtonTutorial()
                                )
                                )
                            .Items(
                            Html.X().Panel()
                                .Layout(LayoutType.Fit)
                                .ID("pChart0")
                                .Title("<b>Biểu đồ cột(SL)</b>")
                                .Border(false)
                                .Header(false)
                                .TopBar(Html.X().Toolbar()
                                .Items(
                            Html.X().Button()
                                .Text("Tải lại")
                                .Icon(Icon.ArrowRefresh)
                                .Handler("#{Chart0}.getStore().reload()"),
                            Html.X().ToolbarSeparator(),
                            Html.X().Button()
                                .Text("Lưu biểu đồ")
                                .Icon(Icon.Disk)
                                .Handler("saveChart")
                                     )
                                )
                                .Items(
                            Html.X().Chart()
                                .ID("Chart0")
                                   .Shadow(true)
                        .StandardTheme(StandardChartTheme.Category1)
                                .LegendConfig(Html.X().ChartLegend().Position(LegendPosition.Top)
                            .LabelFont("11px Tahoma")
                            .BoxStroke("#084594")
                                )
                        .Animate(true)
                            .Store(Html.X().Store()
                            .AutoLoad(true)
                                 .Parameters(ps =>
                                 {
                                     ps.Add(new StoreParameter("id", "App.grStatisticalDispatchEmployee.selModel.getSelection().length>0?App.grStatisticalDispatchEmployee.selModel.getSelection()[0].get('EmployeeID'):0", ParameterMode.Raw));
                                    ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                                    ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                                })
                                .Model(Html.X().Model()
                                .Fields(
                                        Html.X().ModelField().Name("Name"),
                                        Html.X().ModelField().Name("Data1"),
                                        Html.X().ModelField().Name("Data2")

                                )
                            )
                                .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("GetDataColumn"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                            )
                        )
                        .Axes(
                                Html.X().NumericAxis()
                                .Fields(new string[] { "Data1", "Data2" })
                                .Grid(true)
                                .Title("Đơn vị: công văn")
                                .Minimum(0)
                                    .Label(Html.X().AxisLabel()
                                    .Renderer(r => r.Handler = "return Ext.util.Format.number(value, '0,0');")
                                ),
                               Html.X().CategoryAxis()
                                .Position(Position.Bottom)
                                    .Fields("Name")
                                    .Width(400)
                                         .Label(Html.X().AxisLabel()
                                        .Font("10px Tahoma")
                                    )
                                    .Title("Biểu đồ thống kê công văn")
                                )
                            .Series(
                            Html.X().ColumnSeries()
                            .ShowInLegend(true)
                            .Axis(Position.Bottom)
                            .Highlight(true)
                                .XField("Name")
                                .YField(new string[] { "Data1", "Data2" })
                                .Titles(new string[] { "Tổng công văn", "Công văn đã xác nhận" })
                                .Tips(Html.X().ChartTip()
                                .TrackMouse(true)
                                .Width(200)
                                .Height(58)
                                    .Renderer(r => r.Handler = "this.setTitle('Tổng công văn: ' + storeItem.get('Data1') + '<br/> Công văn đã xác nhận: '+storeItem.get('Data2'));")
                                        )
                                    )
                                )
                            )
                       )
)
<script type="text/javascript">
    var onSelect = function () {
        var charId = "Chart" + App.cbSelectChart.getValue();
        Ext.getCmp(charId).getStore().reload();
    };
    var onSelectCombobox = function (obj) {
        var records = obj.store.getAllRange();
        for (var i = 0; i < records.length; i++) {
            var pcharId = "pChart" + records[i].data.field1;
            Ext.getCmp(pcharId).hide();
        };
        Ext.getCmp("pChart" + obj.value).show();
        Ext.getCmp("Chart" + obj.value).getStore().reload();
    };
    var saveChart = function (btn) {
        Ext.MessageBox.confirm('Lưu biểu đồ', 'Bạn có muốn lưu biểu đồ dưới dạng ảnh không?', function (choice) {
            if (choice == 'yes') {
                btn.up('panel').down('chart').save({
                    type: 'image/png'
                });
            }
        });
    };
    var getColor = function (obj, store) {
        var id = obj.getValue();
        var record = store.getById(id);
        var color = record.get('Color');
        obj.setFieldStyle('background-image: none; background-color: ' + color + ';');
    };
    var selectDepartmentDispatch = function (records) {
        App.hdfDepartmentID.setValue(records[0].get('id'));
        App.grStatisticalDispatchEmployee.getStore().load();
    };  
   var showDispatchStatiscal = function (storeUrl) {
       var records = App.grStatisticalDispatchEmployee.selModel.getSelection();
        var employeeId = 0;
        if (records.length > 0) {
            employeeId = records[0].get('EmployeeID');
        }
        var url = '@(Url.Action("DispatchToViewStatisticalPerson", "PersonStatisticalDispatch", new { Area = "Dispatch" }))';
        var params = {
            urlStore: storeUrl,
            Name: 'employeeId',
            Value: employeeId,
            Mode: '@(ParameterMode.Value)',
            fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
            toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
        };
        onDirectMethod(url, params);
    };
    var showDispatchGoStatiscal = function (storeUrl) {
        var records = App.grStatisticalDispatchEmployee.selModel.getSelection();
        var employeeId = 0;
        if (records.length > 0) {
            employeeId = records[0].get('EmployeeID');
        }
        var url = '@(Url.Action("DispatchGoViewStatistical", "PersonStatisticalDispatch", new { Area = "Dispatch" }))';
        var params = {
            urlStore: storeUrl,
            Name: 'employeeId',
            Value: employeeId,
            Mode: '@(ParameterMode.Value)',
            fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
            toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
        };
        onDirectMethod(url, params);
    };
    var renderTotalDispatchTo = function (value) {
        var urlStoreDispatch = '@(Url.Action("LoadTotalDispatchTo", "PersonStatisticalDispatch", new { Area = "Dispatch" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDispatchStatiscal(\'" + urlStoreDispatch.toString() + "\')\">" + value + "</a>";
    };
   
    var renderDispatchToVerify = function (value) {
        var urlStoreDispatch = '@(Url.Action("LoadTotalDispatchToVerify", "PersonStatisticalDispatch", new { Area = "Dispatch" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDispatchStatiscal(\'" + urlStoreDispatch.toString() + "\')\">" + value + "</a>";
    };
    var renderTotalDispatchGo = function (value) {
        var urlStoreDispatch = '@(Url.Action("LoadTotalDispatchGo", "PersonStatisticalDispatch", new { Area = "Dispatch" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDispatchGoStatiscal(\'" + urlStoreDispatch.toString() + "\')\">" + value + "</a>";
    };
    var renderDispatchGoVerify = function (value) {
        var urlStoreDispatch = '@(Url.Action("LoadTotalDispatchGoVerify", "PersonStatisticalDispatch", new { Area = "Dispatch" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDispatchGoStatiscal(\'" + urlStoreDispatch.toString() + "\')\">" + value + "</a>";
    };
    var renderTotalDispatchGoFromEmployee = function (value) {
        var urlStoreDispatch = '@(Url.Action("LoadTotalDispatchGoFromEmployee", "PersonStatisticalDispatch", new { Area = "Dispatch" }))';
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"showDispatchGoStatiscal(\'" + urlStoreDispatch.toString() + "\')\">" + value + "</a>";
    };   
    var ShowFrmStatistical = function (cmd) {
        if (cmd == 0) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ShowFrmAdd", "DispatchGoDepartment", new { Area = "Dispatch" }, null))'
            });
        }
        else {
            var record = App.grDispatchGoInfo.selModel.getSelection();
            if (record.length > 0) {
                var id = record[0].get('ID');
                if (cmd == 1) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("ShowFrmUpdate", "DispatchGoDepartment", new { Area = "Dispatch" }, null))', params: { id: id }
                    });
                }
                else if (cmd == 2) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("ShowFrmApprove", "DispatchGoDepartment", new { Area = "Dispatch" }, null))', params: { id: id }
                    });
                }
                else if (cmd == 3) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("ShowFrmMove", "DispatchGoDepartment", new { Area = "Dispatch" }, null))', params: { id: id }
                    });
                }
                else if (cmd == 4) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("ShowFrmVerify", "DispatchGoDepartment", new { Area = "Dispatch" }, null))', params: { id: id }
                    });
                }
                else if (cmd == 5) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("ShowFrmDetail", "DispatchGoDepartment", new { Area = "Dispatch" }, null))', params: { id: id, type: cmd }
                    });

                }
                else if (cmd == 6) {
                    Ext.net.DirectMethod.request({
                        url: '@(Url.Action("ShowFrmMoveOut", "DispatchGoDepartment", new { Area = "Dispatch" }, null))', params: { id: id }
                    });
                }
            }
        }
    };
    var showDepartment = function () {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("ShowDepartment", "Request", new { Area = "Document" }, null))'
        });
    };
    var checkStatusStatistical = function () {
        var record = App.grDispatchGoInfo.selModel.getSelection();
        if (record.length > 0) {
            App.btnDetail.setDisabled(false);
            if (record[0].get('IsEdit')) {
                App.btnApprove.setDisabled(true);
                App.btnEdit.setDisabled(false);
                App.butDelete.setDisabled(false);
                App.btnMove.setDisabled(true);
                App.btnMoveOut.setDisabled(true);
                App.btnVerify.setDisabled(true);
            }
            else if (!record[0].get('FlagApprove') && record[0].get('ApprovalBy') == '@userID') {
                App.btnApprove.setDisabled(false);
                App.btnEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                App.btnMove.setDisabled(true);
                App.btnMoveOut.setDisabled(true);
                App.btnVerify.setDisabled(true);
            }
            else if (!record[0].get('FlagApprove') && !record[0].get('IsEdit') && record[0].get('ApprovalBy') != '@userID')//Hiện nút Duyệt
            {
                App.btnApprove.setDisabled(true);
                App.btnEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                App.btnMove.setDisabled(true);
                App.btnMoveOut.setDisabled(true);
                App.btnVerify.setDisabled(true);
            }
            else if (record[0].get('FlagApprove') && !record[0].get('IsAccept') && !record[0].get('IsEdit')) {

                App.btnEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                App.btnApprove.setDisabled(true);
                App.btnMove.setDisabled(true);
                App.btnMoveOut.setDisabled(true);
                App.btnVerify.setDisabled(true);
            }
            else if (record[0].get('FlagApprove') && record[0].get('IsAccept') && !record[0].get('IsSend') && !record[0].get('IsVerify')) {
                App.btnEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                App.btnApprove.setDisabled(true);
                App.btnMove.setDisabled(false);
                App.btnMoveOut.setDisabled(false);
                App.btnVerify.setDisabled(true);
            }
            else if (record[0].get('FlagApprove') && record[0].get('IsSend') && !record[0].get('IsVerify')) {
                App.btnApprove.setDisabled(true);
                App.btnEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                App.btnMove.setDisabled(false);
                App.btnMoveOut.setDisabled(false);
                if (!record[0].get('FlagVerify'))
                    App.btnVerify.setDisabled(false);
                else
                    App.btnVerify.setDisabled(true);
            }
            else if (record[0].get('IsVerify')) {
                App.btnEdit.setDisabled(true);
                App.butDelete.setDisabled(true);
                App.btnApprove.setDisabled(true);
                App.btnMove.setDisabled(false);
                App.btnMoveOut.setDisabled(false);
                if (!record[0].get('FlagVerify'))
                    App.btnVerify.setDisabled(false);
                else
                    App.btnVerify.setDisabled(true);
            }

        } else {
            App.btnApprove.setDisabled(true);
            App.btnDetail.setDisabled(true);
            App.btnEdit.setDisabled(true);
            App.butDelete.setDisabled(true);
            App.btnMove.setDisabled(true);
            App.btnVerify.setDisabled(true);
        }
    };
    var deleteRecordStatistical = function () {
        var records = App.grDispatchGoInfo.selModel.getSelection();
        if (records.length == 0) {
            Ext.MessageBox.show({
                title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Cancel',
                fn: function (btn) {
                    App.btnEdit.setDisabled(true);
                    App.butDelete.setDisabled(true);
                    App.btnDetail.setDisabled(true);
                    return false;
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: 'Xác nhận', msg: 'Bạn có chắc chắn muốn xóa bản ghi đã chọn không?',
                buttons: { yes: 'Đồng ý', no: 'Không' },
                iconCls: '#Information',
                fn: function (btn) {
                    if (btn == 'yes') {
                        var aId = new Array();
                        var strId = '';
                        for (var i = 0, r; r = records[i]; i++) {
                            aId[i] = records[i].get('ID');
                        }
                        strId = aId.join();
                        Ext.net.DirectMethod.request({
                            url: '@(Url.Action("Delete", "DispatchGoDepartment", new { Area = "Dispatch" }, null))',
                            params: { stringId: strId }
                        });
                    }
                }
            });
        }
    };


</script>