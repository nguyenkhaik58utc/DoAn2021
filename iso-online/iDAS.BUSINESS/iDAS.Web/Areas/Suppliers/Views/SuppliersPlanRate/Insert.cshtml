@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.SupplierAuditPlanItem
@{
    var X = Html.X();
    
    
}
@(Html.X().Window()
          .ID("winNewPlan")
          .Title("Thêm mới kế hoạch đánh giá NCC")
          .Icon(Icon.Add)
              .Width(900)
            .Height(505)
        .Layout(LayoutType.Fit)
        .Constrain(true)
        .Modal(true)
        .BodyPadding(6)
             .Border(true)
          .Items (         
        Html.X().FormPanel()
                .ID("frmPlan")
                .Layout(LayoutType.VBox)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Frame(true)
                .StyleSpec("border: none;")
                .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
                .Items (
                    Html.X().HiddenFor(m => m.ID).ID("hdfPlanID").Value(0),                                 
                    X.TextFieldFor(m => m.Name).EmptyText("Nhập tên kế hoạch ...").FieldLabel("Kế hoạch" + Html.Required()).AllowBlank(false),
                    Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 -2 2 0")
                        .Items(
                                Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu" + Html.Required()).AllowBlank(false).ColumnWidth(0.55),
                                        Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc" + Html.Required()).AllowBlank(false).LabelWidth(75).ColumnWidth(0.45).MarginSpec("0 0 0 5")
                            ),
                                                    
                    X.Container().Layout(LayoutType.Column).MarginSpec("2 -1 4 0")
                        .Items(
                            X.ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch" + Html.Required())
                                    .EmptyText("Chọn loại kế hoạch")
                                    .Items(new ListItem("Tổ chức", false),
                                            new ListItem("Cá nhân", true))
                                    .AllowBlank(false).ColumnWidth(0.55),
                            X.NumberFieldFor(m => m.Cost).AllowBlank(false)
                                    .LabelWidth(76).ColumnWidth(0.45).MinValue(0).Value(0)
                                        .FieldLabel("Chi phí").MarginSpec("0 0 0 5")
                        ),
                        X.DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).AllowBlank(false).Multiple(false).Height(25),
                    X.ComboBoxFor(m => m.TargetID).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...")
                        .ID("cbxTarget")
                        .QueryMode(DataLoadMode.Local)
                        .ForceSelection(true)
                        .HideBaseTrigger(true)
                        .DisplayField("TargetName")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                    .AutoLoad(true)
                                    .Model(Html.X().Model()
                                    .IDProperty("ID")
                                    .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                            new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                                    .Proxy(Html.X().AjaxProxy()
                                            .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                                            .Reader(Html.X().JsonReader().Root("data"))))
                                    .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                                    .Listeners(ls => { ls.TriggerClick.Fn = "showTarget"; }),
                    X.ComboBoxFor(m => m.ParentID).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...")
                        .ID("cbxParentPlan")
                        .QueryMode(DataLoadMode.Local).Editable(false)
                        .HideBaseTrigger(true)
                        .ForceSelection(true)
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X().Model()
                                                .IDProperty("ID")
                                                .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                                                    .Reader(Html.X().JsonReader().Root("data"))))
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                        .Listeners(ls => { ls.TriggerClick.Fn = "showParentPlan"; }),
                    X.TextAreaFor(m => m.Content).FieldLabel("Nội dung").EmptyText("Nhập nội dung kế hoạch").ID("contentParent").MinHeight(100).Flex(1),
                      Html.X().EmployeeFieldFor(m => m.Approval).MarginSpec("-2 0 0 105").Title("Người phê duyệt" + Html.Required()).ID("approvalParent"))
                )
        .Buttons(
                Html.X().Button()
                            .Text("Gửi duyệt")
                            .ID("btnSendApprove")
                            .Icon(Icon.Mail)
                                    .DirectEvents(de =>
                                {
                                    de.Click.ExtraParams.Add(new { val = false });
                                    de.Click.Before = @"if (!App.frmPlan.getForm().isValid()) { return false; } ";
                                    de.Click.Action = "Update";
                                    de.Click.ExtraParams.Add(new { IsEdit = false });
                                    de.Click.ExtraParams.Add(new { IsApproval = false });
                                    de.Click.FormID = "frmPlan";
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.EventMask.Msg = "Đang xử lý Dữ liệu...";
                                    de.Click.Success = "if(result.result){this.up('window').close();}";
                                }),     
                Html.X().ButtonSave()
                .ID("btnSave")                
                .DirectEvents(de =>
                {
                    de.Click.ExtraParams.Add(new { val = false });
                    de.Click.Before = @"if (!App.frmPlan.getForm().isValid()) { return false; } ";
                    de.Click.Action = "Update";
                    de.Click.ExtraParams.Add(new { IsEdit = true });
                    de.Click.ExtraParams.Add(new { IsApproval = false });
                    de.Click.FormID = "frmPlan";
                    de.Click.Success = "if(result.result){this.up('window').close();}";
                    
                }),               
                Html.X().ButtonExit()
                )
    )
<script>
    var UpdateItemInsert = function () {
        var records = App.grMnPlanInsert.selModel.getSelection();
        var record = App.grCommand.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmUpdatePlanDetail", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    commandId: record[0].get('ID')
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            MessageBox();
        }
    };
    function CheckStatusInsert() {
        var records = App.grMnPlanInsert.selModel.getSelection();
        if (records.length == 1) {
                App.btnDetailInsert.setDisabled(false);
                App.btnUpdateInsert.setDisabled(false);
                App.btnDeleteInsert.setDisabled(false);          
           
        }
        else {
            App.btnDetailInsert.setDisabled(true);
            App.btnDeleteInsert.setDisabled(true);
            App.btnUpdateInsert.setDisabled(true);            
        };
    };
    var AddNewPlanDetail = function ()
    {
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("AddNewPlanDetail", "Plan", new { Area = "Service" }, null))',
            params: { serviceCommandContractID: App.cbxContractID.getValue(), parentId: App.hdfPlanID.getValue() },
            success: function (result) {
                mask.hide();
            }
        });
    };
    var showTarget = function () {
    var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
    mask.show();
    Ext.net.DirectMethod.request({
        url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
        success: function (result) {
            mask.hide();
        }
    });
    };
    var onSelectTarget = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxTarget.setValue(parseInt(id));
            App.WinTarget.close();
        };
    };
    var showParentPlan = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadPlanPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectPlan = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxParentPlan.setValue(parseInt(id));
            App.WinPlan.close();
        };

    };
    var ViewDetailInsert = function () {
        var records = App.grMnPlanInsert.selModel.getSelection();
        var record = App.grCommand.selModel.getSelection();
        if (records.length > 0) {
            var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
            mask.show();
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("FrmViewPlanDetail", "Plan", new { Area = "Service" }, null))',
                params: {
                    id: records[0].get('ID'),
                    commandId: record[0].get('ID')
                },
                success: function (result) {
                    mask.hide();
                }
            });
        }
        else {
            MessageBox();
        }
    };
</script>