@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.QualityTargetItem
@{
    int userEmployeeId = (int)ViewData["EmployeeId"];
}
@(Html.X().ApprovalSendWindow(employeeId: userEmployeeId)
    .UrlSubmit(Url.Action("Update"))
    .ItemsExtend(
        Html.X().FormPanel()
            .ID("frTargetEdit")
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
            .Frame(true)
            .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
            .Items(
            Html.X().HiddenFor(m => m.ID),
            Html.X().HiddenFor(m => m.IsApproval),
            Html.X().ComboBoxFor(m => m.ParentID)
                    .FieldLabel("Mục tiêu cha")
                    .ID("cbxTargetParent")
                    .Triggers(
                    Html.X().FieldTrigger()
                            .Icon(TriggerIcon.SimpleEdit)
                            .Tag("c")
                            .Qtip("Chọn mục tiêu cha"),
                    Html.X().FieldTrigger()
                            .Icon(TriggerIcon.SimpleDelete)
                            .Tag("x")
                            .Qtip("Xóa")
                        )
                    .Listeners(ls => { ls.TriggerClick.Fn = "searchFieldTriggerClick"; })
                    .HideBaseTrigger(true)
                    .Editable(false)
                    .Listeners(ls => ls.Change.Handler = "changeParent(this.value)")
                    .EmptyText("Chọn mục tiêu cha...")
                    .BlankText("Mục tiêu cha chưa được chọn!")
                    .DisplayField("TargetName")
                    .ValueField("ID")
                    .Store(
                Html.X().Store()
                    .ID("stParentTarget")
                    .AutoLoad(true)
                    .Model(
                Html.X().Model()
                    .IDProperty("ID")
                    .Fields(
                        new ModelField("ID", ModelFieldType.Int),
                        new ModelField("TargetName", ModelFieldType.String),
                        new ModelField("CompleteAt", ModelFieldType.Date)
                     )
                    )
                    .Proxy(
                    Html.X().AjaxProxy()
                    .Url(Url.Action("GetTargetParent"))
                    .Reader(Html.X().JsonReader().Root("data")
                    )
                    )
                ),
            Html.X().ComboBoxFor(m => m.QualityTargetCategoryID)
                    .ID("cbCategoryIDEdit")
                    .FieldLabel("Nhóm mục tiêu" + Html.Required())
                    .BlankText("Nhóm mục tiêu không được trống")
                    .AnchorHorizontal("100%")
                    .Editable(false)
                    .AllowBlank(false)
                    .TabIndex(1)
                    .QueryMode(DataLoadMode.Local)
                    .ForceSelection(true)
                    .DisplayField("Name")
                    .ValueField("ID")
                    .Store(Html.X().Store()
                    .AutoLoad(true)
                    .Model(Html.X().Model()
                    .IDProperty("ID")
                    .Fields(
                    new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                    )
                    )
                    .Proxy(Html.X().AjaxProxy()
                    .Url(Url.Action("GetDataActive", "TargetCategory"))
                    .Reader(Html.X().JsonReader().Root("data")
                    )
                    )
                    ),
            Html.X().TextFieldFor(m => m.Name)
                    .FieldLabel("Tên mục tiêu" + Html.Required())
                    .MaxLength(100)
                    .ID("txtName")
                    .AllowBlank(false),
            Html.X().Container()
                    .Layout(LayoutType.Column)
                    .ColSpan(2)
                    .MarginSpec("0 0 0 0")
                    .Items(
            Html.X().NumberFieldFor(m => m.Value)
                    .FieldLabel("Số lượng" + Html.Required())
                    .AllowBlank(false).MarginSpec("0 5 5 0")
                    .BlankText("Số lượng đạt bắt buộc nhập!")
                    .AllowOnlyWhitespace(false)
                    .ColumnWidth(0.7),
            Html.X().TextFieldFor(m => m.Unit)
                    .AllowBlank(false)
                    .MaxLength(70)
                    .FieldLabel("Đơn vị tính" +Html.Required())
                    .ID("txtUnit")
                    .ColumnWidth(0.3)
                    ),
            Html.X().DepartmentFieldFor(m => m.Department)
                    .FieldLabel("Phòng ban" + Html.Required())
                    .Multiple(false)
                    .AllowBlank(false)
                    .Height(25),
            Html.X().Container()
                    .Layout(LayoutType.Column)
                    .ColSpan(2)
                    .Items(
            Html.X().ComboBoxFor(m => m.Type)
                    .FieldLabel("Mục tiêu thuộc" + Html.Required())
                    .MarginSpec("0 5 5 0")
                    .ColumnWidth(0.3)
                    .Items(
                    new ListItem("Tổ chức", true),
                    new ListItem("Cá nhân", false)
                    ),
                Html.X().ComboBoxFor(m => m.QualityTargetLevelID)
                    .ID("cbLevelID")
                    .MarginSpec("0 0 5 0")
                    .ColumnWidth(0.5)
                    .AllowBlank(false)
                    .FieldLabel("Mức độ ưu tiên" + Html.Required())
                    .EmptyText("Chọn mức độ ưu tiên mục tiêu")
                    .BlankText("Mức độ ưu tiên chưa được chọn!")
                    .Triggers(
                    Html.X().FieldTrigger().Icon(TriggerIcon.SimpleAdd)
                    .Qtip("Danh sách mức độ ưu tiên của mục tiêu"))
                    .Listeners(ls =>
                    {
                        ls.TriggerClick.Fn = "showLevels";
                    })
                    .DisplayField("Name")
                    .ValueField("ID")
                    .Editable(false)
                    .Tpl(
                    @<text>
                        <tpl for=".">
                            <div class="x-boundlist-item" style="display: inline-block; width: 100%;">
                                <div style="width: 50px; height: 20px; float: left; background-color: {Color}; border: #cecece 1px solid;">&nbsp;</div><div style="width: auto; float: left">&nbsp;{Name}</div>
                            </div>
                        </tpl>
                    </text>
                        )
                    .Store(
                        Html.X().Store()
                            .ID("stQualityTargetLevel")
                            .AutoLoad(true)
                            .Model(
                                Html.X().Model().IDProperty("ID")
                                    .Fields(
                                        new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" },
                                        new ModelField("Color", ModelFieldType.String) { Mapping = "Color" }
                                    )
                            )
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("LoadStoreIsUse", "QualityTargetLevel", new { area = "Quality" }))
                                .Reader(Html.X().JsonReader().Root("data"))
                            )
                    )
                    .Listeners(l =>
                        {
                            l.Select.Handler = "getColorLevel(App.cbLevelID, App.stQualityTargetLevel);";
                            l.Change.Handler = "getColorLevel(App.cbLevelID, App.stQualityTargetLevel);";
                        })

            ),
            Html.X().TextAreaFor(m => m.Description)
                    .Flex(1)
                    .FieldLabel("Nội dung" + Html.Required())
                    .AllowBlank(false)
                    .Height(140)
                    .BlankText("Nội dung mục tiêu không được trống!")
                    .AllowOnlyWhitespace(false),
            Html.X().DateTimeFieldFor(m => m.CompleteAt, maxValue:Model.MaxValueCompleteAt)
                    .AllowBlank(false)
                    .FieldLabel("Ngày đạt" + Html.Required())
                    .MarginSpec("3 0 3 0")
                    .ID("dfCompleteAt")
                 )
            )
            .Title(Model.ID==0?"Thêm mới thông tin mục tiêu":"Sửa thông tin mục tiêu")
            .Listeners(ls => ls.Close.Handler = "App.gpTarget.getStore().load();")
            .Icon(Model.ID==0?Icon.Add:Icon.Pencil)
            .Header(true)
)
<script type="text/javascript">
    var showTarget = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var searchFieldTriggerClick = function (field, trigger, index) {
        var me = field;
        if (index == 1) {
            me.setValue('');
            var dt = App.dfCompleteAt.items.getAt(1);
            dt.setMaxValue(null);
        }
        else {
            showTarget();
        }
    };
    var showLevels = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("Index", "QualityTargetLevel", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectTarget = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn mục tiêu cha?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxTargetParent.setValue(parseInt(id));
            var record = App.cbxTargetParent.store.getById(id);
            var value = record.get('CompleteAt');
            var dt = App.dfCompleteAt.items.getAt(1);
            dt.setValue(value);
            dt.setMaxValue(value);
            App.WinTarget.close();
        };
    };
    var changeParent = function (id) {
        var record = App.cbxTargetParent.store.getById(id);
        var value = record.get('CompleteAt');
        var dt = App.dfCompleteAt.items.getAt(1);
        dt.setMaxValue(value);
    };
</script>