@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.QualityPlanItem
@{
    var X = Html.X();
    int userEmployeeId = (int)ViewData["EmployeeId"];
}
@(X.ApprovalSendWindow(employeeId: userEmployeeId)
    .UrlSubmit(Url.Action("Update"))
    .ItemsExtend(
        X.FormPanel()
            .AutoScroll(true)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
            .Frame(true)
            .FieldDefaults(df => { df.LabelWidth = 120; df.LabelStyle = "padding-left: 5px;"; })
            .PaddingSpec("5 10 0 0")
            .StyleSpec("-webkit-border-radius: 0; border-radius: 0;")
            .Items(
                Html.X().HiddenFor(m => m.ID),
                X.TextFieldFor(m => m.Name).EmptyText("Nhập tên kế hoạch ...").FieldLabel("Tên kế hoạch" + Html.Required()).AllowBlank(false),
                Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 -2 2 0")
                    .Items(
                            Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu"+Html.Required()).AllowBlank(false).ColumnWidth(0.55),
                            Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc" + Html.Required()).AllowBlank(false).LabelWidth(70).ColumnWidth(0.45)
                        ),
                X.Container().Layout(LayoutType.Column).MarginSpec("2 -1 4 0")
                    .Items(
                        X.ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch" + Html.Required())
                                .EmptyText("Chọn loại kế hoạch")
                                .Items( new ListItem("Tổ chức", false),
                                        new ListItem("Cá nhân", true))
                                .AllowBlank(false).ColumnWidth(0.55),
                        X.NumberFieldFor(m => m.Cost).AllowBlank(false)
                                .LabelWidth(70).ColumnWidth(0.45).MinValue(0)
                                .FieldLabel("Chi phí" + Html.Required())
                    ),
                X.DepartmentFieldFor(m => m.Department).FieldLabel("Phòng ban" + Html.Required()).Multiple(false).AllowBlank(false).Height(25),
                X.ComboBoxFor(m => m.TargetID).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...")
                    .ID("cbxTarget")
                    .QueryMode(DataLoadMode.Local).Editable(false)
                    .ForceSelection(true)
                   .HideBaseTrigger(true)
                    .DisplayField("TargetName")
                    .ValueField("ID")
                    .Store(Html.X().Store()
                                .AutoLoad(true)
                                .Model(Html.X().Model()
                                        .IDProperty("ID")
                                        .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                                .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                                        .Reader(Html.X().JsonReader().Root("data"))))
                    .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                        .Listeners(ls =>
                        {
                        ls.BeforeSelect.Handler = "return false;";
                        ls.TriggerClick.Fn = "showTarget";
                    }),
                X.ComboBoxFor(m => m.ParentID).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...")
                    .ID("cbxParentPlan")
                    .QueryMode(DataLoadMode.Local).Editable(false)
                    .ForceSelection(true)
                    .DisplayField("Name")
                    .ValueField("ID")
                    .Store(Html.X().Store()
                                    .AutoLoad(true)
                                    .Model(Html.X().Model()
                                            .IDProperty("ID")
                                            .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                    .Proxy(Html.X().AjaxProxy()
                                                .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                                                .Reader(Html.X().JsonReader().Root("data"))))
                    .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                    .Listeners(ls => { ls.TriggerClick.Fn = "showParentPlan"; }),
                X.TextAreaFor(m => m.Content).FieldLabel("Nội dung").EmptyText("Nhập nội dung kế hoạch").MinHeight(100).Flex(1))
                
    )
)
<script>
    var showTarget = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectTarget = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxTarget.setValue(parseInt(id));
            App.WinTarget.close();
        };
    };
    var showParentPlan = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadPlanPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectPlan = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxParentPlan.setValue(parseInt(id));
            App.WinPlan.close();
        };

    };
</script>