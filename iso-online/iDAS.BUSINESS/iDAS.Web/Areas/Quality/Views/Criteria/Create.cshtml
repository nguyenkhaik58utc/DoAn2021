@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@model iDAS.Items.QualityCriteriaItem
@(Html.X().Window()
          .ID("winNewCriteria")
          .Title("Thêm mới thông tin tiêu chí đánh giá")
          .Icon(Icon.Add)    
          .Width(500)
          .BodyPadding(6)
          .Constrain(true)
          .Modal(true)
          .Layout(LayoutType.Fit)
          .Items(
        Html.X().FormPanel()
                .ID("frCriteria")
                .Layout(LayoutType.Form)
                .Frame(true)
                .StyleSpec("border: none;")
                .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
        .Items(     
                    Html.X().HiddenFor(m=>m.CategoryID),
                    Html.X().TextFieldFor(m=>m.CategoryName).FieldLabel("Bộ tiêu chí").ReadOnly(true),
                    Html.X().TextFieldFor(m=>m.Name)
                        .FieldLabel("Tên tiêu chí"+Html.Required())
                        .AllowBlank(false)
                        .BlankText("Tên tiêu chí không được trống!")
                        .AllowOnlyWhitespace(false),
                    Html.X().NumberFieldFor(m => m.Factory).ID("txtFactory").MinValue(0).FieldLabel("Hệ số"),
                    Html.X().NumberFieldFor(m => m.MinPoint)
                        .ID("txtMinPoint")
                        .MinValue(0)
                        .Listeners(ls => { ls.Change.Handler = "markChange(this,this.next(),true);"; ls.Change.Buffer = 500; })
                        .FieldLabel("Điểm tối thiểu"),
                    Html.X().NumberFieldFor(m => m.MaxPoint)
                        .MinValue(0).ID("txtMaxPoint")
                        .Listeners(ls => { ls.Change.Handler = "markChange(this.prev(),this,false)"; ls.Change.Buffer = 500; })
                        .FieldLabel("Điểm tối đa"),
                                      Html.X().TextAreaFor(m => m.Note).FieldLabel("Diễn giải"+Html.Required()).AllowBlank(false).EmptyText("Ví dụ: từ 1->5 điểm là không đạt, từ 5->10 điểm là đạt"),        
            Html.X().CheckboxFor(m => m.IsUse)
            .BoxLabel("Sử dụng")
            .HideLabel(true)
            .MarginSpec("0 0 0 105")  
             )
            )
            .Buttons(
            Html.X().Button()
            .ID("btnSave")
            .Text("Lưu lại")
            .Icon(Icon.DiskMultiple)
            .TabIndex(17)
            .DirectEvents(de =>
            {             
                de.Click.ExtraParams.Add(new { val = false });
                de.Click.Before = @"if (!App.frCriteria.getForm().isValid()) { return false; } ";
                de.Click.EventMask.ShowMask = true;
                de.Click.Action = "Insert";
                de.Click.EventMask.Msg = "Đang xử lý dữ liệu...";
                de.Click.FormID = "frCriteria";            
            }),
            Html.X().Button()
            .ID("btnSaves")
            .Text("Lưu và thoát")
            .Icon(Icon.Disk)
            .TabIndex(18)
            .DirectEvents(de =>
            {               
                de.Click.ExtraParams.Add(new { val = true });
                de.Click.Before = @"if (!App.frCriteria.getForm().isValid()) { return false; } ";
                de.Click.EventMask.ShowMask = true;
                de.Click.Action = "Insert";
                de.Click.EventMask.Msg = "Đang xử lý dữ liệu...";
                de.Click.FormID = "frCriteria";
                de.Click.Success = "this.up('window').close();";
            }),
            Html.X().Button()
            .ID("btnReset")
            .Text("Nhập lại")
            .Icon(Icon.ArrowRefresh)
            .TabIndex(19)
                .Handler("App.frCriteria.reset();"),
            Html.X().Button()
            .ID("btnCancel")
            .Text("Hủy")
            .Icon(Icon.Cancel)
            .TabIndex(20)
                .Handler("App.frCriteria.reset(); this.up('window').close();")
            )
)
<script type="text/javascript">
    var checkReadOnly = function (value) {
        App.txtFactory.setValue(0);
        App.txtMinPoint.setValue(0);
        App.txtMaxPoint.setValue(0);
        App.txtFactory.setReadOnly(value);
        App.txtMinPoint.setReadOnly(value);
        App.txtMaxPoint.setReadOnly(value);

    };
    var markChange = function (minObj, maxObj, isMin) {
        if (minObj.value > maxObj.value) {
            if (isMin) {
                maxObj.setValue(minObj.value);
            }
            else {
                minObj.setValue(maxObj.value);
            };
        }
    };
</script>