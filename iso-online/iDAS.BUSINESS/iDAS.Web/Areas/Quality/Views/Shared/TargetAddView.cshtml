@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.QualityTargetItem
@(Html.X().Window()
        .ID("WindowTargetAddView")
          .Title("Thêm mới mục tiêu")
          .Icon(Icon.Add)
         .Width(750)
          .BodyPadding(6)
          .Constrain(true)
          .Modal(true)
          .Layout(LayoutType.Fit)
          .Items(
        Html.X().FormPanel()
                        .ID("frTarget")
                        .Layout(LayoutType.VBox)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Frame(true)
                        .StyleSpec("border: none;")
                        .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
                        .Items(
                        Html.X().TextFieldFor(m => m.Name)
                        .FieldLabel("Tên mục tiêu" + Html.Required())
                        .ID("txtName")
                        .AllowBlank(false),
                Html.X().ComboBoxFor(m => m.QualityTargetCategoryID)
                        .ID("cbCategoryIDAdd")
                        .FieldLabel("Nhóm mục tiêu" + Html.Required())
                        .BlankText("Nhóm mục tiêu không được trống")
                        .AnchorHorizontal("100%")
                        .Editable(false)
                        .AllowBlank(false)
                        .TabIndex(1)
                        .QueryMode(DataLoadMode.Local)
                        .ForceSelection(true)
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(Html.X().Store()
                        .ID("stCateTarget")
                        .AutoLoad(true)
                        .Model(Html.X().Model()
                        .IDProperty("ID")
                        .Fields(
                                new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" },
                                new ModelField("Unit", ModelFieldType.String) { Mapping = "Unit" }
                                )
                                )
                                .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("GetDataActive", "TargetCategory"))
                                .Reader(Html.X().JsonReader().Root("data")
                                )
                                )
                               ),
        //.Listeners(l => l.Change.Handler = "App.cbTargetTypeIDAdd.getStore().reload(); var record= this.store.getById(this.value); App.txtUnit.setValue(record.get('Unit'));"),
        //Html.X().ComboBoxFor(m => m.Type)
        //    .ID("cbTargetTypeIDAdd")
        //    .FieldLabel("Loại mục tiêu" + Html.Required())
        //    .BlankText("Loại mục tiêu không được trống")
        //    .AnchorHorizontal("100%")
        //    .Editable(false)
        //    .AllowBlank(false)
        //    .TabIndex(1)
        //    .QueryMode(DataLoadMode.Local)
        //    .ForceSelection(true)
        //    .DisplayField("Name")
        //    .ValueField("ID")
        //    .Store(Html.X().Store()
        //    .ID("stTypeTargetAdd")
        //    .AutoLoad(false)
        //    .Parameters(ps =>
        //                {
        //                    ps.Add(new StoreParameter("targetCateId", "App.cbCategoryIDAdd.getValue()!=null?App.cbCategoryIDAdd.getValue():0", ParameterMode.Raw));
        //                })
        //    .Model(Html.X().Model()
        //    .IDProperty("ID")
        //    .Fields(
        //            new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
        //            new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
        //            )
        //            )
        //            .Proxy(Html.X().AjaxProxy()
        //            .Url(Url.Action("GetData", "QualityTargetType"))
        //            .Reader(Html.X().JsonReader().Root("data")
        //            )
        //            )
        //           ),
                Html.X().Container()
                        .Layout(LayoutType.Column)
                        .ColSpan(2)
                        .MarginSpec("0 0 4 0")
                        .Items(
        //Html.X().ComboBoxFor(m => m.Type).HideLabel(true).MarginSpec("0 5 0 105").Items(
        //new ListItem("Tổ chức", 0),
        //  new ListItem("Cá nhân", 1)
        //),
                Html.X().NumberFieldFor(m => m.Value)
                         .FieldLabel("Số lượng" + Html.Required())
                            .AllowBlank(false).MarginSpec("0 5 5 0")
                        .BlankText("Số lượng đạt bắt buộc nhập!")
                        .AllowOnlyWhitespace(false)
                        .ColumnWidth(0.7),
                Html.X().TextFieldFor(m => m.Unit)
                        .FieldLabel("Đơn vị tính")
                        .ID("txtUnit")
                        .ColumnWidth(0.3)
                         ),
                   Html.X().DepartmentFieldFor(m => m.Department)
                   .FieldLabel("Phòng ban" + Html.Required())
                   .Multiple(false)
                   .AllowBlank(false)
                   .Height(25),
                Html.X().Container()
                        .Layout(LayoutType.Column)
                        .ColSpan(2)
                        .Items(
                Html.X().ComboBoxFor(m => m.Type)
                        .FieldLabel("Kiểu mục tiêu" + Html.Required())
                        .AllowBlank(false)
                        .EmptyText("Mục tiêu thuộc bắt buộc chọn!")
                        .MarginSpec("0 5 5 0")
                        .ColumnWidth(0.3)
                        .Items(
                            new ListItem("Tổ chức", true),
                            new ListItem("Cá nhân", false)
                            ),
               Html.X().ComboBoxFor(m => m.ParentID)
                       .ColumnWidth(0.7)
                        .FieldLabel("Mục tiêu cha")
                        .TabIndex(2)
                        .Editable(false)
                         .ID("cbxParentTarget")
                        .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                            .Listeners(ls =>
                            {
                                ls.BeforeSelect.Handler = "return false;";
                                ls.TriggerClick.Fn = "showTargetAdd";
                            })
                        .HideBaseTrigger(true)
                        .EmptyText("Chọn mục tiêu cha...")
                        .DisplayField("TargetName")
                        .ValueField("ID")
                        .Store(
                            Html.X().Store()
                                .ID("stParentTarget")
                                .AutoLoad(true)
                                .Model(
                                Html.X().Model()
                                .IDProperty("ID")
                                .Fields(
                                new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }
                                )
                              )
                                .Proxy(
                                Html.X().AjaxProxy()
                                .Url(Url.Action("GetTargetParent"))
                                .Reader(Html.X().JsonReader().Root("data")
                                )
                                )
                              )
                            ),
                Html.X().TextAreaFor(m => m.Description)
                        .FieldLabel("Nội dung" + Html.Required())
                        .AllowBlank(false)
                        .Height(140)
                        .BlankText("Nội dung mục tiêu không được trống!")
                        .AllowOnlyWhitespace(false),
                Html.X().DateTimeFieldFor(m => m.CompleteAt)
                        .AllowBlank(false)
                        .FieldLabel("Ngày đạt" + Html.Required())
                        .MarginSpec("3 0 3 0"),
                Html.X().EmployeeFieldFor(m => m.Approval)
                        .AllowBlank(false)
                        .MarginSpec("-2 0 0 105")
                        .Title("Người phê duyệt" + Html.Required())
                       )
                     )
                .Buttons(
                Html.X().ButtonSendWindow()
                            .ID("btnSendApproval")
                            .Handler("onSendTarget(this.up('window'))"),
            Html.X().ButtonSave()
                        .ID("btnSaves")
                        .Handler("onInsertTarget(this.up('window'))"),
            Html.X().ButtonExit()
            )
)
<script type="text/javascript">
    var showTargetAdd = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    function onInsertTarget(window) {
        var form = window.down('form');
        if (checkFormValid(form)) {
            insertTarget(form,true);
        };
    };
    function onSendTarget(window) {
        var form = window.down('form');
        if (checkFormValid(form)) {
            insertTarget(form, false);
        };
    };
    function checkFormValid(form) {
        if (!form.isValid()) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Chưa nhập đủ các thông tin cần nhập!',
                buttons: { yes: 'Đồng ý' }, iconCls: '#Exclamation'
            });
            return false;
        }
        return true;
    };
    function onSelectEmployee(records) {
        if (records.length == 1) {
            App.nameApproval.setValue(records[0].get('Name'));
            App.hdfEmployeeApproveId.setValue(records[0].get('ID'));
            App.avatarApproval.setImageUrl(records[0].get('Avatar'));
            var RoleName = records[0].get('Role');
            if (RoleName == null) {
                RoleName = "N/A";
            };
            var DepartmentName = records[0].get('DepartmentName');
            if (DepartmentName == null) {
                DepartmentName = "N/A";
            };
            App.displayApproval.setValue("Đơn vị: " + DepartmentName + "</br> Chức danh: " + RoleName);
        }
        else {
            Ext.Msg.alert("", "Bạn chưa lựa chọn bản ghi nào!");
        };

    };
    var showTarget = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            },
        });
    };
        var onSelectTarget = function (id) {
            if (id == 0) {
                Ext.MessageBoHtml.X().show({
                    title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Exclamation',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            return false;
                        }
                    }
                });
            }
            else {
                App.cbxParentTarget.setValue(parseInt(id));
                App.WinTarget.close();
            };

        };
        var showDepartment = function () {
            var postUrl = '/Task/Task/ShowDepartment/';
            Ext.net.DirectMethod.request({
                url: postUrl
            });
        };
</script>