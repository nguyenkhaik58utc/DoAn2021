@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Web.ExtExtend;
@using iDAS.Utilities;
@model iDAS.Items.RiskItem
@{
    var X = Html.X();
    string title = "";
    var IconView = new Icon();
    string actionForm = Model.ActionForm;
    if (actionForm == iDAS.Utilities.Form.Add)
    {
        IconView = Icon.Add;
        title = "Thêm mới rủi ro từ hợp đồng";
    }
    else
    {
        IconView = Icon.Pencil;
        title = "Cập nhật rủi ro từ hợp đồng";
    }
}
@(
 Html.X().Window()
    .ID("winRiskContract")
    .BodyPadding(0)
    .Height(400)
    .Maximized(true)
    .Constrain(true)
    .Modal(true)
    .Layout(LayoutType.Fit)
    .Title(title)
    .Icon(IconView)
    .Items(
            X.CustomFormPanel().ID("frmUpdate")
                .Items(
                        Html.X().HiddenFor(m => m.ID),
                        Html.X().HiddenFor(m => m.ContractID).ID("hdfContractID"),
                        Html.X().DepartmentFieldFor(m => m.Department).ReadOnly(true).FieldLabel("Phòng ban" + Html.Required()).Multiple(false).AllowBlank(false).Height(25),
                        Html.X().TextFieldFor(m => m.ContractCode).FieldLabel("Hợp đồng" + Html.Required()).ReadOnly(true)
                                    .RightButtons(
                                                    Html.X().Button().Icon(Icon.PencilAdd)
                                                        .Text("Lựa chọn hợp đồng")
                                                        .Handler("App.windowContracts.show();")
                                                )
                                    .AllowBlank(false)
                                    .EmptyText("Nhập thông tin hợp đồng")
                                    .Height(24),
                        Html.X().ComboBoxFor(m => m.RiskCategoryID)
                                        .FieldLabel("Nhóm rủi ro" + Html.Required())
                                        .EmptyText("Chọn nhóm rủi ro")
                                        .AllowBlank(false)
                                        .Editable(false)
                                        .BlankText("Nhóm rủi ro không được bỏ trống!")
                                        .DisplayField("Name")
                                        .ValueField("ID")
                                        .Store(
                                            Html.X().Store()
                                                    .AutoLoad(true)
                                                    .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("GetDataCate", "Risks", new { area = "Risk" }))
                                                    .Reader(Html.X().JsonReader().Root("data"))
                                                )
                                                .Model(Html.X().Model()
                                                    .Fields(
                                                        new ModelField("ID"),
                                                        new ModelField("Name")
                                                    )
                                                )
                                        )
                                        .Listeners(ls => ls.Change.Handler = @"if(this.value){ App.btnUseRiskTemp.setDisabled(false); }
                                                                                        else{ App.btnUseRiskTemp.setDisabled(true); };")
                                        ,
                        Html.X().TextFieldFor(m => m.Name).Height(24)
                                        .ID("txtName")
                                        .AllowOnlyWhitespace(false)
                                        .FieldLabel("Tên rủi ro" + Html.Required())
                                        .EmptyText("Nhập tên rủi ro")
                                        .MaxLength(100)
                                        .AllowBlank(false)
                                        .RightButtons(
                                                        Html.X().Button().Icon(Icon.PencilAdd)
                                                                    .ID("btnUseRiskTemp").Disabled(true)
                                                                    .Text("Sử dụng rủi ro mẫu")
                                                                    .Handler("App.windowRisk.show();App.StoreRiskSelect.reload();")
                                                        )
                                        .BlankText("Tên rủi ro không được bỏ trống!"),
                        Html.X().Container().Flex(1).Layout(LayoutType.Border).Padding(0).Margin(0)
                                .Items(
                                        Html.X().FieldSet().Layout(LayoutType.Column).Title("Định lượng rủi ro").PaddingSpec("5 5 2 5").MarginSpec("2 0 0 0")
                                            .Region(Region.North).ID("fsRiskValue")
                                            .Items(
                                                    Html.X().NumberFieldFor(m => m.LikeLiHood).ID("tfLikeLiHood").EmptyText("Khả năng xảy ra").ColumnWidth(0.3)
                                                        .FieldLabel("Khả năng xảy ra" + Html.Required()).MinValue(0)
                                                        .Listeners(ls => ls.Change.Handler = "onChangeLikeLiHood();"),
                                                    Html.X().NumberFieldFor(m => m.Impact).ID("tfImpact").ColumnWidth(0.3).PaddingSpec("0 0 0 5")
                                                        .FieldLabel("<span style='color:red;padding-right: 5px;'> x </span>Mức độ tác động")
                                                         .MinValue(0)
                                                        .Listeners(ls => ls.Change.Handler = "onChangeLikeLiHood();"),
                                                    Html.X().NumberFieldFor(m => m.Consequence).ID("tfConsequence").ColumnWidth(0.3).PaddingSpec("0 0 0 5")
                                                        .FieldLabel("<span style='color:red;padding-right: 5px;'> x </span>Hệ số").LabelWidth(50)
                                                          .MinValue(0)
                                                        .Listeners(ls => ls.Change.Handler = "onChangeLikeLiHood();"),
                                                    Html.X().TextFieldFor(m => m.RiskValue).ID("tfRiskValue").ColumnWidth(0.6).PaddingSpec("5 0 5 0")
                                                         .FieldLabel("<span style='color:red;padding-right: 5px;'> = </span>Định lượng rủi ro").ReadOnly(true),
                                                    Html.X().ComboBoxFor(i => i.RiskLevelID).FieldLabel("Mức độ rủi ro").ReadOnly(true)
                                                            .ID("cbRiskLevel").AllowBlank(false)
                                                            .BlankText("Thiết lập khả năng xảy ra phù hợp với mức độ rủi ro qui định")
                                                            .PaddingSpec("5 0 5 0")
                                                            .EmptyText("Hệ thống tính toán mức độ rủi ro từ định lượng rủi ro")
                                                            .ColumnWidth(1)
                                                            .DisplayField("Level")
                                                            .ValueField("ID")
                                                            .Store(
                                                                Html.X().Store()
                                                                .ID("stRiskValue")
                                                                    .AutoLoad(true)
                                                                    .Model(
                                                                        Html.X().Model()
                                                                            .IDProperty("ID")
                                                                            .Fields(
                                                                                new ModelField("ID", ModelFieldType.Int),
                                                                                new ModelField("CenterRiskMethodID", ModelFieldType.Int),
                                                                                new ModelField("Level", ModelFieldType.String),
                                                                                new ModelField("Method", ModelFieldType.String),
                                                                                new ModelField("Description", ModelFieldType.String),
                                                                                new ModelField("Color", ModelFieldType.String),
                                                                                new ModelField("MaxPoint", ModelFieldType.Int),
                                                                                new ModelField("MinPoint", ModelFieldType.Int)
                                                                            )
                                                                    )
                                                                    .Proxy(
                                                                        Html.X().AjaxProxy()
                                                                            .Url(Url.Action("LoadData", "RiskLevel"))
                                                                            .Reader(Html.X().JsonReader().Root("data")
                                                                            )
                                                                    )
                                                            )
                                                            .Tpl(
                                                            @<text>
                                                                <tpl for=".">
                                                                    <div class="x-boundlist-item" style="display: inline-block; width: 100%;">
                                                                        <div style="width: 20px; height: 20px; float: left; background-color: {Color}; border: #cecece 1px soli>;">&nbsp;</div><div style="width: auto; float: left; font-size: 0.9em;">&nbsp;{Level}</div>
                                                                    </div>
                                                                </tpl>
                                                            </text>)
                                                            .Listeners(l => l.Change.Handler = "onChangeValue(App.cbRiskLevel, App.stRiskValue);"),
                                                Html.X().TextField().ID("tfMethod").ColumnWidth(1).LabelAlign(LabelAlign.Top).Height(23)
                                                    .FieldLabel("Phương pháp ứng phó" + Html.Required())
                                                    .LabelWidth(135).ReadOnly(true)
                                                    .EmptyText("Chọn phương pháp ứng phó")
                                                    .AllowBlank(false)
                                                    .BlankText("Phương pháp ứng phó không được bỏ trống!")
                                                    .RightButtons(
                                                                    Html.X().Button().ID("btnMethodDetail").Hidden(true).Icon(Icon.ZoomIn).Text("Xem chi tiết")
                                                                                .Handler("App.winDetailMethod.show();")
                                                                )
                                            ),
                                            Html.X().TextAreaFor(m => m.Weakness).Region(Region.West)
                                                        .ID("txtWeakness")
                                                        .FieldLabel("Điểm yếu").LabelAlign(LabelAlign.Top)
                                                        .LabelStyle("color: #15428B;font: 11px/14px bold tahoma,arial,verdana,sans-serif; font-weight: bold;")
                                                        .EmptyText("Nhập điểm yếu sinh ra rủi ro")
                                                        .Width(300).MarginSpec("0 5 5 0"),
                                            Html.X().TextAreaFor(m=>m.Action).ID("txtAction").Region(Region.Center).FieldLabel("Hành động")
                                                        .LabelAlign(LabelAlign.Top).MarginSpec("0 0 5 0")
                                                        .LabelStyle("color: #15428B;font: 11px/14px bold tahoma,arial,verdana,sans-serif; font-weight: bold;")
                                ),
                          Html.X().EmployeeFieldFor(m => m.RiskOwner).AllowBlank(false).Title("Người nắm giữ rủi ro" + Html.Required())
                    )
          )
           .Buttons(
                    Html.X().ButtonSave()
                            .DirectEvents(de =>
                                {
                                    de.Click.Before = @"if (!App.frmUpdate.getForm().isValid()) { return false; }; ";
                                    de.Click.Url = Url.Action("Update");
                                    de.Click.FormID = "frmUpdate";
                                    de.Click.Success = "this.up('window').close();";
                                }),
                   Html.X().ButtonExit()
                )
)
@(Html.X().Window().Hidden(true)
        .ID("winDetailMethod")
        .Layout(LayoutType.Fit)
        .Constrain(true)
        .Modal(true)
        .Border(false)
        .Height(350)
        .Width(450)
        .Items(
                 Html.X().TextArea().ID("txtDescription").ReadOnly(true)
        )
        .Buttons(
                Html.X().ButtonExit()
            )
)
@(Html.X().Window().Hidden(true)
        .ID("windowContracts")
        .Layout(LayoutType.Fit)
        .Title("Danh sách hợp đồng")
        .Icon(Icon.ApplicationSideList)
        .Border(false)
        .Constrain(true)
        .Modal(true)
        .Height(450)
        .Width(650)
        .Items(
                Html.X().GridPanel().Layout(LayoutType.Fit)
                        .Header(false).ColumnLines(true).ForceFit(true)
                        .ID("GrContract")
                        .Store(
                                Html.X().Store().ID("StoreContractSelect")
                                        .RemotePaging(true)
                                        .PageSize(20)
                                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadContract"))
                                                    .Reader(Html.X().JsonReader().Root("data")).IDParam("ID")
                                              )
                                        .Parameters(a => a.Add(new StoreParameter() { Name = "departmentId", Value = Model.Department.ID.ToString(), Mode = ParameterMode.Value }))
                                        .Model(
                                                    Html.X().Model().Fields(
                                                        Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                                        Html.X().ModelField().Name("Name")
                                                    )
                                                )
                               )
                        .ColumnModel(
                                        Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                        Html.X().Column().DataIndex("Name").Text("hợp đồng").Flex(1)
                                    )
                        .SelectionModel(Html.X().CheckboxSelectionModel().Mode(SelectionMode.Single))
                        .Plugins(Html.X().FilterHeader().Remote(true))
                        .BottomBar(Html.X().CustomPagingToolbar())
              )
        .Buttons(
                    Html.X().Button().Icon(Icon.Accept)
                                .Listeners(ls => ls.Click.Handler = "onContractSelected();")
                                .ToolTip("Chọn hợp đồng")
                                .Text("Chọn")
                                .ID("btnSelectContracts"),
                    Html.X().ButtonExit()
                )
)
@(Html.X().Window().Hidden(true)
        .ID("windowRisk")
        .Constrain(true)
        .Modal(true)
        .Layout(LayoutType.Border)
        .Title("Danh sách rủi ro mẫu")
        .Icon(Icon.FolderBug)
        .Border(false)
        .Height(450)
        .Width(650)
        .Items(
                    Html.X().Hidden().ID("hdfRiskID"),
                    Html.X().GridPanel().Layout(LayoutType.Fit).Region(Region.West).Width(200)
                            .Header(false).ColumnLines(true).ForceFit(true)
                            .Split(true)
                            .ID("GrRisk")
                            .Store(
                                    Html.X().Store().ID("StoreRiskSelect")
                                            .RemotePaging(true)
                                            .PageSize(20)
                                            .AutoLoad(false)
                                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadRiskCenter"))
                                                        .Reader(Html.X().JsonReader().Root("data")).IDParam("ID")
                                                  )
                                            .Parameters(a => a.Add(new StoreParameter() { Name = "cateId", Value = "App.RiskCategoryID.value", Mode = ParameterMode.Raw }))
                                            .Model(
                                                        Html.X().Model().Fields(
                                                            Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                                            Html.X().ModelField().Name("Name"),
                                                            Html.X().ModelField().Name("Weakness")
                                                        )
                                                   )
                                   )
                            .ColumnModel(
                                            Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                            Html.X().Column().DataIndex("Name").Text("Rủi ro").Flex(1)
                                        )
                            .SelectionModel(Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false)
                                                        .Listeners(ls => ls.SelectionChange.Handler = "onSelectChangeRisk();")
                                            )
                            .Plugins(Html.X().FilterHeader().Remote(true))
                            .BottomBar(Html.X().CustomPagingToolbar()),
                    Html.X().GridPanel().MinHeight(350).Region(Region.Center)
                                .ID("GrTreatment").ColumnLines(true)
                                .Store(
                                        Html.X().Store().ID("StoreRiskTreatment")
                                            .RemotePaging(true)
                                            .AutoLoad(false)
                                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadTreatment")).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                                            .Parameters(ps => ps.Add(new StoreParameter("riskId", "App.hdfRiskID.value", ParameterMode.Raw)))
                                            .Model(
                                                    Html.X().Model()
                                                        .Fields(
                                                                    Html.X().ModelField().Name("ID"),
                                                                    Html.X().ModelField().Name("CenterRiskMethodID"),
                                                                    Html.X().ModelField().Name("Color"),
                                                                    Html.X().ModelField().Name("Level"),
                                                                    Html.X().ModelField().Name("Action")
                                                                )
                                                    )
                                       )
                                .ColumnModel(
                                                X.RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                                X.Column()
                                                        .Text("Màu sắc")
                                                        .DataIndex("Color")
                                                        .StyleSpec("font-weight: bold; text-align: center;")
                                                        .Renderer(new Renderer { Fn = "function(value, meta, record) { meta.style = 'background-color:' + record.get('Color') + ';'; return value; }" })
                                                        .Align(Alignment.Center)
                                                        .Width(100),
                                                X.Column().DataIndex("Level")
                                                        .Text("Mức độ").Width(200),
                                                X.Column().DataIndex("Action")
                                                        .Text("Hành động").Flex(1)
                                           )
                                .SelectionModel(Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false).Mode(SelectionMode.Single))
                                .BottomBar(Html.X().CustomPagingToolbar())
              )
        .Buttons(
                    Html.X().Button().Icon(Icon.Accept)
                                .Listeners(ls => ls.Click.Handler = "onSelectRiskTreatment();")
                                .ToolTip("Chọn rủi ro")
                                .Text("Chọn")
                                .ID("btnRiskTreatmentSelect"),
                    Html.X().ButtonExit()
                )
)
<script type="text/javascript">
    function onContractSelected() {
        if (App.windowContracts.hidden == true) {
            App.windowContracts.show();
        }
        else {
            var records = App.GrContract.selModel.getSelection();
            if (records.length == 1) {
                App.hdfContractID.setValue(records[0].get("ID"));
                App.ContractCode.setValue(records[0].get("Name"));
                App.windowContracts.hide();
            }
            else {
                MessageBox();
            };

        };
    };
    var onChangeLikeLiHood = function () {
        var riskValue = App.tfLikeLiHood.value * App.tfImpact.value * App.tfConsequence.value;
        App.tfRiskValue.setValue(riskValue);
        getRiskValue(riskValue);
    };
    var onChangeValue = function (obj, store) {
        var id = obj.getValue();
        if (id) {
            var record = store.getById(id);
            var color = record.get('Color');
            obj.setFieldStyle('background-image: none; background-color: ' + color + ';');
            var method = record.get('Method');
            App.tfMethod.setValue(method);
            var description = record.get('Description');
            App.txtDescription.setValue(description);
            App.btnMethodDetail.show();
        }
        else {
            App.tfMethod.setValue("");
            App.btnMethodDetail.hide();
        }
    };
    function getRiskValue(value) {
        var riskStoreValue = App.stRiskValue.getAllRange();
        for (var i = 0; i < riskStoreValue.length; i++) {
            if (riskStoreValue[i].get("MinPoint") <= value && riskStoreValue[i].get("MaxPoint") >= value) {
                App.cbRiskLevel.setValue(riskStoreValue[i].get("ID"));
                return true;
            };
        };
        App.cbRiskLevel.setFieldStyle('background-image: none; background-color: white;');
        App.cbRiskLevel.clear();
        return false;
    };
    var onSelectChangeRisk = function () {
        var records = App.GrRisk.selModel.getSelection();
        if (records.length == 1) {
            App.hdfRiskID.setValue(records[0].get("ID"));
            App.GrTreatment.store.reload();
        }
    };
    function onSelectRiskTreatment() {
        if (App.windowRisk.hidden == true) {
            App.windowRisk.show();
        }
        else {
            var records = App.GrTreatment.selModel.getSelection();
            if (records.length == 1) {
                App.txtAction.setValue(records[0].get("Action"));
                var riskmethodId = records[0].get("CenterRiskMethodID");
                var storeRiskValue = App.stRiskValue.getAllRange();
                if (storeRiskValue.length > 0) {
                    for (var i = 0; i < storeRiskValue.length; i++) {
                        if (storeRiskValue[i].data.CenterRiskMethodID == riskmethodId) {
                            App.cbRiskLevel.setValue(storeRiskValue[i].data.ID);
                        };
                    };
                };
                var recordRisks = App.GrRisk.selModel.getSelection();
                if (recordRisks.length == 1)
                {
                    App.txtName.setValue(recordRisks[0].get("Name"));
                    App.txtWeakness.setValue(recordRisks[0].get("Weakness"));
                }
                App.windowRisk.hide();
            }
            else {
                MessageBox();
            };
        };
    };
</script>
