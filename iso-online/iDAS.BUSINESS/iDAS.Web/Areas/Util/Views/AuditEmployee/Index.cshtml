@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Web.ExtExtend
@model System.Collections.IEnumerable
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@(Html.X().Viewport()
        .Layout(LayoutType.Fit)
        .Items(
                Html.X().Hidden().Value(ViewBag.FocusId).ID("hdfFocusID"),
                Html.X().GridPanel()
                    .ID("grAuditTick")
                    .Border(false)
                    .ColumnLines(true)
                    .TopBar(Html.X().Toolbar().Items(Html.X().ButtonView().ID("btnDetail").Handler("showFormDetail();")))
                    .Store(
                            Html.X().Store()
                                    .ID("stMnPhaseAudit")
                                    .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetData")).Reader(Html.X().JsonReader().Root("data")))
                                    .Parameters(ps =>
                                        {
                                            ps.Add(new StoreParameter("focusId", "App.hdfFocusID.getValue()", ParameterMode.Raw));
                                        })
                                    .RemoteSort(true)
                                    .RemotePaging(true)
                                    .PageSize(20)
                                    .Model(
                                            Html.X().Model().IDProperty("ID")
                                                    .Fields(
                                                                Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                                                Html.X().ModelField().Name("HumanAuditGradationID").Type(ModelFieldType.Int),
                                                                Html.X().ModelField().Name("HumanAuditGradationRoleID").Type(ModelFieldType.Int),
                                                                Html.X().ModelField().Name("HumanAuditGradationRole").Type(ModelFieldType.String),
                                                                Html.X().ModelField().Name("IsEmployeeAuditted").Type(ModelFieldType.Boolean),
                                                                Html.X().ModelField().Name("RoleName").Type(ModelFieldType.String)
                                                        )
                                          )
                        )
                    .ColumnModel(
                                    Html.X().RowNumbererColumn().Text("STT").Align(Alignment.Center).Width(33),
                                    Html.X().Column().Text("Đợt đánh giá").DataIndex("HumanAuditGradationRole").Flex(1).Wrap(true),
                                    Html.X().BooleanColumn().Text("Trạng thái").DataIndex("IsEmployeeAuditted")
                                                .TrueText("Đã đánh giá")
                                                .FalseText("<div style='color: red;'>Chưa thực hiện</div>"),
                                    Html.X().CommandColumn().Align(Alignment.Center)
                                                .Width(70)
                                                .Text("Thực hiện")
                                                .Commands(
                                                            Html.X().GridCommand()
                                                                .Text("Đánh giá")
                                                                .Icon(Icon.User)
                                                                .CommandName("Answer"),
                                                            Html.X().GridCommand()
                                                                .Icon(Icon.ZoomIn)
                                                                .CommandName("Detail")
                                                                .Text("Xem")
                                                        )
                                                .Filterable(true).PrepareToolbar("prepare")
                                                .Listeners(ls => ls.Command.Handler = "Audit(command,record);")

                                )
                    .View(Html.X().GridView().GetRowClass(cls => cls.Fn = "getRowClass"))
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(SelectionMode.Single)
                             .Listeners(l =>
                                {
                                    l.Select.Handler = "checkStatus()";
                                })
                        )
                .BottomBar(Html.X().CustomPagingToolbar())
            )
)
<script type="text/javascript">
    var prepare = function (grid, toolbar, rowIndex, record) {
        if (record.data.IsEmployeeAuditted == true) {
            toolbar.items.getAt(0).hide();
        }
        else {
            toolbar.items.getAt(1).hide();
        }
    };
    var Audit = function (command, record) {
        if (command == "Answer") {
            AnswerAudit(record.data.ID);
        };
        if (command == "Detail") {
            Detail(record.data.ID);
        };
    };
    var showFormDetail = function () {
        var records = App.grAuditTick.selModel.getSelection();
        if (records.length == 0) {
            Ext.MessageBox.show({
                title: 'Cảnh báo', msg: 'Chưa có bản ghi nào được chọn!',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    App.btnDetail.setDisabled(true);
                    return false;
                }
            });
        }
        else {
            var id = records[0].get('HumanAuditGradationID');
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ShowDetail", "AuditGradation", new { Area = "Human" }, null))',
                params: { id: id }
            });
        };
    };
    var checkStatus = function () {
        var records = App.grAuditTick.selModel.getSelection();
        if (records.length > 0) {
            App.btnDetail.setDisabled(false);
        }
        else {
            App.btnDetail.setDisabled(true);
        }
    };
    var getRowClass = function (record, index, rowParams, ds) {
        if (record.get("ID") == App.hdfFocusID.value) {
            return 'idas-focus';
        };
    };
    var AnswerAudit = function (id) {
        var params = {
            id: id
        };
        onDirectMethod('@(Url.Action("Answer"))', params);
    };
    var Detail = function (id) {
        var params = {
            id: id
        };
        onDirectMethod('@(Url.Action("Detail"))', params);
    };
</script>