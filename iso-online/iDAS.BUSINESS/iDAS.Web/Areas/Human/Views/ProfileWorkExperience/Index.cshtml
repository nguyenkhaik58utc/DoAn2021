@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web.ExtExtend;
@model iDAS.Items.HumanEmployeeItem
@{
    var X = Html.X();
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    var deleteUrl = '@(Url.Action("DeleteProfileWorkExperience"))';
    function CheckStatus() {
        var records = App.GrProfileWorkExperience.selModel.getSelection();
        if (records.length == 1) {
            SetEnabled(App.btnDetail, App.btnDelete, App.btnUpdate);
        }
        else {
            SetDisabled(App.btnDetail, App.btnDelete, App.btnUpdate);
        };
    };
    var AddNew = function () {
        var url = '@(Url.Action("UpdateForm", "ProfileWorkExperience", new { Area = "Human" }, null))';
        var params = {
            EmployeeID: App.hdfEmployeeID.value
        };
        onDirectMethod(url, params);
    };
    var UpdateItem = function () {
        var records = App.GrProfileWorkExperience.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("UpdateForm", "ProfileWorkExperience", new { Area = "Human" }, null))';
            var params = {
                ID: records[0].get('ID'),
                EmployeeID: App.hdfEmployeeID.value
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        }
    };
    var ViewDetail = function () {
        var records = App.GrProfileWorkExperience.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("DetailForm", "ProfileWorkExperience", new { Area = "Human" }, null))';
            var params = {
                ID: records[0].get('ID'),
                EmployeeID: App.hdfEmployeeID.value
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        };
    };
</script>
@(Html.X().Viewport().Layout(LayoutType.Fit).Border(false).Margin(0).Frame(false).StyleSpec("border: none;")
.Items(
        Html.X().GridPanel()
                .Header(false)
                .ID("GrProfileWorkExperience")
                .ColumnLines(true)
                .ForceFit(true)
                .Border(false)
                .Icon(Icon.TextListBullets)
                .TopBar(
                    Html.X().Toolbar()
                    .Layout(LayoutType.HBox)
                    .Items(
                        X.HiddenFor(m => m.ID).ID("hdfEmployeeID"),
                        Html.X().ButtonCreate().Handler("AddNew();"),
                        Html.X().ToolbarSeparator(),
                        Html.X().ButtonUpdate().ID("btnUpdate").Handler("UpdateItem();"),
                        Html.X().ToolbarSeparator(),
                        Html.X().ButtonDelete().ID("btnDelete").Handler("onDelete(App.GrProfileWorkExperience.selModel.getSelection()[0].get('ID'));"),
                        Html.X().ToolbarSeparator(),
                        Html.X().ButtonView().ID("btnDetail").Handler("ViewDetail();"),
                        Html.X().ToolbarFill(),
                        Html.X().ButtonTutorial()
                    )
            )
            .Store(
                Html.X().Store()
                    .ID("StoreProfileWorkExperience")
                    .RemotePaging(true)
                    .PageSize(20)
                    .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileWorkExperience")).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                            .Parameters(ps =>
                                        {
                                            ps.Add(new StoreParameter("EmployeeID", "App.hdfEmployeeID.value", ParameterMode.Raw));
                                        })
                    .Model(
                        Html.X().Model().Fields(
                                Html.X().ModelField().Name("ID"),
                                Html.X().ModelField().Name("StartDate"),
                                Html.X().ModelField().Name("EndDate"),
                                Html.X().ModelField().Name("Position"),
                                Html.X().ModelField().Name("JobDescription"),
                                Html.X().ModelField().Name("Department"),
                                Html.X().ModelField().Name("PlaceOfWork")
                        )
                        )
            )
            .ColumnModel(
                        Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                        X.ComponentColumn().Text("Thời gian công tác").Columns(
                                X.DateColumnExtend().DataIndex("StartDate").Format("dd/MM/yyyy").Text("Bắt đầu").Width(100).Align(Alignment.Center),
                                X.DateColumnExtend().DataIndex("EndDate").Format("dd/MM/yyyy").Text("Kết thúc").MinWidth(100).Align(Alignment.Center)).Locked(true),
                        Html.X().Column().DataIndex("PlaceOfWork").Text("Nơi công tác").Width(300).Lockable(true),
                        Html.X().Column().DataIndex("Position").Text("Chức vụ đảm nhiệm").Width(300).Lockable(true),
                        Html.X().Column().DataIndex("Department").Text("Phòng ban").Width(300),
                        Html.X().Column().DataIndex("JobDescription").Text("Công việc").Width(300)
                )
            .SelectionModel(Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false).Mode(SelectionMode.Single)
                        .Listeners(ls => ls.SelectionChange.Fn = "CheckStatus"))
            .BottomBar(X.CustomPagingToolbar())
    )
)
