@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend;
@{
    var X = Html.X();
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@(Html.X().Menu()
        .ID("cmMenu")
        .Width(150)
        .Items(
            new MenuItem
                {
                    Text = "Thêm mới",
                    ID = "cmAdd",
                    Icon = Icon.Add,
                    Handler = "addRecord(App.GrServiceLevel);"
                },
            new MenuItem
                {
                    Text = "Xóa",
                    ID = "cmDelete",
                    Icon = Icon.Delete,
                    Disabled = true,
                    Handler = "deleteRecord();"
                }
        )
)
@(Html.X().Viewport()
        .Layout(LayoutType.Fit)
        .Items(
            Html.X().GridPanel()
                .Listeners(ls => ls.BeforeItemContextMenu.Fn = "itemcontextmenu")
                .ID("GrServiceLevel")
                .Height(400)
                .Border(false)
                .TopBar(
                    Html.X().Toolbar()
                        .Items(
                            Html.X().Button()
                                .ID("btnAdd")
                                .Text("Thêm mới")
                                .Icon(Icon.Add)
                                .Handler("addRecord(this.up('grid'));"),
                            Html.X().ToolbarSeparator(),
                            Html.X().Button()
                                .ID("butDelete")
                                .Text("Xóa")
                                .Icon(Icon.Delete)
                                .Disabled(true)
                                .Handler("deleteRecord();"),
                            Html.X().ToolbarSeparator(),
                            Html.X().Button()
                                .ID("butDetail")
                                .Text("Xem chi tiết")
                                .Icon(Icon.Zoom)
        //.Disabled(true)
                                .Hidden(true)
                                .Handler("viewRecord();"),
                                        Html.X().ToolbarFill(),
                                 Html.X().ButtonTutorial()

                        )
                )
                .Store(
                    Html.X().Store()
                        .ID("stRank")
                        .Proxy(
                            Html.X().AjaxProxy()
                                    .Url(Url.Action("LoadData"))
                                .Reader(Html.X().JsonReader().Root("data"))
                        )
                        .RemoteSort(false)
                        .RemotePaging(true)
                        .PageSize(20)
                        .Model(
                            Html.X().Model().IDProperty("ID")
                                .Fields(
                                    Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                        Html.X().ModelField().Name("RankName").Type(ModelFieldType.String),
                                        Html.X().ModelField().Name("Descripson").Type(ModelFieldType.String),
                                        Html.X().ModelField().Name("IsUse").Type(ModelFieldType.Boolean)
                                )
                        )

                )
                .ColumnModel(
                    Html.X().RowNumbererColumn()
                            .Text("STT").DataIndex("ID")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Width(33)
                        .Align(Alignment.Center),
                    Html.X().Column()
                        .Text("Xếp loại")
                        .DataIndex("RankName")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Width(150)
                        .Wrap(true)
                        .Editor(
                            Html.X().TextField()
                                .AllowBlank(false).AllowOnlyWhitespace(false)
                                .BlankText("Tên không được để trống")
                        ),
                            Html.X().Column()
                            .Text("Mô tả").Flex(1)
                                .DataIndex("Descripson")
                            .StyleSpec("font-weight: bold; text-align: center;")
                            .Width(150)
                            .Wrap(true)
                            .Editor(
                                Html.X().TextField()
                                    .AllowBlank(false)
                                    .MaxLength(500).MaxLengthText("Số lượng kí tự tối đa của ô này là 50!")
                            ),
                             Html.X().CheckColumn()
                            .Text("Sử dụng")
                            .DataIndex("IsUse")
                            .StyleSpec("font-weight: bold; text-align: center;")
                            .Width(80)
                            .Wrap(true).Editable(true),
                    Html.X().CommandColumn()
                        .ID("commandCol")
                        .Text("Chức năng")
                        .StyleSpec("font-weight: bold; text-align: center;")
                        .Width(70)
                        .Commands(
                            Html.X().GridCommand()
                                .CommandName("save")
                                .Icon(Icon.Disk)
                                .ToolTip(tt => tt.Text = "Lưu"),
                            Html.X().GridCommand()
                                .CommandName("reject")
                                .Icon(Icon.ArrowUndo)
                                .ToolTip(tt => tt.Text = "Hủy")
                        )
                        .Listeners(ls => ls.Command.Handler = "handlecmd(command,this.up('grid'),record );")
                )
                .SelectionModel(
               Html.X().RowSelectionModel()
                       .Mode(SelectionMode.Single).Listeners(l=> l.Select.Handler="checkStatus();")
                )
                .Plugins(Html.X().CellEditing() )
                .BottomBar(Html.X().CustomPagingToolbar())
        )
)
<script type="text/javascript">
    var onComboBoxSelect = function (combo) {
        var store = combo.up("gridpanel").getStore();
        store.pageSize = parseInt(combo.getValue());
        store.load();
    };
    var itemcontextmenu = function (grid, record, item, index, e, eOpts) {
        e.stopEvent();
        App.cmMenu.showAt(e.getXY());
    };

    var checkStatus = function () {
        var records = App.GrServiceLevel.selModel.getSelection();
        if (records.length > 0) {
            App.butDetail.setDisabled(false);
                App.cmDelete.setDisabled(false);
                App.butDelete.setDisabled(false);
            }
        else {
            App.cmDelete.setDisabled(true);
            App.butDelete.setDisabled(true);
            App.butDetail.setDisabled(true);
        }
    };
    function addRecord(grid) {
        grid.store.insert(0, { Name: '', Level: 1 });
        grid.editingPlugin.startEditByPosition({ row: 0, column: 0 });
        App.btnAdd.setDisabled(true);
    };
    function viewRecord() {
        var records = App.GrServiceLevel.selModel.getSelection();
        if (records.length > 0) {
            var id = records[0].get('ID');
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ShowFrm", "ServiceLevels", new { Area = "Service" }, null))', params: { id: id }
            });
        }
    };
    var deleteRecord = function () {
        var records = App.GrServiceLevel.selModel.getSelection();
        switch (records.length) {
            case 0:
                Ext.MessageBox.show({
                    title: 'Cảnh báo',
                    msg: 'Chưa có bản ghi nào được chọn!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                break;
            default:
                Ext.MessageBox.show({
                    title: 'Xác nhận',
                    msg: 'Bạn có chắc chắn muốn xóa Bản ghi đã chọn không?',
                    buttons: { yes: 'Đồng ý', no: 'Không' },
                    iconCls: '#Information',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var strId = records[0].get('ID');
                            Ext.net.DirectMethod.request({
                                url: '@(Url.Action("Delete"))', params: { id: strId },
                                success: function (result) {
                                    if (result == 'Error') {
                                        Ext.MessageBox.show({
                                            title: 'Cảnh báo', msg: 'Quá trình thực hiện xóa Dữ liệu phát sinh lỗi do Dữ liệu này có thể đã được sử dụng. Đề nghị kiểm tra lại!',
                                            buttons: { yes: 'Đồng ý' },
                                            iconCls: '#Cancel',
                                            fn: function (btn) {
                                                records[0].reject();
                                                return false;
                                            }
                                        });
                                    }
                                }
                            });
                        }
                    }
                });
                break;
        }
    };
    var handlecmd = function (cmd, grid, record) {
        if (cmd == 'save') {
            var id = record.get('ID'), name = record.get('RankName'), des = record.get('Descripson'), isUse = record.get('IsUse');
            if (name == '') {
                Ext.MessageBox.show({
                    title: 'Cảnh báo', msg: 'Tên không được để trống!',
                    buttons: { yes: 'Đồng ý' },
                    iconCls: '#Cancel',
                    fn: function (btn) {
                        return false;
                    }
                });
                return;
            }
            if (id != null && id > 0 && name != '') {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Update", "Rank", new { Area = "Human" }, null))',
                    params: { id: id, name: name, des: des, isUse: isUse },
                    success: function (result) {
                        if (result == 'Error') {
                            Ext.MessageBox.show({
                                title: 'Lỗi', msg: 'Mức độ ưu tiên có tên là: ' + name + ' đã tồn tại',
                                buttons: { yes: 'Đồng ý' },
                                iconCls: '#Cancel',
                                fn: function (btn) {
                                    record.reject();
                                    return false;
                                }
                            });
                        }
                        else
                            App.btnAdd.setDisabled(false);
                    }
                });
            }
            else {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Insert", "Rank", new { Area = "Human" }, null))',
                    params: {id:0, name: name, des: des, isUse: isUse },
                    success: function (result) {
                        if (result == 'ErrorExisted') {
                            Ext.MessageBox.show({
                                title: 'Lỗi', msg: 'Mức độ bảo mật có tên là: ' + name + ' đã tồn tại',
                                buttons: { yes: 'Đồng ý' },
                                iconCls: '#Cancel',
                                fn: function (btn) {
                                    record.reject();
                                    return false;
                                }
                            });
                        } else
                            App.btnAdd.setDisabled(false);
                    }
                });
            }
        }
        if (cmd == 'reject') {
            record.reject();
        }
    };
</script>              
