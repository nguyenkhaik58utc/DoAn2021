@using Ext.Net.MVC;
@using Ext.Net;
@using iDAS.Web.ExtExtend;
@model iDAS.Items.HumanProfileWorkTrialItem
@{
}

@(Html.X().Window()
        .ID("frmUpdate")
        .Title("Danh sách công việc cá nhân")
        .Layout(LayoutType.Fit)
        .Maximized(true)
        .Maximizable(true)
        .Icon(Icon.Zoom)
        .BodyPadding(0)
        .Margin(0)
        .Height(450)
        .Width(700)
        .Center()
        .Constrain(true)
        .Modal(true)
        .Items(
        Html.X().TreePanel()
                .Split(true)                 
                .AutoScroll(true)
                .RootVisible(false)
                .UseArrows(true)
                .MultiSelect(true)
                .SingleExpand(true)
                .FolderSort(true)
                .RowLines(true).Height(300)
                .SyncFx()
                .ColumnLines(true)
                .ID("GridTaskView")
                .Border(false)
                .Listeners(ls => ls.SelectionChange.Handler = "checkConMenuPerson(this);")
                .TopBarItem(
                Html.X().Container().Flex(1)
                        .Items(
                Html.X().Toolbar()
                        .MarginSpec("0 0 1 0")
                        .ID("bbGridTaskView")
                        .Items(
                                    Html.X().HiddenFor(m => m.HumanEmployeeID).ID("employeeId"),
                                        Html.X().DateFieldFor(m => m.FromDate).MarginSpec("0 0 0 5").LabelWidth(50).Width(150).ID("txtFromDate1").FieldLabel("<b>Từ ngày</b>").ReadOnly(true),
                                    Html.X().DateFieldFor(m => m.ToDate).MarginSpec("0 0 0 5").LabelWidth(70).Width(150).FieldLabel("<b> đến ngày</b>").ID("txtToDate1").ReadOnly(true),
                Html.X().ComboBox()
                        .MarginSpec("0 0 0 5")
                        .FieldLabel("Nhóm công việc")
                        .EmptyText("Chọn nhóm công việc")
                        .AllowBlank(false)
                        .ID("cbCateTask")
                        .Listeners(ls => ls.Select.Handler = "App.GridTaskView.getStore().load();")
                        .Editable(false)
                        .LabelWidth(100)
                        .Width(300)
                        .Items(new ListItem("Tất cả", 0))
                        .SelectedItems(new ListItem("Tất cả", 0))
                        .BlankText("Nhóm công việc không được bỏ trống!")
                        .DisplayField("Name")
                        .ValueField("ID")
                        .Store(
                            Html.X().Store()
                                .AutoLoad(true)
                                .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("GetDataIsUse", "TaskCategory", new { area = "Task" }))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                )
                                .Model(Html.X().Model()
                                    .Fields(
                                        new ModelField("ID"),
                                        new ModelField("Name")
                                    )
                                )
                        ),
                            Html.X().ToolbarSeparator(),
                            Html.X().ButtonView().ID("btnComent").Icon(Icon.Comment).Handler("Coment();").Text("Nhận xét công việc"),
                  Html.X().ToolbarFill(),
                  Html.X().ButtonTutorial()
                )
              )
            )
            .Store(
                Html.X().TreeStore()
                .ID("stTask")
                .AutoSync(false)
                .AutoDataBind(false)
                .AutoLoad(false)
                .Proxy(Html.X().AjaxProxy()
                .Url(Url.Action("LoadTreeTaskPersonal", "TaskPerson", new { area = "Task" }))
                .Reader(
                    Html.X().JsonReader().Root("data"))
                        .IDParam("id"))
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("cateId", "App.cbCateTask.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("employeeId", "App.employeeId.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("fromdate", "App.txtFromDate1.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("todate", "App.txtToDate1.getValue()", ParameterMode.Raw));
                        })
                    .Model(Html.X().Model()
                    .Fields(
                        new ModelField("id"),
                        new ModelField("text", ModelFieldType.String),
                        new ModelField("IsRequireCheck", ModelFieldType.Boolean),
                        new ModelField("LevelName", ModelFieldType.String),
                        new ModelField("CategoryName", ModelFieldType.String),
                        new ModelField("LevelColor", ModelFieldType.String),
                        new ModelField("StartTime", ModelFieldType.String),
                        new ModelField("EndTime", ModelFieldType.String),
                        new ModelField("IsNew", ModelFieldType.Boolean),
                        new ModelField("IsEdit", ModelFieldType.Boolean),
                        new ModelField("IsAccept", ModelFieldType.Boolean),
                        new ModelField("IsComplete", ModelFieldType.Boolean),
                        new ModelField("IsPass", ModelFieldType.Boolean),
                        new ModelField("IsPause", ModelFieldType.Boolean),
                        new ModelField("IsOverTime", ModelFieldType.Boolean),
                        new ModelField("PerformBy", ModelFieldType.Int),
                        new ModelField("Status", ModelFieldType.String),
                        new ModelField("Rate", ModelFieldType.Float),
                        new ModelField("IsNew", ModelFieldType.Boolean),
                        new ModelField("IsCreate", ModelFieldType.Boolean),
                        new ModelField("IsPerform", ModelFieldType.Boolean),
                        new ModelField("TaskID", ModelFieldType.Int)
                    )
                )
            )
            .ColumnModel(
                            Html.X().RowNumbererColumn()
                                .Text("STT.").DataIndex("id")
                                .Width(33)
                                .Align(Alignment.Center),
                            Html.X().TreeColumn()
                                .Text("Tên công việc")
                                .DataIndex("text")
                                .Width(300).Flex(1)
                                .Wrap(true)
                                .Renderer("rendererNew")
                                .HeaderItems(
                                    Html.X().TriggerField()
                                            .EnableKeyEvents(true)
                                            .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.Clear))
                                            .Listeners(l =>
                                            {
                                                l.KeyUp.Fn = "filterTree";
                                                l.KeyUp.Buffer = 350;
                                                l.TriggerClick.Fn = "clearFilter";
                                            })
                                            ),
                            Html.X().Column()
                                .Text("Thời gian thực hiện")
                                .Columns(
                                    Html.X().Column()
                                        .Width(120)
                                        .Text("Bắt đầu")
                                        .Align(Alignment.Center)
                                        .DataIndex("StartTime"),
                                    Html.X().Column()
                                        .Width(120)
                                        .Text("Kết thúc")
                                        .Align(Alignment.Center)
                                        .DataIndex("EndTime")
                                ),
                            Html.X().ComponentColumn()
                                    .Text("Tiến độ")
                                    .Component(Html.X().ProgressBar().Text("%"))
                                    .Listeners(ls => ls.Bind.Handler = "cmp.updateProgress(record.get('Rate')/100, record.get('Rate') + '%'); "),
                            Html.X().Column()
                                    .Width(100)
                                    .Text("Trạng thái")
                                    .Align(Alignment.Center)
                                    .DataIndex("Status"),
                            Html.X().Column()
                                    .Width(100)
                                    .Text("Mức độ")
                                    .DataIndex("LevelName")
                                    .Align(Alignment.Center)
                                    .Renderer(new Renderer { Fn = "function(value, meta, record) { meta.style = 'background-color:' + record.get('LevelColor') + ';'; return value; }" }),
                            Html.X().Column()
                                    .Text("Trách nhiệm")
                                    .Columns(
                                        Html.X().CheckColumn()
                                            .Text("Tạo mới")
                                            .DataIndex("IsCreate")
                                            .Width(70),
                                        Html.X().CheckColumn()
                                            .Text("Thực hiện")
                                            .DataIndex("IsPerform")
                                            .Width(70)
                                            )
                     )
            .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Single))
    )
)
<style type="text/css">
    .newRequireCheck .x-grid-cell {
        background-color: yellow !important;
        opacity: 0.8;
    }

    .idas-focus {
        background-color: darkkhaki !important;
        opacity: 0.8;
    }
</style>
<script type="text/javascript">
    var Coment = function () {
        var records = App.GridTaskView.selModel.getSelection();
        if (records.length > 0) {
            var url = '@(Url.Action("ListComentForm"))';
            var params = {
                id: records[0].get('id')
            };
            onDirectMethod(url, params);
        }
        else {
            MessageBox();
        };
    };
    var optionTimeTaskPerson = function () {
        var date = new Date();
        var option = App.Year.getValue();
        if (option == 0) {
            var startDay = 1;
            var d = date.getDay();
            var weekStart = new Date(date.valueOf() - (d <= 0 ? 7 - startDay : d - startDay) * 86400000);
            var weekEnd = new Date(weekStart.valueOf() + 6 * 86400000);
            App.dfFromDate.setValue(weekStart);
            App.dfToDate.setValue(weekEnd);
        }
        else if (option == 1) {
            App.dfFromDate.setValue(new Date(date.getFullYear(), date.getMonth(), 1));
            App.dfToDate.setValue(new Date(date.getFullYear(), date.getMonth() + 1, 0));
        } else {
            App.dfFromDate.setValue(new Date(App.Year.getValue(), 0, 1));
            App.dfToDate.setValue(new Date(App.Year.getValue(), 11, 31));
        }
        App.stTask.load();
    };
    var onSpecialKey = function (field, e) {
        if (e.getKey() === e.ENTER) {
            App.stTask.reload();
            e.stopEvent();
        }
    };
    var openChoiceEmployeeWindow = function () {
        var url = '@(Url.Action("EmployeeWindow", "TaskPerson", new { Area = "Task" }))';
        var params = {
            multi: false,
        };
        onDirectMethod(url, params);
    };
    
    var getColor = function (obj, store) {
        var id = obj.getValue();
        var record = store.getById(id);
        if (record != null) {
            var color = record.get('Color');
            obj.setFieldStyle('background-image: none; background-color: ' + color + ';');
        } else {
            return false;
        }
    };
    var rendererNew = function (value, metadata, record) {
        if (record.data.IsNew) {
            value = "<span style='margin-left: 0px;padding-left: 35px; background: url(/Content/images/new_red.gif) no-repeat scroll 0px 0px transparent'>&nbsp;</span>" + value;
        }
        return value;
    };
    function selectEmployeeTask(records) {
        if (records.length == 1) {
            App.employeeId.setValue(records[0].get('ID'));
            App.imgemployeesAvatar.setImageUrl('/Generic/File/LoadAvatarFile?employeeId=' + records[0].get('ID'));
            App.dpemployeesName.setValue(records[0].get('Name'));
            App.GridTaskView.getStore().load();
        }
        else {
            Ext.MessageBox.show({ title: 'Thông báo', msg: 'Bạn chưa chọn nhân sự nào cần xem công việc!', buttons: { yes: 'Đồng ý' }, iconCls: '#Information' });
        };
    };
    
    var checkConMenuPerson = function (grid) {
        TaskGridPanel = grid;
        var records = TaskGridPanel.selModel.getSelection();
        if (records.length == 1) {
            SetEnabled(App.btnComent);
        }else
        {
            SetDisabled(App.btnComent);
        }
    };
    
   
    
    var filterTree = function (tf, e) {
        var tree = this.up("treepanel"),
            text = tf.getRawValue();
        tree.clearFilter();
        if (Ext.isEmpty(text, false)) {
            return;
        }
        if (e.getKey() === Ext.EventObject.ESC) {
            clearFilter();
        } else {
            var re = new RegExp(".*" + text + ".*", "i");
            tree.filterBy(function (node) {
                return re.test(node.data.text);
            });
        }
    };
    var clearFilter = function () {
        var field = this,
            tree = this.up("treepanel");
        field.setValue("");
        tree.clearFilter(true);
        tree.getView().focus();
    };
    var getRowClass = function (record, index, rowParams, ds) {
        if (record.get("id") == App.hdfFocusID.value) {
           return 'idas-focus';
        };
        return record.get('IsRequireCheck') == true ? 'newRequireCheck' : '';
    };
</script>