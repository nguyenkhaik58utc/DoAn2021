@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web.ExtExtend;
@model iDAS.Web.Areas.Human.Models.V3_HumanProfileCuriculmViateResponse
@{
    var X = Html.X();
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@(Html.X().Viewport().Layout(LayoutType.Fit).Border(false).Margin(0).Frame(false)
 .Items(
    Html.X().FormPanel()
    .ID("frmUpdateDetail")
    .Layout(LayoutType.Form)
    .Frame(true)
    .AutoScroll(true)
    .StyleSpec("border: none;")
    .Padding(1)
    .TopBar(X.Toolbar().Layout(LayoutType.HBox)
    .Items(
        //X.Button().Text("In").IconCls("x-fa fa-print").Handler("OpenNewWindow()"),
        X.Button().Text("In").Icon(Icon.Printer)
        .DirectEvents(de =>
        {
            de.Click.ExtraParams.Add(new { Id = Model.HeID });
            de.Click.Url = Url.Action("FormPreviewProfileEmployee", "V3_ProfileCuriculmViate", new { Area = "human" });
        })

        //X.Button().Text("Lưu hồ sơ").IconCls("x-fa fa-floppy-o")
        //.DirectEvents(de =>
        //{
        //    //de.Click.Before = "GetHtmlProfile();";
        //    // de.Click.ExtraParams.Add(new { departmentId = Model.DepartmentId });
        //    de.Click.ExtraParams.Add(new { curiculmviateId = Model.ID });
        //    de.Click.Url = Url.Action("FormAddProfileFromHuman", "Profile", new { Area = "Profile" });
        //})
        )
    )
    .Items(
        X.Container().ID("cntProfileHumanDetail")
        .Items(
            X.FieldSet().Title("Thông tin cơ bản").Border(true)
            .Padding(5)
            .FieldDefaults(df => df.LabelWidth = 150)
            .Items(
                X.HiddenFor(m => m.HumanEmployeeID) .ID("hiddenEmployeeID"),
                X.HiddenFor(m => m.ID),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.Aliases).FieldLabel("Bí danh").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.NationalityName).FieldLabel("Quốc tịch").Flex(1).MarginSpec("0 5 0 5")
                ),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.ReligionName).FieldLabel("Tôn giáo").Flex(1).MarginSpec("0 0 0 0"),

                    X.DisplayFieldFor(m => m.CityIDOfBirthName).FieldLabel("Nơi sinh").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.HomePhone).FieldLabel("Điện thoại nhà riêng").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.OfficePhone).FieldLabel("Điện thoại cá nhân").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.NumberOfIdentityCard).FieldLabel("Số CMT").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.DateIssueOfIdentityCard).FieldLabel("Ngày cấp CMT").Flex(1).MarginSpec("0 5 0 5")),
                //X.DisplayFieldFor(m => m.DateIssueOfIdentityCard.ToString("MMMM dd, yyyy")).FieldLabel("Ngày cấp CMT").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.PlaceIssueOfIdentityCard).FieldLabel("Nơi cấp CMT").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.TaxCode).FieldLabel("Mã số thuế").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.NumberOfBankAccounts).FieldLabel("Số tài khoản").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.Bank).FieldLabel("Ngân hàng").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.NumberOfPassport).FieldLabel("Số hộ chiếu").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.PlaceOfPassport).FieldLabel("Nơi cấp hộ chiếu").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.DateOfIssuePassport).FieldLabel("Ngày cấp hộ chiếu").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.PassportExpirationDate).FieldLabel("Ngày hết hạn hộ chiếu").Flex(1).MarginSpec("0 5 0 5")),
                X.DisplayFieldFor(m => m.EthnicName).FieldLabel("Dân tộc").MarginSpec("0 5 0 0")
                ),
            X.FieldSetVBox().Title("Thông tin lý lịch chính trị").Border(true)
            .Padding(5)
            .FieldDefaults(df => df.LabelWidth = 100)
            .Items(
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.DateOnGroup).FieldLabel("Ngày vào đoàn").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.YouthPositionName).FieldLabel("Chức vụ đoàn").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.PlaceOfLoadedGroup).FieldLabel("Nơi kết nạp đoàn").LabelWidth(180).Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.DateJoinRevolution).FieldLabel("Ngày tham gia cách mạng").LabelWidth(180).Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.DateAtParty).FieldLabel("Ngày vào Đảng").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.DateOfJoinParty).FieldLabel("Ngày vào Đảng chính thức").LabelWidth(180).Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.PlaceOfLoadedParty).FieldLabel("Nơi kết nạp").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.PartyPosititonName).FieldLabel("Chức vụ Đảng").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.NumberOfPartyCard).FieldLabel("Số thẻ Đảng").Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.DateOnMilitary).FieldLabel("Ngày nhập ngũ").Flex(1).MarginSpec("0 5 0 5")),
                X.ContainerHBox()
                .Items(
                    X.DisplayFieldFor(m => m.MilitaryPosition).FieldLabel("Chức vụ quân đội").LabelWidth(180).Flex(1).MarginSpec("0 0 0 0"),
                    X.DisplayFieldFor(m => m.MilitaryPositionLevelName).FieldLabel("Cấp bậc quân đội").LabelWidth(180).Flex(1).MarginSpec("0 5 0 5"))
            ),
            X.FieldSetVBox().Title("Thông tin khác").Border(true).Padding(5)
            .FieldDefaults(df => df.LabelWidth = 100)
            .Items(
                    X.DisplayFieldFor(m => m.Likes).FieldLabel("Sở thích").MarginSpec("0 5 0 0"),
                    X.ContainerHBox().MarginSpec("0 0 0 0")
                    .Items(
                        X.DisplayFieldFor(m => m.Forte).FieldLabel("Ưu điểm").Flex(1).MarginSpec("0 5 10 0"),
                        X.DisplayFieldFor(m => m.Defect).FieldLabel("Nhược điểm").Flex(1).MarginSpec("0 5 10 5")
                    )
                )
            ,
            X.FieldSetHBox().Title("Hồ sơ quá trình công tác").Border(true).Padding(5)
            .MinHeight(200)
            .Items(
                Html.X().GridPanel()
                    .Header(false)
                    .ID("gridProfileWorkExperienceDetail")
                    .ColumnLines(true)
                    .Flex(1)
                    .Border(true)
                .Store(
                    Html.X().Store()
                        .ID("stProfileWorkExperienceDetail")
                        .RemotePaging(true)
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileWorkExperienceNotPaging", "V3_ProfileWorkExperience", new { Area = "Human" }))
                        .Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                             .Parameters(ps =>
                             {
                                 ps.Add(new StoreParameter("EmployeeID", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                             })
                        .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("StartDate"),
                            Html.X().ModelField().Name("EndDate"),
                            Html.X().ModelField().Name("PlaceOfWork"),
                            Html.X().ModelField().Name("Position"),
                            Html.X().ModelField().Name("Department"),
                            Html.X().ModelField().Name("JobDescription")
                            )
                          )
                )
                .ColumnModel(
                        X.RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                        X.DateColumnFormat().DataIndex("StartDate").Text("Bắt đầu").Width(90).StyleSpec("font-weight: bold;"),
                        X.DateColumnFormat().DataIndex("EndDate").Text("Kết thúc").Width(90).StyleSpec("font-weight: bold;"),
                        X.Column().DataIndex("PlaceOfWork").Text("Nơi công tác").Width(250).StyleSpec("font-weight: bold;"),
                        X.Column().DataIndex("Position").Text("Chức vụ đảm nhiệm").Width(200).StyleSpec("font-weight: bold;"),
                        X.Column().DataIndex("Department").Text("Phòng ban").Width(250).StyleSpec("font-weight: bold;"),
                        X.Column().DataIndex("JobDescription").Text("Công việc").Flex(1).StyleSpec("font-weight: bold;")
                    )
            ),
        X.FieldSetHBox().Title("Hồ sơ quá trình đào tạo").Border(true).Padding(5)
        .MinHeight(200)
        .Items(
                X.GridPanel()
                .Header(false)
                .ID("gridProfileTrainingDetail")
                .ColumnLines(true)
                .Flex(1)
                .Border(true)
                .Store(
                    X.Store()
                        .ID("stProfileTrainingDetail")
                        .Proxy(X.AjaxProxy().Url(Url.Action("LoadProfileTrainingNotPaging", "V3_ProfileTraining", new { Area = "Human" }))
                        .Reader(X.JsonReader().Root("data")).IDParam("Id"))
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                            //ps.Add(new StoreParameter("employeeId", Model.HumanEmployeeId));
                        })
                                 .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("Name"),
                            Html.X().ModelField().Name("EducationTypeName"),
                            Html.X().ModelField().Name("Content"),
                            Html.X().ModelField().Name("Certificate"),
                            Html.X().ModelField().Name("EducationResultName")
                            )
                       )
                )
                .ColumnModel(
                    X.RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("Name").Text("Tên khóa học").Width(250).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("EducationTypeName").Text("Hình thức đào tạo").Width(280).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("Content").Text("Nội dung đào tạo").Flex(1).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("Certificate").Text("Chứng chỉ đào tạo").Width(190).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("EducationResultName").Text("Kết quả đào tạo").Width(140).StyleSpec("font-weight: bold;")
                )
            ),
        X.FieldSetHBox().Title("Hồ sơ văn bằng").Border(true).Padding(5)
        .MinHeight(200)
        .Items(
            X.GridPanel()
                .Header(false)
                .ID("gridProfileDiplomaDetail")
                .ColumnLines(true)
                .Border(true)
                .Flex(1)
                .Store(
                    X.Store()
                        .ID("stProfileDiplomaDetail")
                        .Proxy(X.AjaxProxy().Url(Url.Action("LoadProfileDiplomaNotPaging", "V3_ProfileDiploma", new { Area = "Human" }))
                        .Reader(X.JsonReader().Root("data")).IDParam("Id"))
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                        })
                           .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("Name"),
                            Html.X().ModelField().Name("Faculty"),
                            Html.X().ModelField().Name("EducationFieldName")
                            )
                       )
                )
                .ColumnModel(
                    X.RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("Name").Text("Tên văn bằng").Flex(1).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("Faculty").Text("Khoa").Width(350).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("EducationFieldName").Text("Chuyên ngành").Width(350).StyleSpec("font-weight: bold;")
                )
            ),
        X.FieldSetHBox().Title("Hồ sơ chứng chỉ").Border(true).Padding(5)
        .MinHeight(200)
        .Items(
            X.GridPanel()
                .Header(false)
                .ID("gridProfileCertificateDetail")
                .ColumnLines(true)
                .Border(true).Flex(1)
            .Store(
                X.Store()
                    .ID("stProfileCertificateDetail")
                    .Proxy(X.AjaxProxy().Url(Url.Action("LoadProfileCertificateNotPaging", "V3_ProfileCertificate", new { Area = "Human" }))
                    .Reader(X.JsonReader().Root("data")).IDParam("Id"))
                    .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                    })
                    .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("NameCertificate"),
                            Html.X().ModelField().Name("NameCertificateLevel"),
                            Html.X().ModelField().Name("NameCertificateType"),
                            Html.X().ModelField().Name("PlaceOfTraining"),
                            Html.X().ModelField().Name("DateIssuance")
                            )
                       )
                )
                .ColumnModel(
                    X.RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("NameCertificate").Text("Tên chứng chỉ").Flex(1).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("NameCertificateLevel").Text("Xếp loại").Width(150).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("NameCertificateType").Text("Trình độ").Width(200).StyleSpec("font-weight: bold;"),
                    X.Column().DataIndex("PlaceOfTraining").Text("Nơi cấp").Width(300).StyleSpec("font-weight: bold;"),
                    X.DateColumnFormat().DataIndex("DateIssuance").Text("Ngày cấp").Width(110).Format("dd/MM/yyyy").StyleSpec("font-weight: bold;")
                )
            ),
        X.FieldSetHBox().Title("Hồ sơ khen thưởng").Border(true).Padding(5)
        .MinHeight(200).Items(
            X.GridPanel()
            .Header(false)
            .ID("gridProfileRewardDetail")
            .ColumnLines(true)
            .Border(true).Flex(1)
            .Store(
                Html.X().Store()
                    .ID("stProfileRewardDetail")
                    .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileRewardNotPaging", "V3_ProfileReward", new { Area = "Human" }))
                    .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                    .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                    })
                      .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("NumberOfDecision"),
                            Html.X().ModelField().Name("DateOfDecision"),
                            Html.X().ModelField().Name("Reason"),
                            Html.X().ModelField().Name("Name")
                            )
                       )
                )
                .ColumnModel(
                    Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("NumberOfDecision").Text("Số quyết định").Width(200).StyleSpec("font-weight: bold;"),
                    Html.X().DateColumnFormat().DataIndex("DateOfDecision").Text("Ngày quyết định").Width(130).Format("dd/MM/yyyy").Align(0).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Reason").Text("Lý do").Flex(1).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Name").Text("Hình thức khen thưởng").Width(200).StyleSpec("font-weight: bold;")
                )
            ),
        X.FieldSetHBox().Title("Hồ sơ kỷ luật").Border(true).Padding(5)
        .MinHeight(200).Items(
                X.GridPanel()
                .Header(false)
                .ID("gridProfileDisciplineDetail")
                .ColumnLines(true)
                .Border(true).Flex(1)
                .Store(
                    Html.X().Store()
                        .ID("stProfileDisciplineDetail")
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileDisciplineNotPaging", "V3_ProfileDiscipline", new { Area = "Human" }))
                        .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                        })
                        .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("NumberOfDecision"),
                            Html.X().ModelField().Name("DateOfDecision"),
                            Html.X().ModelField().Name("Reason"),
                            Html.X().ModelField().Name("DisciplineCategoryName")
                            )
                       )
                )
                .ColumnModel(
                    Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("NumberOfDecision").Text("Số quyết định").Width(350).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Reason").Text("Lý do kỷ luật").StyleSpec("font-weight: bold;").Flex(1),
                    Html.X().Column().DataIndex("DisciplineCategoryName").Text("Hình thức kỷ luật").Width(350).StyleSpec("font-weight: bold;"),
                     Html.X().DateColumnFormat().DataIndex("DateOfDecision").Text("Ngày quyết định").Width(130).Format("dd/MM/yyyy").StyleSpec("font-weight: bold;")
                )
            ),
        X.FieldSetHBox().Title("Hồ sơ đánh giá").Border(true).Padding(5)
        .MinHeight(200).Items(
                X.GridPanel()
                .Header(false)
                .ID("gridProfileAssessDetail")
                .ColumnLines(true)
                .Border(true).Flex(1)
                .Store(
                    Html.X().Store()
                        .ID("stProfileAssessDetail")
                        .AutoLoad(true)
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileAssessNotPaging", "V3_ProfileAssess", new { Area = "Human" }))
                        .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                        })
                           .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("Name"),
                            Html.X().ModelField().Name("Score"),
                            Html.X().ModelField().Name("Result"),
                            Html.X().ModelField().Name("Note")
                            )
                       )
                    )
                .ColumnModel(
                    Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Name").Text("Đợt đánh giá").Width(350).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Score").Text("Điểm").Width(100).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Result").Text("Kết quả").Width(150).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Note").Text("Ghi chú").Flex(1).StyleSpec("font-weight: bold;")
                )
            ),
        X.FieldSetHBox().Title("Hồ sơ hợp đồng lao động").Border(true).Padding(5)
        .MinHeight(200).Items(
                    X.GridPanel()
                    .Header(false)
                    .ID("gridProfileContractDetail")
                    .ColumnLines(true)
                    .Border(true).Flex(1)
                    .Store(
                        Html.X().Store()
                            .ID("stProfileContractDetail")
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileContractNotPaging", "V3_ProfileContract", new { Area = "Human" }))
                            .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                            })
                              .Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("NumberOfContracts"),
                            Html.X().ModelField().Name("ContractTypeName"),
                            Html.X().ModelField().Name("StartDate"),
                            Html.X().ModelField().Name("EndDate")
                            )
                       )
                    )
                    .ColumnModel(
                        Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("NumberOfContracts").Text("Số hợp đồng").Width(350).StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("ContractTypeName").Text("Loại hợp đồng").StyleSpec("font-weight: bold;").Flex(1),
                        Html.X().DateColumnFormat().DataIndex("StartDate").Text("Ngày bắt đầu").Width(110).Format("dd/MM/yyyy").StyleSpec("font-weight: bold;"),
                        Html.X().DateColumnFormat().DataIndex("EndDate").Text("Ngày kết thúc").Width(110).Format("dd/MM/yyyy").StyleSpec("font-weight: bold;")
                    )
            ),
        X.FieldSetHBox().Title("Hồ sơ quan hệ gia đình").Border(true).Padding(5)
        .MinHeight(200).Items(
                    X.GridPanel()
                    .Header(false)
                    .ID("gridProfileRelationshipDetail")
                    .ColumnLines(true)
                    .Border(true).Flex(1)
                    .Store(
                        Html.X().Store()
                            .ID("stProfileRelationshipDetail")
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileRelationshipNotPaging", "V3_ProfileRelationship", new { Area = "Human" }))
                            .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("EmployeeID", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                            }).Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("Name"),
                            Html.X().ModelField().Name("Age"),
                            Html.X().ModelField().Name("IsMale"),
                            Html.X().ModelField().Name("Relationship"),
                            Html.X().ModelField().Name("Job"),
                            Html.X().ModelField().Name("PlaceOfJob")
                            ))
                    )
                    .ColumnModel(
                        Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("Name").Text("Họ tên").Width(350).StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("Age").Text("Năm sinh").Width(90).StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("IsMale").Renderer("ShowGender").Text("Giới tính").Width(90).StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("Relationship").Text("Quan hệ").Width(100).StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("Job").Text("Nghề nghiệp").Width(200).StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("PlaceOfJob").Text("Nơi công tác").Flex(1).StyleSpec("font-weight: bold;")
                    )
            ),
        X.FieldSetHBox().Title("Hồ sơ lương").Border(true).Padding(5)
        .MinHeight(200).Items(
                    X.GridPanel()
                    .Header(false)
                    .ID("gridProfileSalaryDetail")
                    .ColumnLines(true)
                    .ForceFit(true)
                    .Border(true).Flex(1)
                    .Store(
                        Html.X().Store()
                            .ID("stProfileSalaryDetail")
                            .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileSalaryNotPaging", "V3_ProfileSalary", new { Area = "Human" }))
                            .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                            .Parameters(ps =>
                            {
                                ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                            }).Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("Level"),
                            Html.X().ModelField().Name("Wage"),
                            Html.X().ModelField().Name("DateOfApp")
                            ))
                    )
                    .ColumnModel(
                        Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("Level").Text("Mức lương").Width(350).StyleSpec("font-weight: bold;"),
                        Html.X().Column().DataIndex("Wage").Text("Bậc lương").Width(300).StyleSpec("font-weight: bold;"),
                        Html.X().DateColumnFormat().DataIndex("DateOfApp").Text("Ngày áp dụng").Flex(1).Format("dd/MM/yyyy").StyleSpec("font-weight: bold;")
                    )
            ),
        X.FieldSetHBox().Title("Hồ sơ bảo hiểm").Border(true).Padding(5)
        .MinHeight(200).Items(
            Html.X().GridPanel()
                .Header(false)
                .ID("gridProfileInsuranceDetail")
                .ColumnLines(true)
                .ForceFit(true)
                .Border(true).Flex(1)
            .Store(
                Html.X().Store()
                    .ID("stProfileInsuranceDetail")
                    .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileInsuranceNotPaging", "V3_ProfileInsurance", new { Area = "Human" }))
                    .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                    .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                    }).Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("Number"),
                            Html.X().ModelField().Name("Type"),
                            Html.X().ModelField().Name("StartDate"),
                            Html.X().ModelField().Name("EndDate")
                            ))
                )
                .ColumnModel(
                    Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Number").Text("Số bảo hiểm").Width(350).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Type").Text("Loại bảo hiểm").Flex(1).StyleSpec("font-weight: bold;"),
                    Html.X().DateColumnFormat().DataIndex("StartDate").Text("Ngày bắt đầu").Width(130).Format("dd/MM/yyyy").StyleSpec("font-weight: bold;"),
                    Html.X().DateColumnFormat().DataIndex("EndDate").Text("Ngày kết thúc").Width(130).Format("dd/MM/yyyy").StyleSpec("font-weight: bold;")
                )
            ),
        X.FieldSetHBox().Title("Hồ sơ đính kèm").Border(true).Padding(5)
        .MinHeight(200).Items(
                X.GridPanel()
                .Header(false)
                .ID("gridProfileAttachDetail")
                .ColumnLines(true)
                .Border(true).Flex(1)
                .Store(
                    Html.X().Store()
                        .ID("stProfileAttachDetail")
                        .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadProfileAttachNotPaging", "V3_ProfileAttach", new { Area = "Human" }))
                        .Reader(Html.X().JsonReader().Root("data")).IDParam("Id"))
                        .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("employeeId", "App.hiddenEmployeeID.getValue()", ParameterMode.Raw));
                        }).Model(
                            Html.X().Model().Fields(
                            Html.X().ModelField().Name("Name"),
                            Html.X().ModelField().Name("Note")
                            ))
                )
                .ColumnModel(
                    Html.X().RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Name").Text("Tên tài liệu").Width(350).StyleSpec("font-weight: bold;"),
                    Html.X().Column().DataIndex("Note").Text("Ghi chú").Flex(1).StyleSpec("font-weight: bold;")
                )
            )
            //,
            //X.FieldSetHBox().Title("Hồ sơ thử việc").Border(true).Padding(5)
            //.MinHeight(200).Items(
            //        X.GridPanel()
            //        .ID("gridAuditTickDetail")
            //        .Border(true).Flex(1)
            //        .ColumnLines(true)
            //        .Store(
            //            X.Store()
            //                .ID("stMnPhaseAuditDetail")
            //                .Proxy(X.AjaxProxy().Url(Url.Action("GetDataEmployeeNotPaging", "V3_ProfileWorkTrial", new { Area = "Human" }))
            //                .Reader(X.JsonReader().Root("data")))
            //                .Parameters(ps =>
            //                {
            //                    ps.Add(new StoreParameter("empID", "1"));
            //                })
            //                .RemoteSort(true)
            //                .AutoLoad(true).Model(
            //                    Html.X().Model().Fields(
            //                    Html.X().ModelField().Name("Name"),
            //                    Html.X().ModelField().Name("Name"),
            //                    Html.X().ModelField().Name("Name"),
            //                    Html.X().ModelField().Name("Name"),
            //                    Html.X().ModelField().Name("Name"),
            //                    Html.X().ModelField().Name("Name"),
            //                    Html.X().ModelField().Name("Name"),
            //                    Html.X().ModelField().Name("Note")
            //                    ))
            //        )
            //            )
            //        .ColumnModel(
            //            X.RowNumbererColumnFormat().StyleSpec("font-weight: bold;"),
            //            X.Column().Text("Tên nhân viên").DataIndex("HumanEmployee.Name").Flex(1).StyleSpec("font-weight: bold;"),
            //            X.Column().DataIndex("Role.Name").Text("Chức danh").Width(300).StyleSpec("font-weight: bold;"),
            //            X.ComponentColumn().Text("Thời gian thử việc").StyleSpec("font-weight: bold;").Columns(
            //                X.DateColumnFormat().DataIndex("FromDate").Text("Bắt đầu").Width(110).Format("dd/MM/yyyy").Align(0).StyleSpec("font-weight: bold;"),
            //                X.DateColumnFormat().DataIndex("ToDate").Text("Kết thúc").Width(110).Format("dd/MM/yyyy").Align(0).StyleSpec("font-weight: bold;")),
            //            X.Column().Text("Trạng thái").DataIndex("StatusApproval").StyleSpec("font-weight: bold;")
            //        )
            )
        )
    )
)
<script>
    var ShowGender = function (value) {
        return value == true ? "Nam" : "Nữ";
    };

    var OpenNewWindow = function () {
        var win = window.open('/ReportDesigner/ViewReport.aspx?emp=@Model.HumanEmployeeID', '_blank');
        win.focus();
    };

    var getContent = function () {
        var html = $("#cntProfileHumanDetail").html();
        return html;
    };

    @*var Export = function () {
        var url = '@Url.Action("Index", "Export", new { area = "Organization", employeeId = Model.HumanEmployeeID.Value })';
        $.ajax({
            url: url,
            type: 'GET',
            contentType: 'application/json;charset=utf-8',
            success: function (result) {
                var param = { content: result };
                var url1 = '@Url.Action("DownloadPDF", "ProfileWorkExperience", new { Area = "Organization" })';
                onDirectMethod(url1, param);
            }
        })
    };*@
    var GetHtmlProfile = function () {
        $.ajax({
            url: '@Url.Action("InformationProfile", new { employeeId = Model.HumanEmployeeID})',
            type: 'GET',
            contentType: 'application/json;charset=utf-8',
            success: function (result) {
                var param = { data: result };
                var urlExport = '@Url.Action("Export")';
                onDirectMethod(urlExport, param);
            }
        })
    };
</script>