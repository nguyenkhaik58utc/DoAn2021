@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Web.ExtExtend;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var X = Html.X();
}
@( Html.X().Viewport()
    .Layout(LayoutType.Border)
    .Items(

        Html.X().GridPanel()
            .Header(true)
            .Region(Region.West)
            .Width(470)
            .Split(true)
            .Title("DANH SÁCH ĐỢT ĐÁNH GIÁ")
            .ID("grPlanDetail")
            .Border(true)
            .MarginSpec("1 0 1 1")
            .TitleAlign(TitleAlign.Center)
            .Layout(LayoutType.Fit)
            .Collapsible(true)
            .ForceFit(true)
            .ColumnLines(true)
            .RowLines(true)
                .TopBar(
                    Html.X().Toolbar()
                            .ID("tbgpDepartmentStatisticalProfile")
                            .Items(
                                                Html.X().SearchByDate("App.stMnPlanDetail.load();")
                                                        .FromDateID("dfFromDate").ToDateID("dfToDate"),
                                        Html.X().ToolbarSeparator(),
                                        Html.X().Button()
                                            .Icon(Icon.ChartCurve)
                                            .ID("groupChart")
                                                .Text("Xem dưới dạng biểu đồ").Hidden(true)
                                            .Menu(Html.X().Menu()
                                                .Items(
                                                        Html.X().MenuItem()
                                                    .Text("Biểu đồ hình cột(SL)")
                                                                .ID("btnChartColumn")
                                                        .Disabled(true)
                                                        .Listeners(ls => ls.Click.Handler = "showChartColumn();")
                                                        .Icon(Icon.ChartBar)
                                            )
                                    )
                                    ))
                      .Store(Html.X().Store()
                        .ID("stMnPlanDetail")
                        .AutoLoad(false)
                        .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("LoadDataPlan", "AuditKPIStatistical"))

                        .Reader(Html.X().JsonReader().Root("data"))

                        )
                        .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("fromDate", "App.dfFromDate.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("toDate", "App.dfToDate.getValue()", ParameterMode.Raw));
                    })
                        .RemoteSort(true)
                        .RemotePaging(true)
                        .PageSize(20)
                        .Model(
                        Html.X().Model()
                                .Fields(
                                    Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                                    Html.X().ModelField().Name("Name").Type(ModelFieldType.String)
                                )
                              )
                          )
                    .ColumnModel(
                        Html.X().RowNumbererColumn()
                                .Text("STT")
                                .StyleSpec("font-weight: bold; text-align: center;")
                                .Align(Alignment.Center)
                                .Width(33),
                        Html.X().Column()
                                .Text("ID")
                                .DataIndex("ID")
                                .Hidden(true),
                        Html.X().Column()
                                .Text("Kế hoạch")
                                .StyleSpec("font-weight: bold;text-align: center")
                                    .DataIndex("Name")
                               .Flex(1)
                                .Wrap(true)

                )

                .SelectionModel(
                    Html.X().CheckboxSelectionModel()
                            .Mode(SelectionMode.Single)
                            .Listeners(l =>
                            {
                                l.SelectionChange.Handler = "App.grMnPractioners.getStore().reload();";
                            })
                            )

                              .View(
                            Html.X().GridView().MarkDirty(false)
                            )
        .BottomBar(Html.X().CustomPagingToolbar()),
               Html.X().GridPanel()
               .Region(Region.Center)
                .Margin(1)
                        .Title("THỐNG KÊ ĐÁNH GIÁ NHÂN SỰ KPIs")
                .Header(true)
                .Icon(Icon.ApplicationViewDetail)
                        .ID("grMnPractioners")
                .ColumnLines(true)
                .ForceFit(true)
                .TopBar(
                        Html.X().Toolbar()
                            .Layout(LayoutType.HBox)
                            .Items(


                                                    Html.X().ButtonExportExcelFile().GridIDGetFile("grMnPractioners").TitleFile("THỐNG KÊ ĐÁNH GIÁ NHÂN SỰ KPIs"),
                                                 Html.X().ToolbarFill(),
                                    Html.X().ButtonTutorial()
                                )
                        )
            .Store(
                Html.X().Store()
                        .ID("StorePractioners")
                    .RemotePaging(true)
                    .AutoLoad(false)
                    .PageSize(20)
                                .Proxy(Html.X().AjaxProxy().Url(Url.Action("GetData", "AuditKPIStatistical", new { Area = "Human" })).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
                    .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("humanAuditGradationId", "App.grPlanDetail.selModel.getSelection().length>0?App.grPlanDetail.selModel.getSelection()[0].get('ID'):0", ParameterMode.Raw));
                        })
                    .Model(
                        Html.X().Model().Fields(
                                Html.X().ModelField().Name("HumanAuditGradationRoleID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("DepartmentName").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("RoleName").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("DepartmentRoleName").Type(ModelFieldType.String),
                                Html.X().ModelField().Name("AuditLevel").Type(ModelFieldType.String),
                                        Html.X().ModelField().Name("AuditLevelID").Type(ModelFieldType.Int),
                                Html.X().ModelField().Name("count").Type(ModelFieldType.Int)
                        )
                             ).GroupField("DepartmentName")
            )
            .ColumnModel(
                        X.RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                                X.Column().DataIndex("RoleName").Text("Chức danh").Width(300).Flex(1),
                                X.Column().DataIndex("AuditLevel").Text("Xếp loại").Align(Alignment.Center).Width(100),
                                    X.Column().DataIndex("count").Text("Kết quả thống kê").Align(Alignment.Center).Width(120).Renderer("renderDetail")
                        

                )
            .SelectionModel(Html.X().RowSelectionModel().Mode(SelectionMode.Single)
                                .Listeners(ls => ls.SelectionChange.Handler = "CheckStatus();"))
                                    .Features(
                Html.X().GroupingSummary()
                .ID("GroupingSummary")
                .GroupHeaderTplString("{name}")
                .HideGroupedHeader(true)
                .EnableGroupingMenu(false)
                )
            .BottomBar(X.CustomPagingToolbar())
    )
)
<script type="text/javascript">


    var checkPlanDetailStatus = function () {
        //var records = App.grPlanDetail.selModel.getSelection();
        //switch (records.length) {
        //    case 0:
        //        break;
        //    case 1:
        //        break;
        //    default:
        //}
    };
    function CheckStatus() {
        //var records = App.grMnPractioners.selModel.getSelection();
        //if (records.length > 0) {
        //    App.btnCancelUser.setDisabled(false);
        //}
        //else {
        //    App.btnCancelUser.setDisabled(true);
        //};
    };
    var showDetailStatiscal = function (storeUrl) {
        var records = App.gpDepartmentStatistical.selModel.getSelection();
        var cateId = 0;
        if (records.length > 0) {
            cateId = records[0].get('id');
        }
        var url = '@(Url.Action("SuppliersList", "SupplierStatistical", new { Area = "Suppliers" }))';
        var params = {
            urlStore: storeUrl,
            Name: 'cateId',
            Value: cateId,
            Mode: '@(ParameterMode.Value)',
            fromDate: Ext.Date.format(App.dfFromDate.getValue(), 'd/m/Y g:i A'),
            toDate: Ext.Date.format(App.dfToDate.getValue(), 'd/m/Y g:i A'),
        };
        onDirectMethod(url, params);
    };
    var renderDetail = function (value) {
        return "<a class='a-grid-cell' title='Click xem chi tiết' onclick =\"LoadList()\">" + value + "</a>";
    };
    var LoadList = function () {
        var records = App.grMnPractioners.selModel.getSelection();
        var url = '@(Url.Action("ListResult", "AuditKPIStatistical", new { Area = "Human" }, null))';
        var params = { HumanAuditGradationRoleID: records[0].get('HumanAuditGradationRoleID'), AuditLevelID: records[0].get('AuditLevelID') };
        onDirectMethod(url, params);
    };
</script>
