@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@using iDAS.Utilities
@using iDAS.Web.ExtExtend
@model iDAS.Items.AccountingPaymentPlanItem
@{
    var contractId = ViewData["ContractID"];
}
@(Html.X().ApprovalWindow()
    .UrlSubmit(Url.Action("ApprovePlan"))
    .ItemsExtend(
         Html.X().HiddenFor(m => m.ID).ID("hdfAccountingPaymentPlanID"),
        Html.X().HiddenFor(m => m.QualityPlanID),
        Html.X().Hidden().Value(contractId).ID("hdfContractID"),
         Html.X().TabPanel()
            .ID("TabPanelUpdatePlan")
            .Region(Region.Center)
            .ActiveTabIndex(0)
            .Border(true)
            .Items(
                   Html.X().FormPanel().Title("Thông tin kế hoạch")
                        .AutoScroll(true)
                        .Layout(LayoutType.VBox)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                        .Frame(true)
                        .FieldDefaults(df => { df.LabelWidth = 120; df.LabelStyle = "padding-left: 5px;"; })
                        .PaddingSpec("5 10 0 0")
                        .StyleSpec("-webkit-border-radius: 0; border-radius: 0;border: none;")
                        .Items(
                           Html.X().TextFieldFor(m => m.Name).EmptyText("Nhập tên kế hoạch ...").FieldLabel("Tên kế hoạch").AllowBlank(false).ReadOnly(true),
                               Html.X().ComboBoxFor(m => m.AccountingPaymentID).FieldLabel("Đề xuất").AllowBlank(false).ReadOnly(true)
                                    .QueryMode(DataLoadMode.Local).Editable(false)
                                    .ForceSelection(true)
                                    .DisplayField("Content")
                                    .ValueField("ID")
                                    .Store(Html.X().Store()
                                                .AutoLoad(true)
                                                .PageSize(100)
                                                .Model(Html.X().Model()
                                                        .IDProperty("ID")
                                                        .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                                new ModelField("Content", ModelFieldType.String) { Mapping = "Content" }))
                                                .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadAccountingPaymentForAccounting", "Contract", new { area = "Accounting" }))
                                                                .Reader(Html.X().JsonReader().Root("data")))
                                                .Parameters(ps =>
                                                    {
                                                        ps.Add(new StoreParameter("id", "App.hdfContractID.value", ParameterMode.Raw));
                                                    })
                                                                ),
                            Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 -2 2 0")
                                .Items(
                                        Html.X().DateTimeFieldFor(m => m.StartTime).FieldLabel("Bắt đầu").ReadOnly(true).ColumnWidth(0.55),
                                        Html.X().DateTimeFieldFor(m => m.EndTime).FieldLabel("Kết thúc").ReadOnly(true).LabelWidth(70).ColumnWidth(0.45)
                                    ),
                            Html.X().Container().Layout(LayoutType.Column).MarginSpec("2 -1 4 0")
                                .Items(
                                    Html.X().ComboBoxFor(m => m.Type).FieldLabel("Loại kế hoạch").ReadOnly(true)
                                            .EmptyText("Chọn loại kế hoạch")
                                            .Items(new ListItem("Tổ chức", false),
                                                    new ListItem("Cá nhân", true))
                                            .AllowBlank(false).ColumnWidth(0.55),
                                     Html.X().NumberFieldFor(m => m.Cost).ReadOnly(true)
                                            .LabelWidth(70).ColumnWidth(0.45).MinValue(0)
                                            .FieldLabel("Chi phí")
                                ),
                            Html.X().DepartmentFieldFor(m => m.Department).ReadOnly(true).FieldLabel("Phòng ban").Height(25),
                            Html.X().ComboBoxFor(m => m.TargetID).ReadOnly(true).FieldLabel("Thuộc mục tiêu").EmptyText("Chọn mục tiêu ...")
                                .ID("cbxTarget")
                                .QueryMode(DataLoadMode.Local).Editable(false)
                                .ForceSelection(true)
                                .DisplayField("TargetName")
                                .ValueField("ID")
                                .Store(Html.X().Store()
                                            .AutoLoad(true)
                                            .Model(Html.X().Model()
                                                    .IDProperty("ID")
                                                    .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                            new ModelField("TargetName", ModelFieldType.String) { Mapping = "TargetName" }))
                                            .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("LoadTargetStore", "Plan", new { area = "Quality" }))
                                                    .Reader(Html.X().JsonReader().Root("data"))))
                                .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                                .Listeners(ls => { ls.TriggerClick.Fn = "showTarget"; }),
                            Html.X().ComboBoxFor(m => m.ParentID).ReadOnly(true).FieldLabel("Thuộc kế hoạch").EmptyText("Chọn kế hoạch ...")
                                .ID("cbxParentPlan")
                                .QueryMode(DataLoadMode.Local).Editable(false)
                                .ForceSelection(true)
                                .DisplayField("Name")
                                .ValueField("ID")
                                .Store(Html.X().Store()
                                                .AutoLoad(true)
                                                .Model(Html.X().Model()
                                                        .IDProperty("ID")
                                                        .Fields(new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }))
                                                .Proxy(Html.X().AjaxProxy()
                                                            .Url(Url.Action("LoadParentPlanStore", "Plan", new { area = "Quality" }))
                                                            .Reader(Html.X().JsonReader().Root("data"))))
                                .Triggers(Html.X().FieldTrigger().Icon(TriggerIcon.SimpleEdit))
                                .Listeners(ls => { ls.TriggerClick.Fn = "showParentPlan"; }),
                        Html.X().TextAreaFor(m => m.Content).FieldLabel("Nội dung").ReadOnly(true).EmptyText("Nhập nội dung kế hoạch").MinHeight(100).Flex(1))
                         ,
                          Html.X().FormPanel().Title("Thu hồi công nợ")
                            .AutoScroll(true)
                            .Layout(LayoutType.Column)
                            .Frame(true)
                            .Border(false)
                            .FieldDefaults(df => { df.LabelWidth = 90; df.LabelStyle = "padding-left: 5px;"; df.InputWidth = 210; })
                            .StyleSpec("border: none;")
                            .Items(
                                    Html.X().FieldSet().ColumnWidth(0.5).Title("Kế hoạch").Height(100).Margin(5)
                                            .Items(
                                                Html.X().NumberFieldFor(m => m.ValuePlan).ReadOnly(true).FieldLabel("Số thu").MinValue(0).Icon(Icon.MoneyDollar),
                                                Html.X().NumberFieldFor(m => m.RatePlan).ReadOnly(true).FieldLabel("%").MinValue(0).Icon(Icon.ChartBar),
                                                Html.X().DateFieldFor(m => m.TimePlan).ReadOnly(true).FieldLabel("Thời gian")
                                            )
                                    ,
                                    Html.X().FieldSet().ColumnWidth(0.5).Title("Thực tế").Height(100).Margin(5)
                                         .Items(
                                                Html.X().NumberFieldFor(m => m.ValueReal).ReadOnly(true).FieldLabel("Số thu").MinValue(0).Icon(Icon.MoneyDollar),
                                                Html.X().NumberFieldFor(m => m.RateReal).ReadOnly(true).FieldLabel("%").MinValue(0).Icon(Icon.ChartBar),
                                                Html.X().DateFieldFor(m => m.TimeReal).ReadOnly(true).FieldLabel("Thời gian")
                                                )
                                )
                    )
            )
)
<script>
    var showTarget = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadTargetPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectTarget = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxTarget.setValue(parseInt(id));
            App.WinTarget.close();
        };
    };
    var showParentPlan = function () {
        var mask = new Ext.LoadMask(Ext.getBody(), { msg: "Đang thực hiện ...." });
        mask.show();
        Ext.net.DirectMethod.request({
            url: '@(Url.Action("LoadPlanPartialView", "Plan", new { Area = "Quality" }, null))',
            success: function (result) {
                mask.hide();
            }
        });
    };
    var onSelectPlan = function (id) {
        if (id == 0) {
            Ext.MessageBox.show({
                title: 'Thông báo', msg: 'Bạn phải chọn phòng ban?',
                buttons: { yes: 'Đồng ý' },
                iconCls: '#Exclamation',
                fn: function (btn) {
                    if (btn == 'yes') {
                        return false;
                    }
                }
            });
        }
        else {
            App.cbxParentPlan.setValue(parseInt(id));
            App.WinPlan.close();
        };

    };
</script>