@using Ext.Net;
@using Ext.Net.MVC;
@model iDAS.Core.SystemCustomerItem

@{
    Layout = "~/Views/Shared/_LayoutSystem.cshtml";
}

@section headtag
{
    <script>
        var insertUrl = '@(Url.Action("InsertCustomer"))';
        var updateUrl = '@(Url.Action("UpdateCustomer"))';
        var deleteUrl = '@(Url.Action("DeleteCustomer"))';

        var createDatabase = function (id) {            
            var titleConfirm = 'Thông báo';
            var messageConfirm = 'Bạn muốn tạo Database cho khách hàng này ?';
            var url = '@(Url.Action("CreateDatabase"))';
            onRequest(id, url, titleConfirm, messageConfirm);
        };

        var deleteDatabase = function (id) {
            var titleConfirm = 'Thông báo';
            var messageConfirm = 'Bạn muốn xóa Database của khách hàng này ?';
            var url = '@(Url.Action("DeleteDatabase"))';
            onRequest(id, url, titleConfirm, messageConfirm);
        };

        var imageRenderer = function (value) {
            var tpl = "<img src='" + value + "' style='width:50px;height:50px'/>";
            return tpl;
        };

        var UpdateLogo = function () {
            this.up('window').down('form').submit({
                url: insertUrl,
                success: function (form, action) {
                    if (action.result.success) onClosed();
                }
            });
        }

        var openWindowUpdateLogo = function () {
            App.WindowLogoEdit.show();
        }

        var closeWindowUpdateLogo = function () {
            App.WindowLogoEdit.hide();
            App.WindowLogoEdit.down('form').reset();
        }

        var UploadLogo = function (data) {
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("UploadLogo"))',
                params: {
                    id: data,
                }
            });
        };
    </script>
}

@Html.X().Hidden().ID("RecordID")
@Html.X().Hidden().ID("Code")

@(Html.X().Window()
    .ID("WindowLogoEdit")
    .Title("Thay đổi logo")
    .Icon(Icon.ImageEdit)
    .Hidden(true)
    .Modal(true)
    .Width(450)
    .Layout(LayoutType.Fit)
    .Closable(false)
    .Border(false)
    .Items(
        Html.X().FormPanel()
            .FieldDefaults(lb => lb.LabelWidth = 120)
            .Frame(true)
            .DefaultAnchor("100%")
            .BodyPadding(10)
            .Items(
                Html.X().FileUploadField()
                    .ID("FileUploadField1")
                    .EmptyText("Chọn file ảnh logo")
                    .FieldLabel("Logo khách hàng")
                    .ButtonText("")
                    .Icon(Icon.ImageAdd)
                    .Listeners(ls => ls.Change.Handler = "#{btnUpload1}.setDisabled(false);"),
                Html.X().Button()
                    .ID("btnUpload1")
                    .Text("Tải lên")
                    .Icon(Icon.FolderUp)
                    .Disabled(true)
                    .DirectEvents(de =>
                    {
                        de.Click.Url = Url.Action("UploadLogo");
                        de.Click.ExtraParams.Add(new Parameter("id", "App.RecordID.value", ParameterMode.Raw));
                        de.Click.ExtraParams.Add(new Parameter("code", "App.Code.value", ParameterMode.Raw));
                        de.Click.Before = @"Ext.Msg.wait('Đang tải tệp lên hệ thống...', 'Tải tệp');";
                    })
            )
    )
    .Buttons(
        Html.X().Button()
            .Text("Đóng")
            .Icon(Icon.DoorOut)
            .Handler("#{btnUpload1}.setDisabled(true);closeWindowUpdateLogo();")
    )
)

@(Html.X().Window()
    .ID("WindowAdd")
    .Title("Tạo mới khách hàng")
    .Icon(Icon.UserAdd)
    .Hidden(true)
    .Modal(true)
    .Width(450)
    .Layout(LayoutType.Fit)
    .Closable(false)
    .Border(false)
    .Items(
        Html.X().FormPanelForModel()
            .FieldDefaults(lb=>lb.LabelWidth=120)
            .Frame(true)
            .DefaultAnchor("100%")
            .BodyPadding(10)
            .Items(
                Html.X().FileUploadField()
                    .ID("FileUploadField2")
                    .EmptyText("Chọn file ảnh logo")
                    .FieldLabel("Logo Khách hàng")
                    .ButtonText("")
                    .Icon(Icon.ImageAdd)
            )
    )
    .Buttons(
        Html.X().Button()
            .Text("Lưu")
            .Icon(Icon.DatabaseSave)
            .Handler("onAdd"),
        Html.X().Button()
            .Text("Đóng")
            .Icon(Icon.DoorOut)
            .Handler("onClosed")
    )
)

@(Html.X().Viewport()
    .Layout(LayoutType.Fit)
    .Items(
        Html.X().GridPanel()
            .ID("GridPanel1")
            .Title("Danh sách khách hàng")
            .ColumnLines(true)
            .ForceFit(true)
            .Icon(Icon.TextListBullets)
            .TopBar(
                Html.X().Toolbar()
                    .Layout(LayoutType.HBox)
                    .Items(
                        Html.X().Button()
                            .Text("Tạo mới")
                            .Icon(Icon.Add)
                            .Handler("onOpen"),
                        Html.X().ToolbarFill()
                    )
            )
            .Store(
                Html.X().StoreForModel()
                    .ID("StoreCustomers")
                    .PageSize(10)
                    .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadCustomers")).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
            )
            .ColumnModel(
                Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center),
                Html.X().Column().DataIndex(Model, m => m.Logo).Text("Logo").Renderer("imageRenderer").Align(Alignment.Center),
                Html.X().Column().DataIndex(Model, m => m.Code).Text("Mã khách hàng").Align(Alignment.Center).Editor(Html.X().TextField()),
                Html.X().Column().DataIndex(Model, m => m.Name).Text("Tên khách hàng").Align(Alignment.Center).Editor(Html.X().TextField()).Flex(1),
                Html.X().Column().DataIndex(Model, m => m.Company).Text("Tên công ty").Align(Alignment.Center).Editor(Html.X().TextField()),
                Html.X().Column().DataIndex(Model, m => m.Email).Text("Email").Align(Alignment.Center).Editor(Html.X().TextField()),
                Html.X().Column().DataIndex(Model, m => m.Phone).Text("Điện thoại").Align(Alignment.Center).Editor(Html.X().TextField()),
                Html.X().CheckColumn().DataIndex(Model, m => m.IsActive).Text("Kích hoạt").Width(120).Align(Alignment.Center).Editable(true),
                Html.X().DateColumn().DataIndex(Model, m => m.ActiveAt).Text("Ngày kích hoạt").Width(95).Format("dd-MM-yyyy").Align(Alignment.Center),
                Html.X().CommandColumn().Width(25).Align(Alignment.Center).Sortable(false).Resizable(false)
                    .Commands(Html.X().GridCommand().CommandName("Delete").Icon(Icon.Delete).ToolTip(tt => tt.Text = "Xóa khách hàng"))
                    .Listeners(ls => ls.Command.Handler = "onDelete(record.data.ID);"),
                Html.X().CommandColumn().Width(25).Align(Alignment.Center).Sortable(false).Resizable(false)
                    .Commands(Html.X().GridCommand().CommandName("CreateDatabase").Icon(Icon.DatabaseYellowStart).ToolTip(tt => tt.Text = "Tạo Database"))
                    .Listeners(ls => ls.Command.Handler = "createDatabase(record.data.ID);"),
                Html.X().CommandColumn().Width(25).Align(Alignment.Center).Sortable(false).Resizable(false)
                    .Commands(Html.X().GridCommand().CommandName("RemoveDatabase").Icon(Icon.DatabaseDelete).ToolTip(tt => tt.Text = "Xóa Database"))
                    .Listeners(ls => ls.Command.Handler = "deleteDatabase(record.data.ID);"),
                Html.X().CommandColumn().Width(25).Align(Alignment.Center).Sortable(false).Resizable(false)
                    .Commands(Html.X().GridCommand().CommandName("UpdateLogo").Icon(Icon.ImageEdit).ToolTip(tt => tt.Text = "Thay đổi Logo"))
                    .Listeners(ls => ls.Command.Handler = "App.RecordID.value = record.data.ID; App.Code.value = record.data.Code; openWindowUpdateLogo();")     
            )
            .View(Html.X().GridView().TrackOver(false))
            .BottomBar(
                Html.X().PagingToolbar()
                    .EmptyMsg("Hiện không có dữ liệu")
                    .NextText("Trang kế tiếp")
                    .PrevText("Trang trước")
                    .LastText("Trang cuối cùng")
                    .FirstText("Trang đầu tiên")
                    .DisplayMsg("Hiển thị từ {0}-{1} của {2} bản ghi")
                    .BeforePageText("Trang")
                    .AfterPageText("của {0}")
                    .RefreshText("Tải lại Dữ liệu")
                    .Items(
                        Html.X().Label("Số bản ghi trên 1 trang"),
                        Html.X().ToolbarSpacer(10),
                        Html.X().ComboBox()
                            .Width(50)
                            .Items("10", "20", "30", "50", "100")
                            .SelectedItems("10")
                            .Listeners(l => { l.Select.Fn = "onComboBoxSelect"; })
                    )
                    .Plugins(Html.X().ProgressBarPager())
            )
            .Plugins(
                Html.X().CellEditing().Listeners(ls => ls.Edit.Fn = "onEdit")
            )
    )
)


