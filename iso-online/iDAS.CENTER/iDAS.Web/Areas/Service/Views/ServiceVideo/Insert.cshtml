@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Utilities;
@model iDAS.Items.ServiceVideoItem
@(Html.X().Window()
        .ID("winNewServiceVideo")
    .Title("Thêm mới thông tin Đánh giá của khách hàng")
    .Icon(Icon.Add)
    .Width(800)
    .BodyPadding(6)
    .Constrain(true)
    .Modal(true)
    .Layout(LayoutType.Fit)
    .Items(
    Html.X().FormPanel()
            .ID("frServiceVideo")
    .Layout(LayoutType.Form)
    .Frame(true)
    .StyleSpec("border: none;")
    .FieldDefaults(d => d.LabelAlign = LabelAlign.Left)
    .Items(
     Html.X().Container().Layout(LayoutType.Column).Items(
        Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.82).MarginSpec("-6 0 0 0").Items(
            Html.X().ComboBoxFor(m => m.ServiceID)
                .FieldLabel("Dịch vụ*")
                .DisplayField("Name")
                .ValueField("ID")
                .QueryMode(DataLoadMode.Local)
                .ForceSelection(true)
                .Store(
                    Html.X().Store()
                        .AutoLoad(true)
                        .Model(
                        Html.X().Model()
                                .IDProperty("ID")
                                .Fields(
                                    new ModelField("ID", ModelFieldType.Int) { Mapping = "ID" },
                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                        )
                                    )
                            .Proxy(
                            Html.X().AjaxProxy()
                                    .Url(Url.Action("LoadService"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                        )),
                   
            Html.X().TextFieldFor(m => m.Title)
                .ID("txtAuthor")
                .AllowBlank(false)
                .BlankText("Tiêu đề video không được để trống!")
                .FieldLabel("Tiêu đề*"),
            Html.X().TextAreaFor(m => m.Description)
                .Height(100)
                .ID("Mô tả")
                .FieldLabel("Mô tả"),
                  Html.X().TextFieldFor(m=>m.Files).AllowBlank(false).BlankText("Đường dẫn video không được trống!").AllowOnlyWhitespace(false).ID("Files").FieldLabel("Đường dẫn video")
                    ),
            Html.X().Container()
                .Layout(LayoutType.Form)
                .ColumnWidth(0.18)
                .PaddingSpec("0 0 0 10")
                .Items(
                        Html.X().ImageButton()
                                .ID("IconImage")
                                .Width(123)
                                .Height(150)
                                .ImageUrl(@Url.Content(ConstantPath.UploadImageServiceAvatar).ToString()),
                        Html.X().FileUploadField()
                                .ButtonOnly(true)
                                .ID("AttachFile")
                                .ButtonText("---Chọn ảnh đại diện---")
                                .DirectEvents(de =>
                                    {
                                        // de.Change.Before = @"Ext.Msg.wait('Đang tải ảnh lên Máy chủ...', 'Tải ảnh');";
                                        de.Change.Url = Url.Action("UploadClick");
                                        de.Change.Failure = @"Ext.Msg.show({
                                            title   : 'Thông báo',
                                            msg     : 'Lỗi phát sinh xảy ra trong quá trình tải ảnh lên Máy chủ.',
                                            minWidth: 200,
                                            modal   : true,
                                            icon    : Ext.Msg.ERROR,
                                            buttons : Ext.Msg.OK
                                        });";
                                    })
                        )
                        ),
                        Html.X().TextFieldFor(m => m.Author).ID("Author").FieldLabel("Tác giả"),
                        Html.X().TextFieldFor(m => m.Keyword).ID("Keyword").FieldLabel("Từ khóa"),
                             Html.X().Container().Layout(LayoutType.Column).MarginSpec("0 0 0 0")
                                        .Items(
                                               Html.X().NumberFieldFor(m => m.Order).MarginSpec("0 5 0 0").ID("Order")
                                                            .FieldLabel("Thứ tự"),
                                                    Html.X().CheckboxFor(m => m.IsShow).ID("ckvIsShow")
                                                .BoxLabel("Hiển thị").HideLabel(true)
                                                .Value(true)
                                                .TabIndex(4)
                                                     
                                       ))
            )
            .Buttons(
            Html.X().Button()
            .ID("btnSave")
            .Text("Lưu lại")
            .Icon(Icon.DiskMultiple)
            .TabIndex(17)
            .DirectEvents(de =>
            {
                de.Click.ExtraParams.Add(new { imgService = new JRawValue("getImageName()") });
                de.Click.ExtraParams.Add(new { val = false });
                de.Click.Before = @"if (!App.frServiceVideo.getForm().isValid()) { return false; } ";
                de.Click.EventMask.ShowMask = true;
                de.Click.Action = "Insert";
                de.Click.EventMask.Msg = "Đang xử lý dữ liệu...";
                de.Click.FormID = "frServiceVideo";
            }),
            Html.X().Button()
            .ID("btnSaves")
            .Text("Lưu và thoát")
            .Icon(Icon.Disk)
            .TabIndex(18)
            .DirectEvents(de =>
            {
                de.Click.ExtraParams.Add(new { imgService = new JRawValue("getImageName()") });
                de.Click.ExtraParams.Add(new { val = true });
                de.Click.Before = @"if (!App.frServiceVideo.getForm().isValid()) { return false; } ";
                de.Click.EventMask.ShowMask = true;
                de.Click.Action = "Insert";
                de.Click.EventMask.Msg = "Đang xử lý dữ liệu...";
                de.Click.FormID = "frServiceVideo";
            }),
            Html.X().Button()
            .ID("btnReset")
            .Text("Nhập lại")
            .Icon(Icon.ArrowRefresh)
            .TabIndex(19)
                    .Handler("App.frServiceVideo.reset();"),
            Html.X().Button()
            .ID("btnCancel")
            .Text("Hủy")
            .Icon(Icon.Cancel)
            .TabIndex(20)
                    .Handler("App.frServiceVideo.reset(); this.up('window').close();")
            )
)

<script type="text/javascript">
    function renderEditor(htmlEditor) {
        var toolbar = htmlEditor.getToolbar();
        toolbar.add({ handler: function () { BrowseImage(); }, iconCls: "x-edit-image", text: "", tooltip: '<b> Insert Image</b><br>Upload a new Image</br>' });
    };
    function BrowseImage() {
        Ext.net.DirectMethod.request({
                       url: '@(Url.Action("frmBrowseImage", "News", new { Area = "Web" }, null))'
        });
    };
    function insertHandler(htmlEditor) {
        var urlImage =App.urlImage.getValue();
        App.Content.insertAtCursor(urlImage);
    };
</script>