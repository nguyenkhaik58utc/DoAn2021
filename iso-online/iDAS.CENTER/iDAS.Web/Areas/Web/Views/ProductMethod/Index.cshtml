@using Ext.Net.MVC
@using Ext.Net
@using iDAS.Web.ExtExtend
@model iDAS.Items.ProductMethodItem
@{
    Layout = "~/Views/Shared/_LayoutSystem.cshtml";
}

@(Html.X().Viewport().Layout(LayoutType.Fit)
    .Items(
        Html.X().GridPanel()
        .ID("ProductMethodPanel")
        .Border(false)
        .TopBar(
            Html.X().Toolbar()
            .Items(
                Html.X().Button().Text("Thêm").ID("btnCreateProductMethod").Icon(Icon.Add).Handler("showCreateProductMethod();"),
                Html.X().Button().Text("Sửa").ID("btnUpdateProductMethod").Icon(Icon.Pencil).Handler("showUpdateProductMethod();").Disabled(true),
                Html.X().Button().Text("Xóa").ID("btnDeleteProductMethod").Icon(Icon.Delete).Handler("showDeleteProductMethod();").Disabled(true),
                Html.X().Button().Text("Xem chi tiết").ID("btnDetailProductMethod").Icon(Icon.Zoom).Handler("showDetailProductMethod();").Disabled(true)
            )
        )
        .Store(
            Html.X().Store()
            .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadData")).Reader(Html.X().JsonReader().Root("data")))
            .RemoteSort(true)
            .RemotePaging(true)
            .PageSize(15)
            .Model(
                Html.X().Model()
                .Fields(
                    Html.X().ModelField().Name("ID").Type(ModelFieldType.Int),
                    Html.X().ModelField().Name("Name").Type(ModelFieldType.String),
                    Html.X().ModelField().Name("Description").Type(ModelFieldType.String),
                    Html.X().ModelField().Name("IsActive").Type(ModelFieldType.Boolean),
                    Html.X().ModelField().Name("CreateAt").Type(ModelFieldType.Date),
                    Html.X().ModelField().Name("UpdateAt").Type(ModelFieldType.Date)
                )
            )
            .Listeners(ls => ls.Refresh.Handler = "deSelectProductMethod()")
        )
        .Listeners(ls => ls.SelectionChange.Handler = "selectionChangeProductMethod();")
        .ColumnModel(
            Html.X().RowNumbererColumn().Text("STT").Align(Alignment.Center).Width(35).StyleSpec("font-weight: bold; text-align: center;"),
            Html.X().Column().Text("ID").DataIndex(Model, m => m.ID).Hidden(true),
            Html.X().Column().Text("Tên danh mục").DataIndex(Model, m => m.Name).StyleSpec("font-weight: bold;text-align: center").Width(250),
            Html.X().Column().Text("Mô tả").DataIndex(Model, m => m.Description).StyleSpec("font-weight: bold;text-align: center").Flex(1).Wrap(true),
            Html.X().CheckColumn().Text("Kích hoạt").DataIndex(Model, m => m.IsActive).StyleSpec("font-weight: bold;text-align: center").Width(120).Align(Alignment.Center),
            Html.X().DateColumn().Text("Ngày tạo").DataIndex(Model, m => m.CreateAt).Width(100).StyleSpec("font-weight: bold; text-align: center").Format("dd/MM/yyyy").Align(Alignment.Center),
            Html.X().DateColumn().Text("Ngày sửa").DataIndex(Model, m => m.UpdateAt).Width(100).StyleSpec("font-weight: bold; text-align: center").Format("dd/MM/yyyy").Align(Alignment.Center)
        )
        .BottomBar(Html.X().CustomPagingToolbar())
    )
)

<script type="text/javascript">
    var urlCreateProductMethod = '@Url.Action("Create", "ProductMethod", new { area = "Web" })';
    var urlUpdateProductMethod = '@Url.Action("Update", "ProductMethod", new { area = "Web" })';
    var urlDeleteProductMethod = '@Url.Action("Delete", "ProductMethod", new { area = "Web" })';
    var urlDetailProductMethod = '@Url.Action("Detail", "ProductMethod", new { area = "Web" })';

    var getProductMethodSelection = function () {
        return App.ProductMethodPanel.getSelectionModel().getLastSelected();
    };
    var reloadProductMethod = function () {
        App.ProductMethodPanel.getStore().reload();
        deSelectProductMethod();
    }
    var deSelectProductMethod = function () {
        App.ProductMethodPanel.selModel.lastSelected = null;
        selectionChangeProductMethod();
    }
    var showCreateProductMethod = function () {
        var url = urlCreateProductMethod;
        onDirectMethod(url, null, 'get');
    };
    var showUpdateProductMethod = function () {
        var url = urlUpdateProductMethod;
        var record = getProductMethodSelection();
        var ProductMethodId = record == null ? 0 : record.data.ID;
        var params = { ProductMethodId: ProductMethodId };
        onDirectMethod(url, params, 'get');
    };
    var showDeleteProductMethod = function () {
        var url = urlDeleteProductMethod;
        var deleteSuccess = function (result) {
            if (result) {
                Ext.MessageBox.show({
                    title: 'Xác nhận', msg: 'Bạn có muốn xóa bỏ bản ghi này hay không?',
                    buttons: { yes: 'Đồng ý', no: 'Không' },
                    iconCls: '#Information',
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var record = getProductMethodSelection();
                            var ProductMethodId = record == null ? 0 : record.data.ID;
                            var params = { ProductMethodId: ProductMethodId };
                            onDirectMethod(url, params, 'post', reloadProductMethod);
                        }
                    }
                });
            }
        };
        onDirectMethod(url, null, 'get', deleteSuccess);
    };
    var showDetailProductMethod = function () {
        var url = urlDetailProductMethod;
        var record = getProductMethodSelection();
        var ProductMethodId = record == null ? 0 : record.data.ID;
        var params = { ProductMethodId: ProductMethodId };
        onDirectMethod(url, params, 'get');
    };
    var selectionChangeProductMethod = function () {
        var record = getProductMethodSelection();
        App.btnUpdateProductMethod.setDisabled(record == null);
        App.btnDeleteProductMethod.setDisabled(record == null);
        App.btnDetailProductMethod.setDisabled(record == null);
    };
</script>
