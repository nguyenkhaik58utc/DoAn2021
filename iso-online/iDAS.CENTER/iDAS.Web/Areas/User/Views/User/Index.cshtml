@using Ext.Net;
@using Ext.Net.MVC;
@using iDAS.Web;
@model iDAS.Items.UserItem

@{
    Layout = "~/Views/Shared/_LayoutSystem.cshtml";
}

@section headtag
{
    <script>
        var updateUrl = '@(Url.Action("UpdateUser"))';
        var deleteUrl = '@(Url.Action("DeleteUser"))';
        var insertUrl = '@(Url.Action("InsertUser"))';
        var CheckStatus = function () {
            var records = App.GrdUser.selModel.getSelection();
            if (records.length == 1) {
                App.btnDetail.setDisabled(false);
                App.btnSetting.setDisabled(false);
                App.btnDelete.setDisabled(false);
                App.btnUpdate.setDisabled(false);
            }
            else {
                App.btnDetail.setDisabled(true);
                App.btnSetting.setDisabled(true);
                App.btnDelete.setDisabled(true);
                App.btnUpdate.setDisabled(true);
            }
        };
        var SettingPosittion = function () {
            var records = App.GrdUser.selModel.getSelection();
            if (records.length > 0) {
                var postUrl = "/User/User/SettingForm/" + records[0].get('ID');
                Ext.net.DirectMethod.request({ url: postUrl });
            }
            else {
                Ext.Msg.alert("Bạn chưa lựa chọn bản ghi nào!");
            }
        };
        var ViewDetail = function () {
            var records = App.GrdUser.selModel.getSelection();
            if (records.length > 0) {
                var postUrl = "/User/User/DetailForm/" + records[0].get('ID');
                Ext.net.DirectMethod.request({ url: postUrl });
            }
            else {
                Ext.Msg.alert("Bạn chưa lựa chọn bản ghi nào!");
            }
        }
        var UpdateItem = function () {
            var records = App.GrdUser.selModel.getSelection();
            if (records.length > 0) {
                var postUrl = "/User/User/UpdateForm/" + records[0].get('ID');
                Ext.net.DirectMethod.request({ url: postUrl });
            }
            else {
                Ext.Msg.alert("Bạn chưa lựa chọn bản ghi nào!");
            }
        }
        var AddNew = function () {
            Ext.net.DirectMethod.request({ url: "/User/User/AddForm" });
        }

    </script>
}
@(Html.X().Viewport()
    .Layout(LayoutType.Fit)
    .Items(
        Html.X().GridPanel()
            .Title("Danh sách thành viên")
            .ID("GrdUser")
                .Header(false)
                .MarginSpec("1 0 1 1")
                 .Border(true)
                 .ColumnLines(true)
                 .ForceFit(true)
                 .Icon(Icon.TextListBullets)
        //.SelectionModel(sm=>sm.Add(Html.X().RowSelectionModel().SelectedIndex(0)))
            .TopBar(
                Html.X().Toolbar()
                    .Layout(LayoutType.HBox)
                    .Items(
                        Html.X().Button()
                            .Text("Thêm mới")
                            .Icon(Icon.Add)
                            .Handler("AddNew();"),
                        Html.X().Button().ID("btnUpdate").Text("Sửa").Handler("UpdateItem();").Icon(Icon.Pencil).Disabled(true),
                         Html.X().ToolbarSeparator(),
                        Html.X().Button().Text("Xóa").Icon(Icon.Delete).ID("btnDelete").Handler("onDelete(App.GrdUser.selModel.getSelection()[0].get('ID'));").Disabled(true),
                        Html.X().ToolbarSeparator(),
                        Html.X().Button().Text("Chi tiết").ToolTip("Xem chi tiết").ID("btnDetail").Icon(Icon.Zoom).Handler("ViewDetail();").Disabled(true),
                        Html.X().ToolbarSeparator(),
                            Html.X().Button().Text("Thiết lập chức danh").ToolTip("Thiết lập chức danh").ID("btnSetting").Handler("SettingPosittion();").Icon(Icon.Creditcards).Disabled(true),
                        Html.X().ToolbarFill(),
                        Html.X().Button()
                            .ID("btnExtra")
                            .Text("Tiện ích")
                            .Icon(Icon.PackageGreen)
                            .Menu(new Menu
                            {
                                Items = {
                                    new MenuItem { Text = "Nhập khẩu bản ghi từ tệp Excel", Icon = Icon.PageWhiteExcel},
                                    new MenuItem { Text = "Nhập khẩu bản ghi từ tệp XML", Icon = Icon.Xhtml},
                                    Html.X().MenuSeparator(),
                                    new MenuItem { Text = "Xuất khẩu bản ghi ra tệp Excel", Icon = Icon.PageWhiteExcel},
                                    new MenuItem { Text = "Xuất khẩu bản ghi ra tệp Words", Icon = Icon.PageWhiteWord},
                                    new MenuItem { Text = "Xuất khẩu bản ghi ra tệp XML", Icon = Icon.Xhtml}
                                }
                            })
                    )
            )
            .Store(
                Html.X().StoreForModel()
                    .ID("StoreUsers")
                    .RemotePaging(true)
                    .PageSize(10)
                    .Proxy(Html.X().AjaxProxy().Url(Url.Action("LoadUsers")).Reader(Html.X().JsonReader().Root("data")).IDParam("ID"))
            )
            .ColumnModel(
                    Html.X().RowNumbererColumn().Text("STT").Width(30).Align(Alignment.Center).StyleSpec("font-weight: bold;text-align: center"),
                    Html.X().Column().DataIndex(Model, m => m.Name).Text("Họ Tên").Flex(1).StyleSpec("font-weight: bold;text-align: center"),
                    Html.X().Column().DataIndex(Model, m => m.Email).Text("Email").Width(300).StyleSpec("font-weight: bold;text-align: center"),
                    Html.X().Column().DataIndex(Model, m => m.Account).Text("Tài khoản").StyleSpec("font-weight: bold;text-align: center"),
        //Html.X().Column().DataIndex(Model, m => m.Password).Text("Mật khẩu").Renderer("return '*********';").Align(Alignment.Center).Editor(Html.X().TextField()),
                    Html.X().CheckColumn().DataIndex(Model, m => m.IsActive).Text("Kích hoạt").Width(70).Align(Alignment.Center).Editable(true).StyleSpec("font-weight: bold;text-align: center"),
                    Html.X().DateColumn().DataIndex(Model, m => m.ActiveAt).Text("Ngày kích hoạt").Width(95).Format("dd-MM-yyyy").Align(Alignment.Center).StyleSpec("font-weight: bold;text-align: center")
        //,
        //Html.X().CommandColumn().Width(25).Align(Alignment.Center)
        //    .Commands(Html.X().GridCommand().CommandName("Delete").Icon(Icon.Delete).ToolTip(tt => tt.Text = "Xóa"))
        //    .Listeners(ls => ls.Command.Handler = "onDelete(record.data.ID);")
            )
            .Plugins(Html.X().CellEditing().Listeners(ls => ls.Edit.Fn = "onEdit"))
        //.Listeners(ls => ls.SelectionChange.Handler = "if (selected.length<=0) return; App.UserId.value = selected[0].data.ID; App.GridPanel1.getStore().load({params: {groupId: App.GroupId.value,userId: App.UserId.value}});")
                 .SelectionModel(Html.X().CheckboxSelectionModel().Mode(SelectionMode.Single).Listeners(ls => ls.SelectionChange.Fn = "CheckStatus"))
            .BottomBar(
                Html.X().PagingToolbar()
                    .EmptyMsg("Hiện không có dữ liệu")
                    .NextText("Trang kế tiếp")
                    .PrevText("Trang trước")
                    .LastText("Trang cuối cùng")
                    .FirstText("Trang đầu tiên")
                    .DisplayMsg("Hiển thị từ {0}-{1} của {2} bản ghi")
                    .BeforePageText("Trang")
                    .AfterPageText("của {0}")
                    .RefreshText("Tải lại dữ liệu")
                    .Items(
                        Html.X().Label("Số bản ghi trên 1 trang"),
                        Html.X().ToolbarSpacer(10),
                        Html.X().ComboBox()
                            .Width(50)
                            .Items("10", "20", "30", "50", "100")
                            .SelectedItems("10")
                            .Listeners(l => { l.Select.Fn = "onComboBoxSelect"; })
                    )
                    .Plugins(Html.X().ProgressBarPager())
            )
    )
)
